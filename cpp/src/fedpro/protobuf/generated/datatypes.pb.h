// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datatypes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_datatypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_datatypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_datatypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_datatypes_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_datatypes_2eproto;
namespace rti1516_2025 {
namespace fedpro {
class AttributeHandle;
struct AttributeHandleDefaultTypeInternal;
extern AttributeHandleDefaultTypeInternal _AttributeHandle_default_instance_;
class AttributeHandleSet;
struct AttributeHandleSetDefaultTypeInternal;
extern AttributeHandleSetDefaultTypeInternal _AttributeHandleSet_default_instance_;
class AttributeHandleValue;
struct AttributeHandleValueDefaultTypeInternal;
extern AttributeHandleValueDefaultTypeInternal _AttributeHandleValue_default_instance_;
class AttributeHandleValueMap;
struct AttributeHandleValueMapDefaultTypeInternal;
extern AttributeHandleValueMapDefaultTypeInternal _AttributeHandleValueMap_default_instance_;
class AttributeSetRegionSetPair;
struct AttributeSetRegionSetPairDefaultTypeInternal;
extern AttributeSetRegionSetPairDefaultTypeInternal _AttributeSetRegionSetPair_default_instance_;
class AttributeSetRegionSetPairList;
struct AttributeSetRegionSetPairListDefaultTypeInternal;
extern AttributeSetRegionSetPairListDefaultTypeInternal _AttributeSetRegionSetPairList_default_instance_;
class ConfigurationResult;
struct ConfigurationResultDefaultTypeInternal;
extern ConfigurationResultDefaultTypeInternal _ConfigurationResult_default_instance_;
class ConveyedRegion;
struct ConveyedRegionDefaultTypeInternal;
extern ConveyedRegionDefaultTypeInternal _ConveyedRegion_default_instance_;
class ConveyedRegionSet;
struct ConveyedRegionSetDefaultTypeInternal;
extern ConveyedRegionSetDefaultTypeInternal _ConveyedRegionSet_default_instance_;
class Credentials;
struct CredentialsDefaultTypeInternal;
extern CredentialsDefaultTypeInternal _Credentials_default_instance_;
class DimensionAndRange;
struct DimensionAndRangeDefaultTypeInternal;
extern DimensionAndRangeDefaultTypeInternal _DimensionAndRange_default_instance_;
class DimensionHandle;
struct DimensionHandleDefaultTypeInternal;
extern DimensionHandleDefaultTypeInternal _DimensionHandle_default_instance_;
class DimensionHandleSet;
struct DimensionHandleSetDefaultTypeInternal;
extern DimensionHandleSetDefaultTypeInternal _DimensionHandleSet_default_instance_;
class ExceptionData;
struct ExceptionDataDefaultTypeInternal;
extern ExceptionDataDefaultTypeInternal _ExceptionData_default_instance_;
class FederateHandle;
struct FederateHandleDefaultTypeInternal;
extern FederateHandleDefaultTypeInternal _FederateHandle_default_instance_;
class FederateHandleSaveStatusPair;
struct FederateHandleSaveStatusPairDefaultTypeInternal;
extern FederateHandleSaveStatusPairDefaultTypeInternal _FederateHandleSaveStatusPair_default_instance_;
class FederateHandleSaveStatusPairArray;
struct FederateHandleSaveStatusPairArrayDefaultTypeInternal;
extern FederateHandleSaveStatusPairArrayDefaultTypeInternal _FederateHandleSaveStatusPairArray_default_instance_;
class FederateHandleSet;
struct FederateHandleSetDefaultTypeInternal;
extern FederateHandleSetDefaultTypeInternal _FederateHandleSet_default_instance_;
class FederateRestoreStatus;
struct FederateRestoreStatusDefaultTypeInternal;
extern FederateRestoreStatusDefaultTypeInternal _FederateRestoreStatus_default_instance_;
class FederateRestoreStatusArray;
struct FederateRestoreStatusArrayDefaultTypeInternal;
extern FederateRestoreStatusArrayDefaultTypeInternal _FederateRestoreStatusArray_default_instance_;
class FederationExecutionInformation;
struct FederationExecutionInformationDefaultTypeInternal;
extern FederationExecutionInformationDefaultTypeInternal _FederationExecutionInformation_default_instance_;
class FederationExecutionInformationSet;
struct FederationExecutionInformationSetDefaultTypeInternal;
extern FederationExecutionInformationSetDefaultTypeInternal _FederationExecutionInformationSet_default_instance_;
class FederationExecutionMemberInformation;
struct FederationExecutionMemberInformationDefaultTypeInternal;
extern FederationExecutionMemberInformationDefaultTypeInternal _FederationExecutionMemberInformation_default_instance_;
class FederationExecutionMemberInformationSet;
struct FederationExecutionMemberInformationSetDefaultTypeInternal;
extern FederationExecutionMemberInformationSetDefaultTypeInternal _FederationExecutionMemberInformationSet_default_instance_;
class FileFomModule;
struct FileFomModuleDefaultTypeInternal;
extern FileFomModuleDefaultTypeInternal _FileFomModule_default_instance_;
class FomModule;
struct FomModuleDefaultTypeInternal;
extern FomModuleDefaultTypeInternal _FomModule_default_instance_;
class FomModuleSet;
struct FomModuleSetDefaultTypeInternal;
extern FomModuleSetDefaultTypeInternal _FomModuleSet_default_instance_;
class InteractionClassHandle;
struct InteractionClassHandleDefaultTypeInternal;
extern InteractionClassHandleDefaultTypeInternal _InteractionClassHandle_default_instance_;
class InteractionClassHandleSet;
struct InteractionClassHandleSetDefaultTypeInternal;
extern InteractionClassHandleSetDefaultTypeInternal _InteractionClassHandleSet_default_instance_;
class JoinResult;
struct JoinResultDefaultTypeInternal;
extern JoinResultDefaultTypeInternal _JoinResult_default_instance_;
class LogicalTime;
struct LogicalTimeDefaultTypeInternal;
extern LogicalTimeDefaultTypeInternal _LogicalTime_default_instance_;
class LogicalTimeInterval;
struct LogicalTimeIntervalDefaultTypeInternal;
extern LogicalTimeIntervalDefaultTypeInternal _LogicalTimeInterval_default_instance_;
class MessageRetractionHandle;
struct MessageRetractionHandleDefaultTypeInternal;
extern MessageRetractionHandleDefaultTypeInternal _MessageRetractionHandle_default_instance_;
class MessageRetractionReturn;
struct MessageRetractionReturnDefaultTypeInternal;
extern MessageRetractionReturnDefaultTypeInternal _MessageRetractionReturn_default_instance_;
class ObjectClassHandle;
struct ObjectClassHandleDefaultTypeInternal;
extern ObjectClassHandleDefaultTypeInternal _ObjectClassHandle_default_instance_;
class ObjectInstanceHandle;
struct ObjectInstanceHandleDefaultTypeInternal;
extern ObjectInstanceHandleDefaultTypeInternal _ObjectInstanceHandle_default_instance_;
class ParameterHandle;
struct ParameterHandleDefaultTypeInternal;
extern ParameterHandleDefaultTypeInternal _ParameterHandle_default_instance_;
class ParameterHandleValue;
struct ParameterHandleValueDefaultTypeInternal;
extern ParameterHandleValueDefaultTypeInternal _ParameterHandleValue_default_instance_;
class ParameterHandleValueMap;
struct ParameterHandleValueMapDefaultTypeInternal;
extern ParameterHandleValueMapDefaultTypeInternal _ParameterHandleValueMap_default_instance_;
class RangeBounds;
struct RangeBoundsDefaultTypeInternal;
extern RangeBoundsDefaultTypeInternal _RangeBounds_default_instance_;
class RegionHandle;
struct RegionHandleDefaultTypeInternal;
extern RegionHandleDefaultTypeInternal _RegionHandle_default_instance_;
class RegionHandleSet;
struct RegionHandleSetDefaultTypeInternal;
extern RegionHandleSetDefaultTypeInternal _RegionHandleSet_default_instance_;
class RtiConfiguration;
struct RtiConfigurationDefaultTypeInternal;
extern RtiConfigurationDefaultTypeInternal _RtiConfiguration_default_instance_;
class SupplementalReceiveInfo;
struct SupplementalReceiveInfoDefaultTypeInternal;
extern SupplementalReceiveInfoDefaultTypeInternal _SupplementalReceiveInfo_default_instance_;
class SupplementalReflectInfo;
struct SupplementalReflectInfoDefaultTypeInternal;
extern SupplementalReflectInfoDefaultTypeInternal _SupplementalReflectInfo_default_instance_;
class TimeQueryReturn;
struct TimeQueryReturnDefaultTypeInternal;
extern TimeQueryReturnDefaultTypeInternal _TimeQueryReturn_default_instance_;
class TransportationTypeHandle;
struct TransportationTypeHandleDefaultTypeInternal;
extern TransportationTypeHandleDefaultTypeInternal _TransportationTypeHandle_default_instance_;
}  // namespace fedpro
}  // namespace rti1516_2025
PROTOBUF_NAMESPACE_OPEN
template<> ::rti1516_2025::fedpro::AttributeHandle* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandle>(Arena*);
template<> ::rti1516_2025::fedpro::AttributeHandleSet* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleSet>(Arena*);
template<> ::rti1516_2025::fedpro::AttributeHandleValue* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleValue>(Arena*);
template<> ::rti1516_2025::fedpro::AttributeHandleValueMap* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleValueMap>(Arena*);
template<> ::rti1516_2025::fedpro::AttributeSetRegionSetPair* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::AttributeSetRegionSetPair>(Arena*);
template<> ::rti1516_2025::fedpro::AttributeSetRegionSetPairList* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::AttributeSetRegionSetPairList>(Arena*);
template<> ::rti1516_2025::fedpro::ConfigurationResult* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ConfigurationResult>(Arena*);
template<> ::rti1516_2025::fedpro::ConveyedRegion* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ConveyedRegion>(Arena*);
template<> ::rti1516_2025::fedpro::ConveyedRegionSet* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ConveyedRegionSet>(Arena*);
template<> ::rti1516_2025::fedpro::Credentials* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::Credentials>(Arena*);
template<> ::rti1516_2025::fedpro::DimensionAndRange* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::DimensionAndRange>(Arena*);
template<> ::rti1516_2025::fedpro::DimensionHandle* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::DimensionHandle>(Arena*);
template<> ::rti1516_2025::fedpro::DimensionHandleSet* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::DimensionHandleSet>(Arena*);
template<> ::rti1516_2025::fedpro::ExceptionData* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ExceptionData>(Arena*);
template<> ::rti1516_2025::fedpro::FederateHandle* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(Arena*);
template<> ::rti1516_2025::fedpro::FederateHandleSaveStatusPair* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandleSaveStatusPair>(Arena*);
template<> ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray>(Arena*);
template<> ::rti1516_2025::fedpro::FederateHandleSet* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandleSet>(Arena*);
template<> ::rti1516_2025::fedpro::FederateRestoreStatus* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederateRestoreStatus>(Arena*);
template<> ::rti1516_2025::fedpro::FederateRestoreStatusArray* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederateRestoreStatusArray>(Arena*);
template<> ::rti1516_2025::fedpro::FederationExecutionInformation* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederationExecutionInformation>(Arena*);
template<> ::rti1516_2025::fedpro::FederationExecutionInformationSet* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederationExecutionInformationSet>(Arena*);
template<> ::rti1516_2025::fedpro::FederationExecutionMemberInformation* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederationExecutionMemberInformation>(Arena*);
template<> ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederationExecutionMemberInformationSet>(Arena*);
template<> ::rti1516_2025::fedpro::FileFomModule* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FileFomModule>(Arena*);
template<> ::rti1516_2025::fedpro::FomModule* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FomModule>(Arena*);
template<> ::rti1516_2025::fedpro::FomModuleSet* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FomModuleSet>(Arena*);
template<> ::rti1516_2025::fedpro::InteractionClassHandle* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::InteractionClassHandle>(Arena*);
template<> ::rti1516_2025::fedpro::InteractionClassHandleSet* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::InteractionClassHandleSet>(Arena*);
template<> ::rti1516_2025::fedpro::JoinResult* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::JoinResult>(Arena*);
template<> ::rti1516_2025::fedpro::LogicalTime* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::LogicalTime>(Arena*);
template<> ::rti1516_2025::fedpro::LogicalTimeInterval* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::LogicalTimeInterval>(Arena*);
template<> ::rti1516_2025::fedpro::MessageRetractionHandle* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::MessageRetractionHandle>(Arena*);
template<> ::rti1516_2025::fedpro::MessageRetractionReturn* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::MessageRetractionReturn>(Arena*);
template<> ::rti1516_2025::fedpro::ObjectClassHandle* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ObjectClassHandle>(Arena*);
template<> ::rti1516_2025::fedpro::ObjectInstanceHandle* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(Arena*);
template<> ::rti1516_2025::fedpro::ParameterHandle* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ParameterHandle>(Arena*);
template<> ::rti1516_2025::fedpro::ParameterHandleValue* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ParameterHandleValue>(Arena*);
template<> ::rti1516_2025::fedpro::ParameterHandleValueMap* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ParameterHandleValueMap>(Arena*);
template<> ::rti1516_2025::fedpro::RangeBounds* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::RangeBounds>(Arena*);
template<> ::rti1516_2025::fedpro::RegionHandle* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::RegionHandle>(Arena*);
template<> ::rti1516_2025::fedpro::RegionHandleSet* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::RegionHandleSet>(Arena*);
template<> ::rti1516_2025::fedpro::RtiConfiguration* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::RtiConfiguration>(Arena*);
template<> ::rti1516_2025::fedpro::SupplementalReceiveInfo* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::SupplementalReceiveInfo>(Arena*);
template<> ::rti1516_2025::fedpro::SupplementalReflectInfo* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::SupplementalReflectInfo>(Arena*);
template<> ::rti1516_2025::fedpro::TimeQueryReturn* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::TimeQueryReturn>(Arena*);
template<> ::rti1516_2025::fedpro::TransportationTypeHandle* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::TransportationTypeHandle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rti1516_2025 {
namespace fedpro {

enum AdditionalSettingsResultCode : int {
  SETTINGS_IGNORED = 0,
  SETTINGS_FAILED_TO_PARSE = 1,
  SETTINGS_APPLIED = 2,
  AdditionalSettingsResultCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AdditionalSettingsResultCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AdditionalSettingsResultCode_IsValid(int value);
constexpr AdditionalSettingsResultCode AdditionalSettingsResultCode_MIN = SETTINGS_IGNORED;
constexpr AdditionalSettingsResultCode AdditionalSettingsResultCode_MAX = SETTINGS_APPLIED;
constexpr int AdditionalSettingsResultCode_ARRAYSIZE = AdditionalSettingsResultCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdditionalSettingsResultCode_descriptor();
template<typename T>
inline const std::string& AdditionalSettingsResultCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AdditionalSettingsResultCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AdditionalSettingsResultCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AdditionalSettingsResultCode_descriptor(), enum_t_value);
}
inline bool AdditionalSettingsResultCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AdditionalSettingsResultCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AdditionalSettingsResultCode>(
    AdditionalSettingsResultCode_descriptor(), name, value);
}
enum CallbackModel : int {
  EVOKED = 0,
  IMMEDIATE = 1,
  CallbackModel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CallbackModel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CallbackModel_IsValid(int value);
constexpr CallbackModel CallbackModel_MIN = EVOKED;
constexpr CallbackModel CallbackModel_MAX = IMMEDIATE;
constexpr int CallbackModel_ARRAYSIZE = CallbackModel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CallbackModel_descriptor();
template<typename T>
inline const std::string& CallbackModel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CallbackModel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CallbackModel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CallbackModel_descriptor(), enum_t_value);
}
inline bool CallbackModel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CallbackModel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CallbackModel>(
    CallbackModel_descriptor(), name, value);
}
enum ResignAction : int {
  UNCONDITIONALLY_DIVEST_ATTRIBUTES = 0,
  DELETE_OBJECTS = 1,
  CANCEL_PENDING_OWNERSHIP_ACQUISITIONS = 2,
  DELETE_OBJECTS_THEN_DIVEST = 3,
  CANCEL_THEN_DELETE_THEN_DIVEST = 4,
  NO_ACTION = 5,
  ResignAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ResignAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ResignAction_IsValid(int value);
constexpr ResignAction ResignAction_MIN = UNCONDITIONALLY_DIVEST_ATTRIBUTES;
constexpr ResignAction ResignAction_MAX = NO_ACTION;
constexpr int ResignAction_ARRAYSIZE = ResignAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResignAction_descriptor();
template<typename T>
inline const std::string& ResignAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResignAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResignAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResignAction_descriptor(), enum_t_value);
}
inline bool ResignAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResignAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResignAction>(
    ResignAction_descriptor(), name, value);
}
enum SynchronizationPointFailureReason : int {
  SYNCHRONIZATION_POINT_LABEL_NOT_UNIQUE = 0,
  SYNCHRONIZATION_SET_MEMBER_NOT_JOINED = 1,
  SynchronizationPointFailureReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SynchronizationPointFailureReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SynchronizationPointFailureReason_IsValid(int value);
constexpr SynchronizationPointFailureReason SynchronizationPointFailureReason_MIN = SYNCHRONIZATION_POINT_LABEL_NOT_UNIQUE;
constexpr SynchronizationPointFailureReason SynchronizationPointFailureReason_MAX = SYNCHRONIZATION_SET_MEMBER_NOT_JOINED;
constexpr int SynchronizationPointFailureReason_ARRAYSIZE = SynchronizationPointFailureReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SynchronizationPointFailureReason_descriptor();
template<typename T>
inline const std::string& SynchronizationPointFailureReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SynchronizationPointFailureReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SynchronizationPointFailureReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SynchronizationPointFailureReason_descriptor(), enum_t_value);
}
inline bool SynchronizationPointFailureReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SynchronizationPointFailureReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SynchronizationPointFailureReason>(
    SynchronizationPointFailureReason_descriptor(), name, value);
}
enum SaveFailureReason : int {
  RTI_UNABLE_TO_SAVE = 0,
  FEDERATE_REPORTED_FAILURE_DURING_SAVE = 1,
  FEDERATE_RESIGNED_DURING_SAVE = 2,
  RTI_DETECTED_FAILURE_DURING_SAVE = 3,
  SAVE_TIME_CANNOT_BE_HONORED = 4,
  SAVE_ABORTED = 5,
  SaveFailureReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SaveFailureReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SaveFailureReason_IsValid(int value);
constexpr SaveFailureReason SaveFailureReason_MIN = RTI_UNABLE_TO_SAVE;
constexpr SaveFailureReason SaveFailureReason_MAX = SAVE_ABORTED;
constexpr int SaveFailureReason_ARRAYSIZE = SaveFailureReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SaveFailureReason_descriptor();
template<typename T>
inline const std::string& SaveFailureReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SaveFailureReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SaveFailureReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SaveFailureReason_descriptor(), enum_t_value);
}
inline bool SaveFailureReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SaveFailureReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SaveFailureReason>(
    SaveFailureReason_descriptor(), name, value);
}
enum RestoreFailureReason : int {
  RTI_UNABLE_TO_RESTORE = 0,
  FEDERATE_REPORTED_FAILURE_DURING_RESTORE = 1,
  FEDERATE_RESIGNED_DURING_RESTORE = 2,
  RTI_DETECTED_FAILURE_DURING_RESTORE = 3,
  RESTORE_ABORTED = 4,
  RestoreFailureReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RestoreFailureReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RestoreFailureReason_IsValid(int value);
constexpr RestoreFailureReason RestoreFailureReason_MIN = RTI_UNABLE_TO_RESTORE;
constexpr RestoreFailureReason RestoreFailureReason_MAX = RESTORE_ABORTED;
constexpr int RestoreFailureReason_ARRAYSIZE = RestoreFailureReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RestoreFailureReason_descriptor();
template<typename T>
inline const std::string& RestoreFailureReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RestoreFailureReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RestoreFailureReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RestoreFailureReason_descriptor(), enum_t_value);
}
inline bool RestoreFailureReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RestoreFailureReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RestoreFailureReason>(
    RestoreFailureReason_descriptor(), name, value);
}
enum SaveStatus : int {
  NO_SAVE_IN_PROGRESS = 0,
  FEDERATE_INSTRUCTED_TO_SAVE = 1,
  FEDERATE_SAVING = 2,
  FEDERATE_WAITING_FOR_FEDERATION_TO_SAVE = 3,
  SaveStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SaveStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SaveStatus_IsValid(int value);
constexpr SaveStatus SaveStatus_MIN = NO_SAVE_IN_PROGRESS;
constexpr SaveStatus SaveStatus_MAX = FEDERATE_WAITING_FOR_FEDERATION_TO_SAVE;
constexpr int SaveStatus_ARRAYSIZE = SaveStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SaveStatus_descriptor();
template<typename T>
inline const std::string& SaveStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SaveStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SaveStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SaveStatus_descriptor(), enum_t_value);
}
inline bool SaveStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SaveStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SaveStatus>(
    SaveStatus_descriptor(), name, value);
}
enum RestoreStatus : int {
  NO_RESTORE_IN_PROGRESS = 0,
  FEDERATE_RESTORE_REQUEST_PENDING = 1,
  FEDERATE_WAITING_FOR_RESTORE_TO_BEGIN = 2,
  FEDERATE_PREPARED_TO_RESTORE = 3,
  FEDERATE_RESTORING = 4,
  FEDERATE_WAITING_FOR_FEDERATION_TO_RESTORE = 5,
  RestoreStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RestoreStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RestoreStatus_IsValid(int value);
constexpr RestoreStatus RestoreStatus_MIN = NO_RESTORE_IN_PROGRESS;
constexpr RestoreStatus RestoreStatus_MAX = FEDERATE_WAITING_FOR_FEDERATION_TO_RESTORE;
constexpr int RestoreStatus_ARRAYSIZE = RestoreStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RestoreStatus_descriptor();
template<typename T>
inline const std::string& RestoreStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RestoreStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RestoreStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RestoreStatus_descriptor(), enum_t_value);
}
inline bool RestoreStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RestoreStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RestoreStatus>(
    RestoreStatus_descriptor(), name, value);
}
enum OrderType : int {
  RECEIVE = 0,
  TIMESTAMP = 1,
  OrderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  OrderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool OrderType_IsValid(int value);
constexpr OrderType OrderType_MIN = RECEIVE;
constexpr OrderType OrderType_MAX = TIMESTAMP;
constexpr int OrderType_ARRAYSIZE = OrderType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderType_descriptor();
template<typename T>
inline const std::string& OrderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderType_descriptor(), enum_t_value);
}
inline bool OrderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OrderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderType>(
    OrderType_descriptor(), name, value);
}
enum ServiceGroup : int {
  FEDERATION_MANAGEMENT = 0,
  DECLARATION_MANAGEMENT = 1,
  OBJECT_MANAGEMENT = 2,
  OWNERSHIP_MANAGEMENT = 3,
  TIME_MANAGEMENT = 4,
  DATA_DISTRIBUTION_MANAGEMENT = 5,
  SUPPORT_SERVICES = 6,
  ServiceGroup_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServiceGroup_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServiceGroup_IsValid(int value);
constexpr ServiceGroup ServiceGroup_MIN = FEDERATION_MANAGEMENT;
constexpr ServiceGroup ServiceGroup_MAX = SUPPORT_SERVICES;
constexpr int ServiceGroup_ARRAYSIZE = ServiceGroup_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceGroup_descriptor();
template<typename T>
inline const std::string& ServiceGroup_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceGroup>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceGroup_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceGroup_descriptor(), enum_t_value);
}
inline bool ServiceGroup_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceGroup* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceGroup>(
    ServiceGroup_descriptor(), name, value);
}
// ===================================================================

class ExceptionData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ExceptionData) */ {
 public:
  inline ExceptionData() : ExceptionData(nullptr) {}
  ~ExceptionData() override;
  explicit PROTOBUF_CONSTEXPR ExceptionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExceptionData(const ExceptionData& from);
  ExceptionData(ExceptionData&& from) noexcept
    : ExceptionData() {
    *this = ::std::move(from);
  }

  inline ExceptionData& operator=(const ExceptionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExceptionData& operator=(ExceptionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExceptionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExceptionData* internal_default_instance() {
    return reinterpret_cast<const ExceptionData*>(
               &_ExceptionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExceptionData& a, ExceptionData& b) {
    a.Swap(&b);
  }
  inline void Swap(ExceptionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExceptionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExceptionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExceptionData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExceptionData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExceptionData& from) {
    ExceptionData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExceptionData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ExceptionData";
  }
  protected:
  explicit ExceptionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExceptionNameFieldNumber = 1,
    kDetailsFieldNumber = 2,
  };
  // string exceptionName = 1;
  void clear_exceptionname();
  const std::string& exceptionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exceptionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exceptionname();
  PROTOBUF_NODISCARD std::string* release_exceptionname();
  void set_allocated_exceptionname(std::string* exceptionname);
  private:
  const std::string& _internal_exceptionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exceptionname(const std::string& value);
  std::string* _internal_mutable_exceptionname();
  public:

  // string details = 2;
  void clear_details();
  const std::string& details() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_details(ArgT0&& arg0, ArgT... args);
  std::string* mutable_details();
  PROTOBUF_NODISCARD std::string* release_details();
  void set_allocated_details(std::string* details);
  private:
  const std::string& _internal_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_details(const std::string& value);
  std::string* _internal_mutable_details();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ExceptionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exceptionname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr details_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class RtiConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.RtiConfiguration) */ {
 public:
  inline RtiConfiguration() : RtiConfiguration(nullptr) {}
  ~RtiConfiguration() override;
  explicit PROTOBUF_CONSTEXPR RtiConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtiConfiguration(const RtiConfiguration& from);
  RtiConfiguration(RtiConfiguration&& from) noexcept
    : RtiConfiguration() {
    *this = ::std::move(from);
  }

  inline RtiConfiguration& operator=(const RtiConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtiConfiguration& operator=(RtiConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtiConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtiConfiguration* internal_default_instance() {
    return reinterpret_cast<const RtiConfiguration*>(
               &_RtiConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RtiConfiguration& a, RtiConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(RtiConfiguration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtiConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtiConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtiConfiguration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtiConfiguration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RtiConfiguration& from) {
    RtiConfiguration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtiConfiguration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.RtiConfiguration";
  }
  protected:
  explicit RtiConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationNameFieldNumber = 1,
    kRtiAddressFieldNumber = 2,
    kAdditionalSettingsFieldNumber = 3,
  };
  // string configurationName = 1;
  void clear_configurationname();
  const std::string& configurationname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_configurationname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_configurationname();
  PROTOBUF_NODISCARD std::string* release_configurationname();
  void set_allocated_configurationname(std::string* configurationname);
  private:
  const std::string& _internal_configurationname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_configurationname(const std::string& value);
  std::string* _internal_mutable_configurationname();
  public:

  // string rtiAddress = 2;
  void clear_rtiaddress();
  const std::string& rtiaddress() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rtiaddress(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rtiaddress();
  PROTOBUF_NODISCARD std::string* release_rtiaddress();
  void set_allocated_rtiaddress(std::string* rtiaddress);
  private:
  const std::string& _internal_rtiaddress() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rtiaddress(const std::string& value);
  std::string* _internal_mutable_rtiaddress();
  public:

  // string additionalSettings = 3;
  void clear_additionalsettings();
  const std::string& additionalsettings() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_additionalsettings(ArgT0&& arg0, ArgT... args);
  std::string* mutable_additionalsettings();
  PROTOBUF_NODISCARD std::string* release_additionalsettings();
  void set_allocated_additionalsettings(std::string* additionalsettings);
  private:
  const std::string& _internal_additionalsettings() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_additionalsettings(const std::string& value);
  std::string* _internal_mutable_additionalsettings();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.RtiConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configurationname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rtiaddress_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr additionalsettings_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ConfigurationResult) */ {
 public:
  inline ConfigurationResult() : ConfigurationResult(nullptr) {}
  ~ConfigurationResult() override;
  explicit PROTOBUF_CONSTEXPR ConfigurationResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigurationResult(const ConfigurationResult& from);
  ConfigurationResult(ConfigurationResult&& from) noexcept
    : ConfigurationResult() {
    *this = ::std::move(from);
  }

  inline ConfigurationResult& operator=(const ConfigurationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationResult& operator=(ConfigurationResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigurationResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigurationResult* internal_default_instance() {
    return reinterpret_cast<const ConfigurationResult*>(
               &_ConfigurationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConfigurationResult& a, ConfigurationResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigurationResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigurationResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigurationResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigurationResult& from) {
    ConfigurationResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ConfigurationResult";
  }
  protected:
  explicit ConfigurationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 4,
    kConfigurationUsedFieldNumber = 1,
    kAddressUsedFieldNumber = 2,
    kAdditionalSettingsResultCodeFieldNumber = 3,
  };
  // string message = 4;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool configurationUsed = 1;
  void clear_configurationused();
  bool configurationused() const;
  void set_configurationused(bool value);
  private:
  bool _internal_configurationused() const;
  void _internal_set_configurationused(bool value);
  public:

  // bool addressUsed = 2;
  void clear_addressused();
  bool addressused() const;
  void set_addressused(bool value);
  private:
  bool _internal_addressused() const;
  void _internal_set_addressused(bool value);
  public:

  // .rti1516_2025.fedpro.AdditionalSettingsResultCode additionalSettingsResultCode = 3;
  void clear_additionalsettingsresultcode();
  ::rti1516_2025::fedpro::AdditionalSettingsResultCode additionalsettingsresultcode() const;
  void set_additionalsettingsresultcode(::rti1516_2025::fedpro::AdditionalSettingsResultCode value);
  private:
  ::rti1516_2025::fedpro::AdditionalSettingsResultCode _internal_additionalsettingsresultcode() const;
  void _internal_set_additionalsettingsresultcode(::rti1516_2025::fedpro::AdditionalSettingsResultCode value);
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ConfigurationResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool configurationused_;
    bool addressused_;
    int additionalsettingsresultcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class Credentials final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.Credentials) */ {
 public:
  inline Credentials() : Credentials(nullptr) {}
  ~Credentials() override;
  explicit PROTOBUF_CONSTEXPR Credentials(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Credentials(const Credentials& from);
  Credentials(Credentials&& from) noexcept
    : Credentials() {
    *this = ::std::move(from);
  }

  inline Credentials& operator=(const Credentials& from) {
    CopyFrom(from);
    return *this;
  }
  inline Credentials& operator=(Credentials&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Credentials& default_instance() {
    return *internal_default_instance();
  }
  static inline const Credentials* internal_default_instance() {
    return reinterpret_cast<const Credentials*>(
               &_Credentials_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Credentials& a, Credentials& b) {
    a.Swap(&b);
  }
  inline void Swap(Credentials* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Credentials* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Credentials* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Credentials>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Credentials& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Credentials& from) {
    Credentials::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Credentials* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.Credentials";
  }
  protected:
  explicit Credentials(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.Credentials)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class FederateRestoreStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederateRestoreStatus) */ {
 public:
  inline FederateRestoreStatus() : FederateRestoreStatus(nullptr) {}
  ~FederateRestoreStatus() override;
  explicit PROTOBUF_CONSTEXPR FederateRestoreStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederateRestoreStatus(const FederateRestoreStatus& from);
  FederateRestoreStatus(FederateRestoreStatus&& from) noexcept
    : FederateRestoreStatus() {
    *this = ::std::move(from);
  }

  inline FederateRestoreStatus& operator=(const FederateRestoreStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederateRestoreStatus& operator=(FederateRestoreStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederateRestoreStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederateRestoreStatus* internal_default_instance() {
    return reinterpret_cast<const FederateRestoreStatus*>(
               &_FederateRestoreStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FederateRestoreStatus& a, FederateRestoreStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(FederateRestoreStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederateRestoreStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederateRestoreStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederateRestoreStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FederateRestoreStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FederateRestoreStatus& from) {
    FederateRestoreStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederateRestoreStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederateRestoreStatus";
  }
  protected:
  explicit FederateRestoreStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreRestoreHandleFieldNumber = 1,
    kPostRestoreHandleFieldNumber = 2,
    kRestoreStatusFieldNumber = 3,
  };
  // .rti1516_2025.fedpro.FederateHandle preRestoreHandle = 1;
  bool has_prerestorehandle() const;
  private:
  bool _internal_has_prerestorehandle() const;
  public:
  void clear_prerestorehandle();
  const ::rti1516_2025::fedpro::FederateHandle& prerestorehandle() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandle* release_prerestorehandle();
  ::rti1516_2025::fedpro::FederateHandle* mutable_prerestorehandle();
  void set_allocated_prerestorehandle(::rti1516_2025::fedpro::FederateHandle* prerestorehandle);
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_prerestorehandle() const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_mutable_prerestorehandle();
  public:
  void unsafe_arena_set_allocated_prerestorehandle(
      ::rti1516_2025::fedpro::FederateHandle* prerestorehandle);
  ::rti1516_2025::fedpro::FederateHandle* unsafe_arena_release_prerestorehandle();

  // .rti1516_2025.fedpro.FederateHandle postRestoreHandle = 2;
  bool has_postrestorehandle() const;
  private:
  bool _internal_has_postrestorehandle() const;
  public:
  void clear_postrestorehandle();
  const ::rti1516_2025::fedpro::FederateHandle& postrestorehandle() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandle* release_postrestorehandle();
  ::rti1516_2025::fedpro::FederateHandle* mutable_postrestorehandle();
  void set_allocated_postrestorehandle(::rti1516_2025::fedpro::FederateHandle* postrestorehandle);
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_postrestorehandle() const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_mutable_postrestorehandle();
  public:
  void unsafe_arena_set_allocated_postrestorehandle(
      ::rti1516_2025::fedpro::FederateHandle* postrestorehandle);
  ::rti1516_2025::fedpro::FederateHandle* unsafe_arena_release_postrestorehandle();

  // .rti1516_2025.fedpro.RestoreStatus restoreStatus = 3;
  void clear_restorestatus();
  ::rti1516_2025::fedpro::RestoreStatus restorestatus() const;
  void set_restorestatus(::rti1516_2025::fedpro::RestoreStatus value);
  private:
  ::rti1516_2025::fedpro::RestoreStatus _internal_restorestatus() const;
  void _internal_set_restorestatus(::rti1516_2025::fedpro::RestoreStatus value);
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederateRestoreStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::FederateHandle* prerestorehandle_;
    ::rti1516_2025::fedpro::FederateHandle* postrestorehandle_;
    int restorestatus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class FederateRestoreStatusArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederateRestoreStatusArray) */ {
 public:
  inline FederateRestoreStatusArray() : FederateRestoreStatusArray(nullptr) {}
  ~FederateRestoreStatusArray() override;
  explicit PROTOBUF_CONSTEXPR FederateRestoreStatusArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederateRestoreStatusArray(const FederateRestoreStatusArray& from);
  FederateRestoreStatusArray(FederateRestoreStatusArray&& from) noexcept
    : FederateRestoreStatusArray() {
    *this = ::std::move(from);
  }

  inline FederateRestoreStatusArray& operator=(const FederateRestoreStatusArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederateRestoreStatusArray& operator=(FederateRestoreStatusArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederateRestoreStatusArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederateRestoreStatusArray* internal_default_instance() {
    return reinterpret_cast<const FederateRestoreStatusArray*>(
               &_FederateRestoreStatusArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FederateRestoreStatusArray& a, FederateRestoreStatusArray& b) {
    a.Swap(&b);
  }
  inline void Swap(FederateRestoreStatusArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederateRestoreStatusArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederateRestoreStatusArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederateRestoreStatusArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FederateRestoreStatusArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FederateRestoreStatusArray& from) {
    FederateRestoreStatusArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederateRestoreStatusArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederateRestoreStatusArray";
  }
  protected:
  explicit FederateRestoreStatusArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFederateRestoreStatusFieldNumber = 1,
  };
  // repeated .rti1516_2025.fedpro.FederateRestoreStatus federateRestoreStatus = 1;
  int federaterestorestatus_size() const;
  private:
  int _internal_federaterestorestatus_size() const;
  public:
  void clear_federaterestorestatus();
  ::rti1516_2025::fedpro::FederateRestoreStatus* mutable_federaterestorestatus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederateRestoreStatus >*
      mutable_federaterestorestatus();
  private:
  const ::rti1516_2025::fedpro::FederateRestoreStatus& _internal_federaterestorestatus(int index) const;
  ::rti1516_2025::fedpro::FederateRestoreStatus* _internal_add_federaterestorestatus();
  public:
  const ::rti1516_2025::fedpro::FederateRestoreStatus& federaterestorestatus(int index) const;
  ::rti1516_2025::fedpro::FederateRestoreStatus* add_federaterestorestatus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederateRestoreStatus >&
      federaterestorestatus() const;

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederateRestoreStatusArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederateRestoreStatus > federaterestorestatus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class FederationExecutionInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederationExecutionInformation) */ {
 public:
  inline FederationExecutionInformation() : FederationExecutionInformation(nullptr) {}
  ~FederationExecutionInformation() override;
  explicit PROTOBUF_CONSTEXPR FederationExecutionInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederationExecutionInformation(const FederationExecutionInformation& from);
  FederationExecutionInformation(FederationExecutionInformation&& from) noexcept
    : FederationExecutionInformation() {
    *this = ::std::move(from);
  }

  inline FederationExecutionInformation& operator=(const FederationExecutionInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederationExecutionInformation& operator=(FederationExecutionInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederationExecutionInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederationExecutionInformation* internal_default_instance() {
    return reinterpret_cast<const FederationExecutionInformation*>(
               &_FederationExecutionInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FederationExecutionInformation& a, FederationExecutionInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(FederationExecutionInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederationExecutionInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederationExecutionInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederationExecutionInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FederationExecutionInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FederationExecutionInformation& from) {
    FederationExecutionInformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederationExecutionInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederationExecutionInformation";
  }
  protected:
  explicit FederationExecutionInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFederationExecutionNameFieldNumber = 1,
    kLogicalTimeImplementationNameFieldNumber = 2,
  };
  // string federationExecutionName = 1;
  void clear_federationexecutionname();
  const std::string& federationexecutionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_federationexecutionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_federationexecutionname();
  PROTOBUF_NODISCARD std::string* release_federationexecutionname();
  void set_allocated_federationexecutionname(std::string* federationexecutionname);
  private:
  const std::string& _internal_federationexecutionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_federationexecutionname(const std::string& value);
  std::string* _internal_mutable_federationexecutionname();
  public:

  // string logicalTimeImplementationName = 2;
  void clear_logicaltimeimplementationname();
  const std::string& logicaltimeimplementationname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logicaltimeimplementationname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logicaltimeimplementationname();
  PROTOBUF_NODISCARD std::string* release_logicaltimeimplementationname();
  void set_allocated_logicaltimeimplementationname(std::string* logicaltimeimplementationname);
  private:
  const std::string& _internal_logicaltimeimplementationname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logicaltimeimplementationname(const std::string& value);
  std::string* _internal_mutable_logicaltimeimplementationname();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederationExecutionInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr federationexecutionname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logicaltimeimplementationname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class FederationExecutionInformationSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederationExecutionInformationSet) */ {
 public:
  inline FederationExecutionInformationSet() : FederationExecutionInformationSet(nullptr) {}
  ~FederationExecutionInformationSet() override;
  explicit PROTOBUF_CONSTEXPR FederationExecutionInformationSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederationExecutionInformationSet(const FederationExecutionInformationSet& from);
  FederationExecutionInformationSet(FederationExecutionInformationSet&& from) noexcept
    : FederationExecutionInformationSet() {
    *this = ::std::move(from);
  }

  inline FederationExecutionInformationSet& operator=(const FederationExecutionInformationSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederationExecutionInformationSet& operator=(FederationExecutionInformationSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederationExecutionInformationSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederationExecutionInformationSet* internal_default_instance() {
    return reinterpret_cast<const FederationExecutionInformationSet*>(
               &_FederationExecutionInformationSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FederationExecutionInformationSet& a, FederationExecutionInformationSet& b) {
    a.Swap(&b);
  }
  inline void Swap(FederationExecutionInformationSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederationExecutionInformationSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederationExecutionInformationSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederationExecutionInformationSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FederationExecutionInformationSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FederationExecutionInformationSet& from) {
    FederationExecutionInformationSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederationExecutionInformationSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederationExecutionInformationSet";
  }
  protected:
  explicit FederationExecutionInformationSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFederationExecutionInformationFieldNumber = 1,
  };
  // repeated .rti1516_2025.fedpro.FederationExecutionInformation federationExecutionInformation = 1;
  int federationexecutioninformation_size() const;
  private:
  int _internal_federationexecutioninformation_size() const;
  public:
  void clear_federationexecutioninformation();
  ::rti1516_2025::fedpro::FederationExecutionInformation* mutable_federationexecutioninformation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederationExecutionInformation >*
      mutable_federationexecutioninformation();
  private:
  const ::rti1516_2025::fedpro::FederationExecutionInformation& _internal_federationexecutioninformation(int index) const;
  ::rti1516_2025::fedpro::FederationExecutionInformation* _internal_add_federationexecutioninformation();
  public:
  const ::rti1516_2025::fedpro::FederationExecutionInformation& federationexecutioninformation(int index) const;
  ::rti1516_2025::fedpro::FederationExecutionInformation* add_federationexecutioninformation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederationExecutionInformation >&
      federationexecutioninformation() const;

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederationExecutionInformationSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederationExecutionInformation > federationexecutioninformation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class FederationExecutionMemberInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederationExecutionMemberInformation) */ {
 public:
  inline FederationExecutionMemberInformation() : FederationExecutionMemberInformation(nullptr) {}
  ~FederationExecutionMemberInformation() override;
  explicit PROTOBUF_CONSTEXPR FederationExecutionMemberInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederationExecutionMemberInformation(const FederationExecutionMemberInformation& from);
  FederationExecutionMemberInformation(FederationExecutionMemberInformation&& from) noexcept
    : FederationExecutionMemberInformation() {
    *this = ::std::move(from);
  }

  inline FederationExecutionMemberInformation& operator=(const FederationExecutionMemberInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederationExecutionMemberInformation& operator=(FederationExecutionMemberInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederationExecutionMemberInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederationExecutionMemberInformation* internal_default_instance() {
    return reinterpret_cast<const FederationExecutionMemberInformation*>(
               &_FederationExecutionMemberInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FederationExecutionMemberInformation& a, FederationExecutionMemberInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(FederationExecutionMemberInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederationExecutionMemberInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederationExecutionMemberInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederationExecutionMemberInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FederationExecutionMemberInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FederationExecutionMemberInformation& from) {
    FederationExecutionMemberInformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederationExecutionMemberInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederationExecutionMemberInformation";
  }
  protected:
  explicit FederationExecutionMemberInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFederateNameFieldNumber = 1,
    kFederateTypeFieldNumber = 2,
  };
  // string federateName = 1;
  void clear_federatename();
  const std::string& federatename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_federatename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_federatename();
  PROTOBUF_NODISCARD std::string* release_federatename();
  void set_allocated_federatename(std::string* federatename);
  private:
  const std::string& _internal_federatename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_federatename(const std::string& value);
  std::string* _internal_mutable_federatename();
  public:

  // string federateType = 2;
  void clear_federatetype();
  const std::string& federatetype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_federatetype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_federatetype();
  PROTOBUF_NODISCARD std::string* release_federatetype();
  void set_allocated_federatetype(std::string* federatetype);
  private:
  const std::string& _internal_federatetype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_federatetype(const std::string& value);
  std::string* _internal_mutable_federatetype();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederationExecutionMemberInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr federatename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr federatetype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class FederationExecutionMemberInformationSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederationExecutionMemberInformationSet) */ {
 public:
  inline FederationExecutionMemberInformationSet() : FederationExecutionMemberInformationSet(nullptr) {}
  ~FederationExecutionMemberInformationSet() override;
  explicit PROTOBUF_CONSTEXPR FederationExecutionMemberInformationSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederationExecutionMemberInformationSet(const FederationExecutionMemberInformationSet& from);
  FederationExecutionMemberInformationSet(FederationExecutionMemberInformationSet&& from) noexcept
    : FederationExecutionMemberInformationSet() {
    *this = ::std::move(from);
  }

  inline FederationExecutionMemberInformationSet& operator=(const FederationExecutionMemberInformationSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederationExecutionMemberInformationSet& operator=(FederationExecutionMemberInformationSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederationExecutionMemberInformationSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederationExecutionMemberInformationSet* internal_default_instance() {
    return reinterpret_cast<const FederationExecutionMemberInformationSet*>(
               &_FederationExecutionMemberInformationSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FederationExecutionMemberInformationSet& a, FederationExecutionMemberInformationSet& b) {
    a.Swap(&b);
  }
  inline void Swap(FederationExecutionMemberInformationSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederationExecutionMemberInformationSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederationExecutionMemberInformationSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederationExecutionMemberInformationSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FederationExecutionMemberInformationSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FederationExecutionMemberInformationSet& from) {
    FederationExecutionMemberInformationSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederationExecutionMemberInformationSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederationExecutionMemberInformationSet";
  }
  protected:
  explicit FederationExecutionMemberInformationSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFederationExecutionMemberInformationFieldNumber = 1,
  };
  // repeated .rti1516_2025.fedpro.FederationExecutionMemberInformation federationExecutionMemberInformation = 1;
  int federationexecutionmemberinformation_size() const;
  private:
  int _internal_federationexecutionmemberinformation_size() const;
  public:
  void clear_federationexecutionmemberinformation();
  ::rti1516_2025::fedpro::FederationExecutionMemberInformation* mutable_federationexecutionmemberinformation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederationExecutionMemberInformation >*
      mutable_federationexecutionmemberinformation();
  private:
  const ::rti1516_2025::fedpro::FederationExecutionMemberInformation& _internal_federationexecutionmemberinformation(int index) const;
  ::rti1516_2025::fedpro::FederationExecutionMemberInformation* _internal_add_federationexecutionmemberinformation();
  public:
  const ::rti1516_2025::fedpro::FederationExecutionMemberInformation& federationexecutionmemberinformation(int index) const;
  ::rti1516_2025::fedpro::FederationExecutionMemberInformation* add_federationexecutionmemberinformation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederationExecutionMemberInformation >&
      federationexecutionmemberinformation() const;

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederationExecutionMemberInformationSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederationExecutionMemberInformation > federationexecutionmemberinformation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class FederateHandle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederateHandle) */ {
 public:
  inline FederateHandle() : FederateHandle(nullptr) {}
  ~FederateHandle() override;
  explicit PROTOBUF_CONSTEXPR FederateHandle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederateHandle(const FederateHandle& from);
  FederateHandle(FederateHandle&& from) noexcept
    : FederateHandle() {
    *this = ::std::move(from);
  }

  inline FederateHandle& operator=(const FederateHandle& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederateHandle& operator=(FederateHandle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederateHandle& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederateHandle* internal_default_instance() {
    return reinterpret_cast<const FederateHandle*>(
               &_FederateHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FederateHandle& a, FederateHandle& b) {
    a.Swap(&b);
  }
  inline void Swap(FederateHandle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederateHandle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederateHandle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederateHandle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FederateHandle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FederateHandle& from) {
    FederateHandle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederateHandle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederateHandle";
  }
  protected:
  explicit FederateHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederateHandle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class FederateHandleSaveStatusPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederateHandleSaveStatusPair) */ {
 public:
  inline FederateHandleSaveStatusPair() : FederateHandleSaveStatusPair(nullptr) {}
  ~FederateHandleSaveStatusPair() override;
  explicit PROTOBUF_CONSTEXPR FederateHandleSaveStatusPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederateHandleSaveStatusPair(const FederateHandleSaveStatusPair& from);
  FederateHandleSaveStatusPair(FederateHandleSaveStatusPair&& from) noexcept
    : FederateHandleSaveStatusPair() {
    *this = ::std::move(from);
  }

  inline FederateHandleSaveStatusPair& operator=(const FederateHandleSaveStatusPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederateHandleSaveStatusPair& operator=(FederateHandleSaveStatusPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederateHandleSaveStatusPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederateHandleSaveStatusPair* internal_default_instance() {
    return reinterpret_cast<const FederateHandleSaveStatusPair*>(
               &_FederateHandleSaveStatusPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FederateHandleSaveStatusPair& a, FederateHandleSaveStatusPair& b) {
    a.Swap(&b);
  }
  inline void Swap(FederateHandleSaveStatusPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederateHandleSaveStatusPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederateHandleSaveStatusPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederateHandleSaveStatusPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FederateHandleSaveStatusPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FederateHandleSaveStatusPair& from) {
    FederateHandleSaveStatusPair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederateHandleSaveStatusPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederateHandleSaveStatusPair";
  }
  protected:
  explicit FederateHandleSaveStatusPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFederateHandleFieldNumber = 1,
    kSaveStatusFieldNumber = 2,
  };
  // .rti1516_2025.fedpro.FederateHandle federateHandle = 1;
  bool has_federatehandle() const;
  private:
  bool _internal_has_federatehandle() const;
  public:
  void clear_federatehandle();
  const ::rti1516_2025::fedpro::FederateHandle& federatehandle() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandle* release_federatehandle();
  ::rti1516_2025::fedpro::FederateHandle* mutable_federatehandle();
  void set_allocated_federatehandle(::rti1516_2025::fedpro::FederateHandle* federatehandle);
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_federatehandle() const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_mutable_federatehandle();
  public:
  void unsafe_arena_set_allocated_federatehandle(
      ::rti1516_2025::fedpro::FederateHandle* federatehandle);
  ::rti1516_2025::fedpro::FederateHandle* unsafe_arena_release_federatehandle();

  // .rti1516_2025.fedpro.SaveStatus saveStatus = 2;
  void clear_savestatus();
  ::rti1516_2025::fedpro::SaveStatus savestatus() const;
  void set_savestatus(::rti1516_2025::fedpro::SaveStatus value);
  private:
  ::rti1516_2025::fedpro::SaveStatus _internal_savestatus() const;
  void _internal_set_savestatus(::rti1516_2025::fedpro::SaveStatus value);
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederateHandleSaveStatusPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::FederateHandle* federatehandle_;
    int savestatus_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class FederateHandleSaveStatusPairArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederateHandleSaveStatusPairArray) */ {
 public:
  inline FederateHandleSaveStatusPairArray() : FederateHandleSaveStatusPairArray(nullptr) {}
  ~FederateHandleSaveStatusPairArray() override;
  explicit PROTOBUF_CONSTEXPR FederateHandleSaveStatusPairArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederateHandleSaveStatusPairArray(const FederateHandleSaveStatusPairArray& from);
  FederateHandleSaveStatusPairArray(FederateHandleSaveStatusPairArray&& from) noexcept
    : FederateHandleSaveStatusPairArray() {
    *this = ::std::move(from);
  }

  inline FederateHandleSaveStatusPairArray& operator=(const FederateHandleSaveStatusPairArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederateHandleSaveStatusPairArray& operator=(FederateHandleSaveStatusPairArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederateHandleSaveStatusPairArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederateHandleSaveStatusPairArray* internal_default_instance() {
    return reinterpret_cast<const FederateHandleSaveStatusPairArray*>(
               &_FederateHandleSaveStatusPairArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FederateHandleSaveStatusPairArray& a, FederateHandleSaveStatusPairArray& b) {
    a.Swap(&b);
  }
  inline void Swap(FederateHandleSaveStatusPairArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederateHandleSaveStatusPairArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederateHandleSaveStatusPairArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederateHandleSaveStatusPairArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FederateHandleSaveStatusPairArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FederateHandleSaveStatusPairArray& from) {
    FederateHandleSaveStatusPairArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederateHandleSaveStatusPairArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederateHandleSaveStatusPairArray";
  }
  protected:
  explicit FederateHandleSaveStatusPairArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFederateHandleSaveStatusPairFieldNumber = 1,
  };
  // repeated .rti1516_2025.fedpro.FederateHandleSaveStatusPair federateHandleSaveStatusPair = 1;
  int federatehandlesavestatuspair_size() const;
  private:
  int _internal_federatehandlesavestatuspair_size() const;
  public:
  void clear_federatehandlesavestatuspair();
  ::rti1516_2025::fedpro::FederateHandleSaveStatusPair* mutable_federatehandlesavestatuspair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederateHandleSaveStatusPair >*
      mutable_federatehandlesavestatuspair();
  private:
  const ::rti1516_2025::fedpro::FederateHandleSaveStatusPair& _internal_federatehandlesavestatuspair(int index) const;
  ::rti1516_2025::fedpro::FederateHandleSaveStatusPair* _internal_add_federatehandlesavestatuspair();
  public:
  const ::rti1516_2025::fedpro::FederateHandleSaveStatusPair& federatehandlesavestatuspair(int index) const;
  ::rti1516_2025::fedpro::FederateHandleSaveStatusPair* add_federatehandlesavestatuspair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederateHandleSaveStatusPair >&
      federatehandlesavestatuspair() const;

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederateHandleSaveStatusPairArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederateHandleSaveStatusPair > federatehandlesavestatuspair_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class ObjectClassHandle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ObjectClassHandle) */ {
 public:
  inline ObjectClassHandle() : ObjectClassHandle(nullptr) {}
  ~ObjectClassHandle() override;
  explicit PROTOBUF_CONSTEXPR ObjectClassHandle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectClassHandle(const ObjectClassHandle& from);
  ObjectClassHandle(ObjectClassHandle&& from) noexcept
    : ObjectClassHandle() {
    *this = ::std::move(from);
  }

  inline ObjectClassHandle& operator=(const ObjectClassHandle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectClassHandle& operator=(ObjectClassHandle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectClassHandle& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectClassHandle* internal_default_instance() {
    return reinterpret_cast<const ObjectClassHandle*>(
               &_ObjectClassHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ObjectClassHandle& a, ObjectClassHandle& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectClassHandle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectClassHandle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectClassHandle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectClassHandle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectClassHandle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectClassHandle& from) {
    ObjectClassHandle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectClassHandle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ObjectClassHandle";
  }
  protected:
  explicit ObjectClassHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ObjectClassHandle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class AttributeHandle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.AttributeHandle) */ {
 public:
  inline AttributeHandle() : AttributeHandle(nullptr) {}
  ~AttributeHandle() override;
  explicit PROTOBUF_CONSTEXPR AttributeHandle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeHandle(const AttributeHandle& from);
  AttributeHandle(AttributeHandle&& from) noexcept
    : AttributeHandle() {
    *this = ::std::move(from);
  }

  inline AttributeHandle& operator=(const AttributeHandle& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeHandle& operator=(AttributeHandle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeHandle& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeHandle* internal_default_instance() {
    return reinterpret_cast<const AttributeHandle*>(
               &_AttributeHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AttributeHandle& a, AttributeHandle& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeHandle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeHandle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeHandle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeHandle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttributeHandle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttributeHandle& from) {
    AttributeHandle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeHandle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.AttributeHandle";
  }
  protected:
  explicit AttributeHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.AttributeHandle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class InteractionClassHandle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.InteractionClassHandle) */ {
 public:
  inline InteractionClassHandle() : InteractionClassHandle(nullptr) {}
  ~InteractionClassHandle() override;
  explicit PROTOBUF_CONSTEXPR InteractionClassHandle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InteractionClassHandle(const InteractionClassHandle& from);
  InteractionClassHandle(InteractionClassHandle&& from) noexcept
    : InteractionClassHandle() {
    *this = ::std::move(from);
  }

  inline InteractionClassHandle& operator=(const InteractionClassHandle& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractionClassHandle& operator=(InteractionClassHandle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InteractionClassHandle& default_instance() {
    return *internal_default_instance();
  }
  static inline const InteractionClassHandle* internal_default_instance() {
    return reinterpret_cast<const InteractionClassHandle*>(
               &_InteractionClassHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(InteractionClassHandle& a, InteractionClassHandle& b) {
    a.Swap(&b);
  }
  inline void Swap(InteractionClassHandle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InteractionClassHandle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InteractionClassHandle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InteractionClassHandle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InteractionClassHandle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InteractionClassHandle& from) {
    InteractionClassHandle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InteractionClassHandle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.InteractionClassHandle";
  }
  protected:
  explicit InteractionClassHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.InteractionClassHandle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class ParameterHandle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ParameterHandle) */ {
 public:
  inline ParameterHandle() : ParameterHandle(nullptr) {}
  ~ParameterHandle() override;
  explicit PROTOBUF_CONSTEXPR ParameterHandle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParameterHandle(const ParameterHandle& from);
  ParameterHandle(ParameterHandle&& from) noexcept
    : ParameterHandle() {
    *this = ::std::move(from);
  }

  inline ParameterHandle& operator=(const ParameterHandle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterHandle& operator=(ParameterHandle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParameterHandle& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParameterHandle* internal_default_instance() {
    return reinterpret_cast<const ParameterHandle*>(
               &_ParameterHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ParameterHandle& a, ParameterHandle& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterHandle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterHandle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParameterHandle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParameterHandle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParameterHandle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ParameterHandle& from) {
    ParameterHandle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterHandle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ParameterHandle";
  }
  protected:
  explicit ParameterHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ParameterHandle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class ObjectInstanceHandle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ObjectInstanceHandle) */ {
 public:
  inline ObjectInstanceHandle() : ObjectInstanceHandle(nullptr) {}
  ~ObjectInstanceHandle() override;
  explicit PROTOBUF_CONSTEXPR ObjectInstanceHandle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInstanceHandle(const ObjectInstanceHandle& from);
  ObjectInstanceHandle(ObjectInstanceHandle&& from) noexcept
    : ObjectInstanceHandle() {
    *this = ::std::move(from);
  }

  inline ObjectInstanceHandle& operator=(const ObjectInstanceHandle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInstanceHandle& operator=(ObjectInstanceHandle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInstanceHandle& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInstanceHandle* internal_default_instance() {
    return reinterpret_cast<const ObjectInstanceHandle*>(
               &_ObjectInstanceHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ObjectInstanceHandle& a, ObjectInstanceHandle& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInstanceHandle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInstanceHandle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectInstanceHandle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectInstanceHandle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectInstanceHandle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectInstanceHandle& from) {
    ObjectInstanceHandle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInstanceHandle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ObjectInstanceHandle";
  }
  protected:
  explicit ObjectInstanceHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ObjectInstanceHandle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class AttributeHandleValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.AttributeHandleValue) */ {
 public:
  inline AttributeHandleValue() : AttributeHandleValue(nullptr) {}
  ~AttributeHandleValue() override;
  explicit PROTOBUF_CONSTEXPR AttributeHandleValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeHandleValue(const AttributeHandleValue& from);
  AttributeHandleValue(AttributeHandleValue&& from) noexcept
    : AttributeHandleValue() {
    *this = ::std::move(from);
  }

  inline AttributeHandleValue& operator=(const AttributeHandleValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeHandleValue& operator=(AttributeHandleValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeHandleValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeHandleValue* internal_default_instance() {
    return reinterpret_cast<const AttributeHandleValue*>(
               &_AttributeHandleValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(AttributeHandleValue& a, AttributeHandleValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeHandleValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeHandleValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeHandleValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeHandleValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttributeHandleValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttributeHandleValue& from) {
    AttributeHandleValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeHandleValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.AttributeHandleValue";
  }
  protected:
  explicit AttributeHandleValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kAttributeHandleFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .rti1516_2025.fedpro.AttributeHandle attributeHandle = 1;
  bool has_attributehandle() const;
  private:
  bool _internal_has_attributehandle() const;
  public:
  void clear_attributehandle();
  const ::rti1516_2025::fedpro::AttributeHandle& attributehandle() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandle* release_attributehandle();
  ::rti1516_2025::fedpro::AttributeHandle* mutable_attributehandle();
  void set_allocated_attributehandle(::rti1516_2025::fedpro::AttributeHandle* attributehandle);
  private:
  const ::rti1516_2025::fedpro::AttributeHandle& _internal_attributehandle() const;
  ::rti1516_2025::fedpro::AttributeHandle* _internal_mutable_attributehandle();
  public:
  void unsafe_arena_set_allocated_attributehandle(
      ::rti1516_2025::fedpro::AttributeHandle* attributehandle);
  ::rti1516_2025::fedpro::AttributeHandle* unsafe_arena_release_attributehandle();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.AttributeHandleValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::rti1516_2025::fedpro::AttributeHandle* attributehandle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class AttributeHandleValueMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.AttributeHandleValueMap) */ {
 public:
  inline AttributeHandleValueMap() : AttributeHandleValueMap(nullptr) {}
  ~AttributeHandleValueMap() override;
  explicit PROTOBUF_CONSTEXPR AttributeHandleValueMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeHandleValueMap(const AttributeHandleValueMap& from);
  AttributeHandleValueMap(AttributeHandleValueMap&& from) noexcept
    : AttributeHandleValueMap() {
    *this = ::std::move(from);
  }

  inline AttributeHandleValueMap& operator=(const AttributeHandleValueMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeHandleValueMap& operator=(AttributeHandleValueMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeHandleValueMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeHandleValueMap* internal_default_instance() {
    return reinterpret_cast<const AttributeHandleValueMap*>(
               &_AttributeHandleValueMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AttributeHandleValueMap& a, AttributeHandleValueMap& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeHandleValueMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeHandleValueMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeHandleValueMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeHandleValueMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttributeHandleValueMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttributeHandleValueMap& from) {
    AttributeHandleValueMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeHandleValueMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.AttributeHandleValueMap";
  }
  protected:
  explicit AttributeHandleValueMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeHandleValueFieldNumber = 1,
  };
  // repeated .rti1516_2025.fedpro.AttributeHandleValue attributeHandleValue = 1;
  int attributehandlevalue_size() const;
  private:
  int _internal_attributehandlevalue_size() const;
  public:
  void clear_attributehandlevalue();
  ::rti1516_2025::fedpro::AttributeHandleValue* mutable_attributehandlevalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::AttributeHandleValue >*
      mutable_attributehandlevalue();
  private:
  const ::rti1516_2025::fedpro::AttributeHandleValue& _internal_attributehandlevalue(int index) const;
  ::rti1516_2025::fedpro::AttributeHandleValue* _internal_add_attributehandlevalue();
  public:
  const ::rti1516_2025::fedpro::AttributeHandleValue& attributehandlevalue(int index) const;
  ::rti1516_2025::fedpro::AttributeHandleValue* add_attributehandlevalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::AttributeHandleValue >&
      attributehandlevalue() const;

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.AttributeHandleValueMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::AttributeHandleValue > attributehandlevalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class ParameterHandleValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ParameterHandleValue) */ {
 public:
  inline ParameterHandleValue() : ParameterHandleValue(nullptr) {}
  ~ParameterHandleValue() override;
  explicit PROTOBUF_CONSTEXPR ParameterHandleValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParameterHandleValue(const ParameterHandleValue& from);
  ParameterHandleValue(ParameterHandleValue&& from) noexcept
    : ParameterHandleValue() {
    *this = ::std::move(from);
  }

  inline ParameterHandleValue& operator=(const ParameterHandleValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterHandleValue& operator=(ParameterHandleValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParameterHandleValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParameterHandleValue* internal_default_instance() {
    return reinterpret_cast<const ParameterHandleValue*>(
               &_ParameterHandleValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ParameterHandleValue& a, ParameterHandleValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterHandleValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterHandleValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParameterHandleValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParameterHandleValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParameterHandleValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ParameterHandleValue& from) {
    ParameterHandleValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterHandleValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ParameterHandleValue";
  }
  protected:
  explicit ParameterHandleValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kParameterHandleFieldNumber = 1,
  };
  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .rti1516_2025.fedpro.ParameterHandle parameterHandle = 1;
  bool has_parameterhandle() const;
  private:
  bool _internal_has_parameterhandle() const;
  public:
  void clear_parameterhandle();
  const ::rti1516_2025::fedpro::ParameterHandle& parameterhandle() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ParameterHandle* release_parameterhandle();
  ::rti1516_2025::fedpro::ParameterHandle* mutable_parameterhandle();
  void set_allocated_parameterhandle(::rti1516_2025::fedpro::ParameterHandle* parameterhandle);
  private:
  const ::rti1516_2025::fedpro::ParameterHandle& _internal_parameterhandle() const;
  ::rti1516_2025::fedpro::ParameterHandle* _internal_mutable_parameterhandle();
  public:
  void unsafe_arena_set_allocated_parameterhandle(
      ::rti1516_2025::fedpro::ParameterHandle* parameterhandle);
  ::rti1516_2025::fedpro::ParameterHandle* unsafe_arena_release_parameterhandle();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ParameterHandleValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    ::rti1516_2025::fedpro::ParameterHandle* parameterhandle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class ParameterHandleValueMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ParameterHandleValueMap) */ {
 public:
  inline ParameterHandleValueMap() : ParameterHandleValueMap(nullptr) {}
  ~ParameterHandleValueMap() override;
  explicit PROTOBUF_CONSTEXPR ParameterHandleValueMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParameterHandleValueMap(const ParameterHandleValueMap& from);
  ParameterHandleValueMap(ParameterHandleValueMap&& from) noexcept
    : ParameterHandleValueMap() {
    *this = ::std::move(from);
  }

  inline ParameterHandleValueMap& operator=(const ParameterHandleValueMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParameterHandleValueMap& operator=(ParameterHandleValueMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParameterHandleValueMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParameterHandleValueMap* internal_default_instance() {
    return reinterpret_cast<const ParameterHandleValueMap*>(
               &_ParameterHandleValueMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ParameterHandleValueMap& a, ParameterHandleValueMap& b) {
    a.Swap(&b);
  }
  inline void Swap(ParameterHandleValueMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParameterHandleValueMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParameterHandleValueMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParameterHandleValueMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParameterHandleValueMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ParameterHandleValueMap& from) {
    ParameterHandleValueMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParameterHandleValueMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ParameterHandleValueMap";
  }
  protected:
  explicit ParameterHandleValueMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameterHandleValueFieldNumber = 1,
  };
  // repeated .rti1516_2025.fedpro.ParameterHandleValue parameterHandleValue = 1;
  int parameterhandlevalue_size() const;
  private:
  int _internal_parameterhandlevalue_size() const;
  public:
  void clear_parameterhandlevalue();
  ::rti1516_2025::fedpro::ParameterHandleValue* mutable_parameterhandlevalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::ParameterHandleValue >*
      mutable_parameterhandlevalue();
  private:
  const ::rti1516_2025::fedpro::ParameterHandleValue& _internal_parameterhandlevalue(int index) const;
  ::rti1516_2025::fedpro::ParameterHandleValue* _internal_add_parameterhandlevalue();
  public:
  const ::rti1516_2025::fedpro::ParameterHandleValue& parameterhandlevalue(int index) const;
  ::rti1516_2025::fedpro::ParameterHandleValue* add_parameterhandlevalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::ParameterHandleValue >&
      parameterhandlevalue() const;

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ParameterHandleValueMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::ParameterHandleValue > parameterhandlevalue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class MessageRetractionHandle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.MessageRetractionHandle) */ {
 public:
  inline MessageRetractionHandle() : MessageRetractionHandle(nullptr) {}
  ~MessageRetractionHandle() override;
  explicit PROTOBUF_CONSTEXPR MessageRetractionHandle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageRetractionHandle(const MessageRetractionHandle& from);
  MessageRetractionHandle(MessageRetractionHandle&& from) noexcept
    : MessageRetractionHandle() {
    *this = ::std::move(from);
  }

  inline MessageRetractionHandle& operator=(const MessageRetractionHandle& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageRetractionHandle& operator=(MessageRetractionHandle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageRetractionHandle& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageRetractionHandle* internal_default_instance() {
    return reinterpret_cast<const MessageRetractionHandle*>(
               &_MessageRetractionHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MessageRetractionHandle& a, MessageRetractionHandle& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageRetractionHandle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageRetractionHandle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageRetractionHandle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageRetractionHandle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageRetractionHandle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageRetractionHandle& from) {
    MessageRetractionHandle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageRetractionHandle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.MessageRetractionHandle";
  }
  protected:
  explicit MessageRetractionHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.MessageRetractionHandle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class MessageRetractionReturn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.MessageRetractionReturn) */ {
 public:
  inline MessageRetractionReturn() : MessageRetractionReturn(nullptr) {}
  ~MessageRetractionReturn() override;
  explicit PROTOBUF_CONSTEXPR MessageRetractionReturn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageRetractionReturn(const MessageRetractionReturn& from);
  MessageRetractionReturn(MessageRetractionReturn&& from) noexcept
    : MessageRetractionReturn() {
    *this = ::std::move(from);
  }

  inline MessageRetractionReturn& operator=(const MessageRetractionReturn& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageRetractionReturn& operator=(MessageRetractionReturn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageRetractionReturn& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageRetractionReturn* internal_default_instance() {
    return reinterpret_cast<const MessageRetractionReturn*>(
               &_MessageRetractionReturn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MessageRetractionReturn& a, MessageRetractionReturn& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageRetractionReturn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageRetractionReturn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageRetractionReturn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageRetractionReturn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageRetractionReturn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MessageRetractionReturn& from) {
    MessageRetractionReturn::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageRetractionReturn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.MessageRetractionReturn";
  }
  protected:
  explicit MessageRetractionReturn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageRetractionHandleFieldNumber = 2,
    kRetractionHandleIsValidFieldNumber = 1,
  };
  // .rti1516_2025.fedpro.MessageRetractionHandle messageRetractionHandle = 2;
  bool has_messageretractionhandle() const;
  private:
  bool _internal_has_messageretractionhandle() const;
  public:
  void clear_messageretractionhandle();
  const ::rti1516_2025::fedpro::MessageRetractionHandle& messageretractionhandle() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::MessageRetractionHandle* release_messageretractionhandle();
  ::rti1516_2025::fedpro::MessageRetractionHandle* mutable_messageretractionhandle();
  void set_allocated_messageretractionhandle(::rti1516_2025::fedpro::MessageRetractionHandle* messageretractionhandle);
  private:
  const ::rti1516_2025::fedpro::MessageRetractionHandle& _internal_messageretractionhandle() const;
  ::rti1516_2025::fedpro::MessageRetractionHandle* _internal_mutable_messageretractionhandle();
  public:
  void unsafe_arena_set_allocated_messageretractionhandle(
      ::rti1516_2025::fedpro::MessageRetractionHandle* messageretractionhandle);
  ::rti1516_2025::fedpro::MessageRetractionHandle* unsafe_arena_release_messageretractionhandle();

  // bool retractionHandleIsValid = 1;
  void clear_retractionhandleisvalid();
  bool retractionhandleisvalid() const;
  void set_retractionhandleisvalid(bool value);
  private:
  bool _internal_retractionhandleisvalid() const;
  void _internal_set_retractionhandleisvalid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.MessageRetractionReturn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::MessageRetractionHandle* messageretractionhandle_;
    bool retractionhandleisvalid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class LogicalTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.LogicalTime) */ {
 public:
  inline LogicalTime() : LogicalTime(nullptr) {}
  ~LogicalTime() override;
  explicit PROTOBUF_CONSTEXPR LogicalTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogicalTime(const LogicalTime& from);
  LogicalTime(LogicalTime&& from) noexcept
    : LogicalTime() {
    *this = ::std::move(from);
  }

  inline LogicalTime& operator=(const LogicalTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalTime& operator=(LogicalTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogicalTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogicalTime* internal_default_instance() {
    return reinterpret_cast<const LogicalTime*>(
               &_LogicalTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(LogicalTime& a, LogicalTime& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicalTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogicalTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogicalTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogicalTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogicalTime& from) {
    LogicalTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.LogicalTime";
  }
  protected:
  explicit LogicalTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.LogicalTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class LogicalTimeInterval final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.LogicalTimeInterval) */ {
 public:
  inline LogicalTimeInterval() : LogicalTimeInterval(nullptr) {}
  ~LogicalTimeInterval() override;
  explicit PROTOBUF_CONSTEXPR LogicalTimeInterval(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogicalTimeInterval(const LogicalTimeInterval& from);
  LogicalTimeInterval(LogicalTimeInterval&& from) noexcept
    : LogicalTimeInterval() {
    *this = ::std::move(from);
  }

  inline LogicalTimeInterval& operator=(const LogicalTimeInterval& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalTimeInterval& operator=(LogicalTimeInterval&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogicalTimeInterval& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogicalTimeInterval* internal_default_instance() {
    return reinterpret_cast<const LogicalTimeInterval*>(
               &_LogicalTimeInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(LogicalTimeInterval& a, LogicalTimeInterval& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalTimeInterval* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicalTimeInterval* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogicalTimeInterval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogicalTimeInterval>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogicalTimeInterval& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogicalTimeInterval& from) {
    LogicalTimeInterval::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalTimeInterval* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.LogicalTimeInterval";
  }
  protected:
  explicit LogicalTimeInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.LogicalTimeInterval)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class TransportationTypeHandle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.TransportationTypeHandle) */ {
 public:
  inline TransportationTypeHandle() : TransportationTypeHandle(nullptr) {}
  ~TransportationTypeHandle() override;
  explicit PROTOBUF_CONSTEXPR TransportationTypeHandle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportationTypeHandle(const TransportationTypeHandle& from);
  TransportationTypeHandle(TransportationTypeHandle&& from) noexcept
    : TransportationTypeHandle() {
    *this = ::std::move(from);
  }

  inline TransportationTypeHandle& operator=(const TransportationTypeHandle& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportationTypeHandle& operator=(TransportationTypeHandle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportationTypeHandle& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportationTypeHandle* internal_default_instance() {
    return reinterpret_cast<const TransportationTypeHandle*>(
               &_TransportationTypeHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(TransportationTypeHandle& a, TransportationTypeHandle& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportationTypeHandle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportationTypeHandle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportationTypeHandle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportationTypeHandle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportationTypeHandle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportationTypeHandle& from) {
    TransportationTypeHandle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportationTypeHandle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.TransportationTypeHandle";
  }
  protected:
  explicit TransportationTypeHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.TransportationTypeHandle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class DimensionHandle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.DimensionHandle) */ {
 public:
  inline DimensionHandle() : DimensionHandle(nullptr) {}
  ~DimensionHandle() override;
  explicit PROTOBUF_CONSTEXPR DimensionHandle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DimensionHandle(const DimensionHandle& from);
  DimensionHandle(DimensionHandle&& from) noexcept
    : DimensionHandle() {
    *this = ::std::move(from);
  }

  inline DimensionHandle& operator=(const DimensionHandle& from) {
    CopyFrom(from);
    return *this;
  }
  inline DimensionHandle& operator=(DimensionHandle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DimensionHandle& default_instance() {
    return *internal_default_instance();
  }
  static inline const DimensionHandle* internal_default_instance() {
    return reinterpret_cast<const DimensionHandle*>(
               &_DimensionHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(DimensionHandle& a, DimensionHandle& b) {
    a.Swap(&b);
  }
  inline void Swap(DimensionHandle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DimensionHandle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DimensionHandle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DimensionHandle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DimensionHandle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DimensionHandle& from) {
    DimensionHandle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DimensionHandle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.DimensionHandle";
  }
  protected:
  explicit DimensionHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.DimensionHandle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class RegionHandle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.RegionHandle) */ {
 public:
  inline RegionHandle() : RegionHandle(nullptr) {}
  ~RegionHandle() override;
  explicit PROTOBUF_CONSTEXPR RegionHandle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionHandle(const RegionHandle& from);
  RegionHandle(RegionHandle&& from) noexcept
    : RegionHandle() {
    *this = ::std::move(from);
  }

  inline RegionHandle& operator=(const RegionHandle& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionHandle& operator=(RegionHandle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionHandle& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionHandle* internal_default_instance() {
    return reinterpret_cast<const RegionHandle*>(
               &_RegionHandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(RegionHandle& a, RegionHandle& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionHandle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionHandle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegionHandle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegionHandle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegionHandle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegionHandle& from) {
    RegionHandle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionHandle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.RegionHandle";
  }
  protected:
  explicit RegionHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.RegionHandle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class TimeQueryReturn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.TimeQueryReturn) */ {
 public:
  inline TimeQueryReturn() : TimeQueryReturn(nullptr) {}
  ~TimeQueryReturn() override;
  explicit PROTOBUF_CONSTEXPR TimeQueryReturn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeQueryReturn(const TimeQueryReturn& from);
  TimeQueryReturn(TimeQueryReturn&& from) noexcept
    : TimeQueryReturn() {
    *this = ::std::move(from);
  }

  inline TimeQueryReturn& operator=(const TimeQueryReturn& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeQueryReturn& operator=(TimeQueryReturn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeQueryReturn& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeQueryReturn* internal_default_instance() {
    return reinterpret_cast<const TimeQueryReturn*>(
               &_TimeQueryReturn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(TimeQueryReturn& a, TimeQueryReturn& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeQueryReturn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeQueryReturn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeQueryReturn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeQueryReturn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeQueryReturn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeQueryReturn& from) {
    TimeQueryReturn::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeQueryReturn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.TimeQueryReturn";
  }
  protected:
  explicit TimeQueryReturn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalTimeFieldNumber = 2,
    kLogicalTimeIsValidFieldNumber = 1,
  };
  // .rti1516_2025.fedpro.LogicalTime logicalTime = 2;
  bool has_logicaltime() const;
  private:
  bool _internal_has_logicaltime() const;
  public:
  void clear_logicaltime();
  const ::rti1516_2025::fedpro::LogicalTime& logicaltime() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::LogicalTime* release_logicaltime();
  ::rti1516_2025::fedpro::LogicalTime* mutable_logicaltime();
  void set_allocated_logicaltime(::rti1516_2025::fedpro::LogicalTime* logicaltime);
  private:
  const ::rti1516_2025::fedpro::LogicalTime& _internal_logicaltime() const;
  ::rti1516_2025::fedpro::LogicalTime* _internal_mutable_logicaltime();
  public:
  void unsafe_arena_set_allocated_logicaltime(
      ::rti1516_2025::fedpro::LogicalTime* logicaltime);
  ::rti1516_2025::fedpro::LogicalTime* unsafe_arena_release_logicaltime();

  // bool logicalTimeIsValid = 1;
  void clear_logicaltimeisvalid();
  bool logicaltimeisvalid() const;
  void set_logicaltimeisvalid(bool value);
  private:
  bool _internal_logicaltimeisvalid() const;
  void _internal_set_logicaltimeisvalid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.TimeQueryReturn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::LogicalTime* logicaltime_;
    bool logicaltimeisvalid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class FederateHandleSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederateHandleSet) */ {
 public:
  inline FederateHandleSet() : FederateHandleSet(nullptr) {}
  ~FederateHandleSet() override;
  explicit PROTOBUF_CONSTEXPR FederateHandleSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederateHandleSet(const FederateHandleSet& from);
  FederateHandleSet(FederateHandleSet&& from) noexcept
    : FederateHandleSet() {
    *this = ::std::move(from);
  }

  inline FederateHandleSet& operator=(const FederateHandleSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederateHandleSet& operator=(FederateHandleSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederateHandleSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederateHandleSet* internal_default_instance() {
    return reinterpret_cast<const FederateHandleSet*>(
               &_FederateHandleSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(FederateHandleSet& a, FederateHandleSet& b) {
    a.Swap(&b);
  }
  inline void Swap(FederateHandleSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederateHandleSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederateHandleSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederateHandleSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FederateHandleSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FederateHandleSet& from) {
    FederateHandleSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederateHandleSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederateHandleSet";
  }
  protected:
  explicit FederateHandleSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFederateHandleFieldNumber = 1,
  };
  // repeated .rti1516_2025.fedpro.FederateHandle federateHandle = 1;
  int federatehandle_size() const;
  private:
  int _internal_federatehandle_size() const;
  public:
  void clear_federatehandle();
  ::rti1516_2025::fedpro::FederateHandle* mutable_federatehandle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederateHandle >*
      mutable_federatehandle();
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_federatehandle(int index) const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_add_federatehandle();
  public:
  const ::rti1516_2025::fedpro::FederateHandle& federatehandle(int index) const;
  ::rti1516_2025::fedpro::FederateHandle* add_federatehandle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederateHandle >&
      federatehandle() const;

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederateHandleSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederateHandle > federatehandle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class DimensionHandleSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.DimensionHandleSet) */ {
 public:
  inline DimensionHandleSet() : DimensionHandleSet(nullptr) {}
  ~DimensionHandleSet() override;
  explicit PROTOBUF_CONSTEXPR DimensionHandleSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DimensionHandleSet(const DimensionHandleSet& from);
  DimensionHandleSet(DimensionHandleSet&& from) noexcept
    : DimensionHandleSet() {
    *this = ::std::move(from);
  }

  inline DimensionHandleSet& operator=(const DimensionHandleSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DimensionHandleSet& operator=(DimensionHandleSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DimensionHandleSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const DimensionHandleSet* internal_default_instance() {
    return reinterpret_cast<const DimensionHandleSet*>(
               &_DimensionHandleSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(DimensionHandleSet& a, DimensionHandleSet& b) {
    a.Swap(&b);
  }
  inline void Swap(DimensionHandleSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DimensionHandleSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DimensionHandleSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DimensionHandleSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DimensionHandleSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DimensionHandleSet& from) {
    DimensionHandleSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DimensionHandleSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.DimensionHandleSet";
  }
  protected:
  explicit DimensionHandleSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionHandleFieldNumber = 1,
  };
  // repeated .rti1516_2025.fedpro.DimensionHandle dimensionHandle = 1;
  int dimensionhandle_size() const;
  private:
  int _internal_dimensionhandle_size() const;
  public:
  void clear_dimensionhandle();
  ::rti1516_2025::fedpro::DimensionHandle* mutable_dimensionhandle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::DimensionHandle >*
      mutable_dimensionhandle();
  private:
  const ::rti1516_2025::fedpro::DimensionHandle& _internal_dimensionhandle(int index) const;
  ::rti1516_2025::fedpro::DimensionHandle* _internal_add_dimensionhandle();
  public:
  const ::rti1516_2025::fedpro::DimensionHandle& dimensionhandle(int index) const;
  ::rti1516_2025::fedpro::DimensionHandle* add_dimensionhandle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::DimensionHandle >&
      dimensionhandle() const;

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.DimensionHandleSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::DimensionHandle > dimensionhandle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class RegionHandleSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.RegionHandleSet) */ {
 public:
  inline RegionHandleSet() : RegionHandleSet(nullptr) {}
  ~RegionHandleSet() override;
  explicit PROTOBUF_CONSTEXPR RegionHandleSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionHandleSet(const RegionHandleSet& from);
  RegionHandleSet(RegionHandleSet&& from) noexcept
    : RegionHandleSet() {
    *this = ::std::move(from);
  }

  inline RegionHandleSet& operator=(const RegionHandleSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionHandleSet& operator=(RegionHandleSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionHandleSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionHandleSet* internal_default_instance() {
    return reinterpret_cast<const RegionHandleSet*>(
               &_RegionHandleSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(RegionHandleSet& a, RegionHandleSet& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionHandleSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionHandleSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegionHandleSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegionHandleSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegionHandleSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegionHandleSet& from) {
    RegionHandleSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionHandleSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.RegionHandleSet";
  }
  protected:
  explicit RegionHandleSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionHandleFieldNumber = 1,
  };
  // repeated .rti1516_2025.fedpro.RegionHandle regionHandle = 1;
  int regionhandle_size() const;
  private:
  int _internal_regionhandle_size() const;
  public:
  void clear_regionhandle();
  ::rti1516_2025::fedpro::RegionHandle* mutable_regionhandle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::RegionHandle >*
      mutable_regionhandle();
  private:
  const ::rti1516_2025::fedpro::RegionHandle& _internal_regionhandle(int index) const;
  ::rti1516_2025::fedpro::RegionHandle* _internal_add_regionhandle();
  public:
  const ::rti1516_2025::fedpro::RegionHandle& regionhandle(int index) const;
  ::rti1516_2025::fedpro::RegionHandle* add_regionhandle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::RegionHandle >&
      regionhandle() const;

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.RegionHandleSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::RegionHandle > regionhandle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class AttributeHandleSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.AttributeHandleSet) */ {
 public:
  inline AttributeHandleSet() : AttributeHandleSet(nullptr) {}
  ~AttributeHandleSet() override;
  explicit PROTOBUF_CONSTEXPR AttributeHandleSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeHandleSet(const AttributeHandleSet& from);
  AttributeHandleSet(AttributeHandleSet&& from) noexcept
    : AttributeHandleSet() {
    *this = ::std::move(from);
  }

  inline AttributeHandleSet& operator=(const AttributeHandleSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeHandleSet& operator=(AttributeHandleSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeHandleSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeHandleSet* internal_default_instance() {
    return reinterpret_cast<const AttributeHandleSet*>(
               &_AttributeHandleSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(AttributeHandleSet& a, AttributeHandleSet& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeHandleSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeHandleSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeHandleSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeHandleSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttributeHandleSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttributeHandleSet& from) {
    AttributeHandleSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeHandleSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.AttributeHandleSet";
  }
  protected:
  explicit AttributeHandleSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeHandleFieldNumber = 1,
  };
  // repeated .rti1516_2025.fedpro.AttributeHandle attributeHandle = 1;
  int attributehandle_size() const;
  private:
  int _internal_attributehandle_size() const;
  public:
  void clear_attributehandle();
  ::rti1516_2025::fedpro::AttributeHandle* mutable_attributehandle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::AttributeHandle >*
      mutable_attributehandle();
  private:
  const ::rti1516_2025::fedpro::AttributeHandle& _internal_attributehandle(int index) const;
  ::rti1516_2025::fedpro::AttributeHandle* _internal_add_attributehandle();
  public:
  const ::rti1516_2025::fedpro::AttributeHandle& attributehandle(int index) const;
  ::rti1516_2025::fedpro::AttributeHandle* add_attributehandle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::AttributeHandle >&
      attributehandle() const;

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.AttributeHandleSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::AttributeHandle > attributehandle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class AttributeSetRegionSetPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.AttributeSetRegionSetPair) */ {
 public:
  inline AttributeSetRegionSetPair() : AttributeSetRegionSetPair(nullptr) {}
  ~AttributeSetRegionSetPair() override;
  explicit PROTOBUF_CONSTEXPR AttributeSetRegionSetPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeSetRegionSetPair(const AttributeSetRegionSetPair& from);
  AttributeSetRegionSetPair(AttributeSetRegionSetPair&& from) noexcept
    : AttributeSetRegionSetPair() {
    *this = ::std::move(from);
  }

  inline AttributeSetRegionSetPair& operator=(const AttributeSetRegionSetPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeSetRegionSetPair& operator=(AttributeSetRegionSetPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeSetRegionSetPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeSetRegionSetPair* internal_default_instance() {
    return reinterpret_cast<const AttributeSetRegionSetPair*>(
               &_AttributeSetRegionSetPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(AttributeSetRegionSetPair& a, AttributeSetRegionSetPair& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeSetRegionSetPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeSetRegionSetPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeSetRegionSetPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeSetRegionSetPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttributeSetRegionSetPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttributeSetRegionSetPair& from) {
    AttributeSetRegionSetPair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeSetRegionSetPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.AttributeSetRegionSetPair";
  }
  protected:
  explicit AttributeSetRegionSetPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeSetFieldNumber = 1,
    kRegionSetFieldNumber = 2,
  };
  // .rti1516_2025.fedpro.AttributeHandleSet attributeSet = 1;
  bool has_attributeset() const;
  private:
  bool _internal_has_attributeset() const;
  public:
  void clear_attributeset();
  const ::rti1516_2025::fedpro::AttributeHandleSet& attributeset() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleSet* release_attributeset();
  ::rti1516_2025::fedpro::AttributeHandleSet* mutable_attributeset();
  void set_allocated_attributeset(::rti1516_2025::fedpro::AttributeHandleSet* attributeset);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleSet& _internal_attributeset() const;
  ::rti1516_2025::fedpro::AttributeHandleSet* _internal_mutable_attributeset();
  public:
  void unsafe_arena_set_allocated_attributeset(
      ::rti1516_2025::fedpro::AttributeHandleSet* attributeset);
  ::rti1516_2025::fedpro::AttributeHandleSet* unsafe_arena_release_attributeset();

  // .rti1516_2025.fedpro.RegionHandleSet regionSet = 2;
  bool has_regionset() const;
  private:
  bool _internal_has_regionset() const;
  public:
  void clear_regionset();
  const ::rti1516_2025::fedpro::RegionHandleSet& regionset() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::RegionHandleSet* release_regionset();
  ::rti1516_2025::fedpro::RegionHandleSet* mutable_regionset();
  void set_allocated_regionset(::rti1516_2025::fedpro::RegionHandleSet* regionset);
  private:
  const ::rti1516_2025::fedpro::RegionHandleSet& _internal_regionset() const;
  ::rti1516_2025::fedpro::RegionHandleSet* _internal_mutable_regionset();
  public:
  void unsafe_arena_set_allocated_regionset(
      ::rti1516_2025::fedpro::RegionHandleSet* regionset);
  ::rti1516_2025::fedpro::RegionHandleSet* unsafe_arena_release_regionset();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.AttributeSetRegionSetPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::AttributeHandleSet* attributeset_;
    ::rti1516_2025::fedpro::RegionHandleSet* regionset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class AttributeSetRegionSetPairList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.AttributeSetRegionSetPairList) */ {
 public:
  inline AttributeSetRegionSetPairList() : AttributeSetRegionSetPairList(nullptr) {}
  ~AttributeSetRegionSetPairList() override;
  explicit PROTOBUF_CONSTEXPR AttributeSetRegionSetPairList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeSetRegionSetPairList(const AttributeSetRegionSetPairList& from);
  AttributeSetRegionSetPairList(AttributeSetRegionSetPairList&& from) noexcept
    : AttributeSetRegionSetPairList() {
    *this = ::std::move(from);
  }

  inline AttributeSetRegionSetPairList& operator=(const AttributeSetRegionSetPairList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeSetRegionSetPairList& operator=(AttributeSetRegionSetPairList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeSetRegionSetPairList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeSetRegionSetPairList* internal_default_instance() {
    return reinterpret_cast<const AttributeSetRegionSetPairList*>(
               &_AttributeSetRegionSetPairList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(AttributeSetRegionSetPairList& a, AttributeSetRegionSetPairList& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeSetRegionSetPairList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeSetRegionSetPairList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeSetRegionSetPairList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeSetRegionSetPairList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttributeSetRegionSetPairList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttributeSetRegionSetPairList& from) {
    AttributeSetRegionSetPairList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeSetRegionSetPairList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.AttributeSetRegionSetPairList";
  }
  protected:
  explicit AttributeSetRegionSetPairList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeSetRegionSetPairFieldNumber = 1,
  };
  // repeated .rti1516_2025.fedpro.AttributeSetRegionSetPair AttributeSetRegionSetPair = 1;
  int attributesetregionsetpair_size() const;
  private:
  int _internal_attributesetregionsetpair_size() const;
  public:
  void clear_attributesetregionsetpair();
  ::rti1516_2025::fedpro::AttributeSetRegionSetPair* mutable_attributesetregionsetpair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::AttributeSetRegionSetPair >*
      mutable_attributesetregionsetpair();
  private:
  const ::rti1516_2025::fedpro::AttributeSetRegionSetPair& _internal_attributesetregionsetpair(int index) const;
  ::rti1516_2025::fedpro::AttributeSetRegionSetPair* _internal_add_attributesetregionsetpair();
  public:
  const ::rti1516_2025::fedpro::AttributeSetRegionSetPair& attributesetregionsetpair(int index) const;
  ::rti1516_2025::fedpro::AttributeSetRegionSetPair* add_attributesetregionsetpair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::AttributeSetRegionSetPair >&
      attributesetregionsetpair() const;

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.AttributeSetRegionSetPairList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::AttributeSetRegionSetPair > attributesetregionsetpair_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class InteractionClassHandleSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.InteractionClassHandleSet) */ {
 public:
  inline InteractionClassHandleSet() : InteractionClassHandleSet(nullptr) {}
  ~InteractionClassHandleSet() override;
  explicit PROTOBUF_CONSTEXPR InteractionClassHandleSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InteractionClassHandleSet(const InteractionClassHandleSet& from);
  InteractionClassHandleSet(InteractionClassHandleSet&& from) noexcept
    : InteractionClassHandleSet() {
    *this = ::std::move(from);
  }

  inline InteractionClassHandleSet& operator=(const InteractionClassHandleSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractionClassHandleSet& operator=(InteractionClassHandleSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InteractionClassHandleSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const InteractionClassHandleSet* internal_default_instance() {
    return reinterpret_cast<const InteractionClassHandleSet*>(
               &_InteractionClassHandleSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(InteractionClassHandleSet& a, InteractionClassHandleSet& b) {
    a.Swap(&b);
  }
  inline void Swap(InteractionClassHandleSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InteractionClassHandleSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InteractionClassHandleSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InteractionClassHandleSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InteractionClassHandleSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InteractionClassHandleSet& from) {
    InteractionClassHandleSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InteractionClassHandleSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.InteractionClassHandleSet";
  }
  protected:
  explicit InteractionClassHandleSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInteractionClassHandleFieldNumber = 1,
  };
  // repeated .rti1516_2025.fedpro.InteractionClassHandle interactionClassHandle = 1;
  int interactionclasshandle_size() const;
  private:
  int _internal_interactionclasshandle_size() const;
  public:
  void clear_interactionclasshandle();
  ::rti1516_2025::fedpro::InteractionClassHandle* mutable_interactionclasshandle(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::InteractionClassHandle >*
      mutable_interactionclasshandle();
  private:
  const ::rti1516_2025::fedpro::InteractionClassHandle& _internal_interactionclasshandle(int index) const;
  ::rti1516_2025::fedpro::InteractionClassHandle* _internal_add_interactionclasshandle();
  public:
  const ::rti1516_2025::fedpro::InteractionClassHandle& interactionclasshandle(int index) const;
  ::rti1516_2025::fedpro::InteractionClassHandle* add_interactionclasshandle();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::InteractionClassHandle >&
      interactionclasshandle() const;

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.InteractionClassHandleSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::InteractionClassHandle > interactionclasshandle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class RangeBounds final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.RangeBounds) */ {
 public:
  inline RangeBounds() : RangeBounds(nullptr) {}
  ~RangeBounds() override;
  explicit PROTOBUF_CONSTEXPR RangeBounds(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RangeBounds(const RangeBounds& from);
  RangeBounds(RangeBounds&& from) noexcept
    : RangeBounds() {
    *this = ::std::move(from);
  }

  inline RangeBounds& operator=(const RangeBounds& from) {
    CopyFrom(from);
    return *this;
  }
  inline RangeBounds& operator=(RangeBounds&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RangeBounds& default_instance() {
    return *internal_default_instance();
  }
  static inline const RangeBounds* internal_default_instance() {
    return reinterpret_cast<const RangeBounds*>(
               &_RangeBounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(RangeBounds& a, RangeBounds& b) {
    a.Swap(&b);
  }
  inline void Swap(RangeBounds* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RangeBounds* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RangeBounds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RangeBounds>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RangeBounds& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RangeBounds& from) {
    RangeBounds::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RangeBounds* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.RangeBounds";
  }
  protected:
  explicit RangeBounds(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowerFieldNumber = 1,
    kUpperFieldNumber = 2,
  };
  // uint32 lower = 1;
  void clear_lower();
  uint32_t lower() const;
  void set_lower(uint32_t value);
  private:
  uint32_t _internal_lower() const;
  void _internal_set_lower(uint32_t value);
  public:

  // uint32 upper = 2;
  void clear_upper();
  uint32_t upper() const;
  void set_upper(uint32_t value);
  private:
  uint32_t _internal_upper() const;
  void _internal_set_upper(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.RangeBounds)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t lower_;
    uint32_t upper_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class DimensionAndRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.DimensionAndRange) */ {
 public:
  inline DimensionAndRange() : DimensionAndRange(nullptr) {}
  ~DimensionAndRange() override;
  explicit PROTOBUF_CONSTEXPR DimensionAndRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DimensionAndRange(const DimensionAndRange& from);
  DimensionAndRange(DimensionAndRange&& from) noexcept
    : DimensionAndRange() {
    *this = ::std::move(from);
  }

  inline DimensionAndRange& operator=(const DimensionAndRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline DimensionAndRange& operator=(DimensionAndRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DimensionAndRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const DimensionAndRange* internal_default_instance() {
    return reinterpret_cast<const DimensionAndRange*>(
               &_DimensionAndRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(DimensionAndRange& a, DimensionAndRange& b) {
    a.Swap(&b);
  }
  inline void Swap(DimensionAndRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DimensionAndRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DimensionAndRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DimensionAndRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DimensionAndRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DimensionAndRange& from) {
    DimensionAndRange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DimensionAndRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.DimensionAndRange";
  }
  protected:
  explicit DimensionAndRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionHandleFieldNumber = 1,
    kRangeBoundsFieldNumber = 2,
  };
  // .rti1516_2025.fedpro.DimensionHandle dimensionHandle = 1;
  bool has_dimensionhandle() const;
  private:
  bool _internal_has_dimensionhandle() const;
  public:
  void clear_dimensionhandle();
  const ::rti1516_2025::fedpro::DimensionHandle& dimensionhandle() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::DimensionHandle* release_dimensionhandle();
  ::rti1516_2025::fedpro::DimensionHandle* mutable_dimensionhandle();
  void set_allocated_dimensionhandle(::rti1516_2025::fedpro::DimensionHandle* dimensionhandle);
  private:
  const ::rti1516_2025::fedpro::DimensionHandle& _internal_dimensionhandle() const;
  ::rti1516_2025::fedpro::DimensionHandle* _internal_mutable_dimensionhandle();
  public:
  void unsafe_arena_set_allocated_dimensionhandle(
      ::rti1516_2025::fedpro::DimensionHandle* dimensionhandle);
  ::rti1516_2025::fedpro::DimensionHandle* unsafe_arena_release_dimensionhandle();

  // .rti1516_2025.fedpro.RangeBounds rangeBounds = 2;
  bool has_rangebounds() const;
  private:
  bool _internal_has_rangebounds() const;
  public:
  void clear_rangebounds();
  const ::rti1516_2025::fedpro::RangeBounds& rangebounds() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::RangeBounds* release_rangebounds();
  ::rti1516_2025::fedpro::RangeBounds* mutable_rangebounds();
  void set_allocated_rangebounds(::rti1516_2025::fedpro::RangeBounds* rangebounds);
  private:
  const ::rti1516_2025::fedpro::RangeBounds& _internal_rangebounds() const;
  ::rti1516_2025::fedpro::RangeBounds* _internal_mutable_rangebounds();
  public:
  void unsafe_arena_set_allocated_rangebounds(
      ::rti1516_2025::fedpro::RangeBounds* rangebounds);
  ::rti1516_2025::fedpro::RangeBounds* unsafe_arena_release_rangebounds();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.DimensionAndRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::DimensionHandle* dimensionhandle_;
    ::rti1516_2025::fedpro::RangeBounds* rangebounds_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class ConveyedRegion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ConveyedRegion) */ {
 public:
  inline ConveyedRegion() : ConveyedRegion(nullptr) {}
  ~ConveyedRegion() override;
  explicit PROTOBUF_CONSTEXPR ConveyedRegion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConveyedRegion(const ConveyedRegion& from);
  ConveyedRegion(ConveyedRegion&& from) noexcept
    : ConveyedRegion() {
    *this = ::std::move(from);
  }

  inline ConveyedRegion& operator=(const ConveyedRegion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConveyedRegion& operator=(ConveyedRegion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConveyedRegion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConveyedRegion* internal_default_instance() {
    return reinterpret_cast<const ConveyedRegion*>(
               &_ConveyedRegion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ConveyedRegion& a, ConveyedRegion& b) {
    a.Swap(&b);
  }
  inline void Swap(ConveyedRegion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConveyedRegion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConveyedRegion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConveyedRegion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConveyedRegion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConveyedRegion& from) {
    ConveyedRegion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConveyedRegion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ConveyedRegion";
  }
  protected:
  explicit ConveyedRegion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionAndRangeFieldNumber = 1,
  };
  // repeated .rti1516_2025.fedpro.DimensionAndRange dimensionAndRange = 1;
  int dimensionandrange_size() const;
  private:
  int _internal_dimensionandrange_size() const;
  public:
  void clear_dimensionandrange();
  ::rti1516_2025::fedpro::DimensionAndRange* mutable_dimensionandrange(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::DimensionAndRange >*
      mutable_dimensionandrange();
  private:
  const ::rti1516_2025::fedpro::DimensionAndRange& _internal_dimensionandrange(int index) const;
  ::rti1516_2025::fedpro::DimensionAndRange* _internal_add_dimensionandrange();
  public:
  const ::rti1516_2025::fedpro::DimensionAndRange& dimensionandrange(int index) const;
  ::rti1516_2025::fedpro::DimensionAndRange* add_dimensionandrange();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::DimensionAndRange >&
      dimensionandrange() const;

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ConveyedRegion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::DimensionAndRange > dimensionandrange_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class ConveyedRegionSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ConveyedRegionSet) */ {
 public:
  inline ConveyedRegionSet() : ConveyedRegionSet(nullptr) {}
  ~ConveyedRegionSet() override;
  explicit PROTOBUF_CONSTEXPR ConveyedRegionSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConveyedRegionSet(const ConveyedRegionSet& from);
  ConveyedRegionSet(ConveyedRegionSet&& from) noexcept
    : ConveyedRegionSet() {
    *this = ::std::move(from);
  }

  inline ConveyedRegionSet& operator=(const ConveyedRegionSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConveyedRegionSet& operator=(ConveyedRegionSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConveyedRegionSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConveyedRegionSet* internal_default_instance() {
    return reinterpret_cast<const ConveyedRegionSet*>(
               &_ConveyedRegionSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ConveyedRegionSet& a, ConveyedRegionSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ConveyedRegionSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConveyedRegionSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConveyedRegionSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConveyedRegionSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConveyedRegionSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConveyedRegionSet& from) {
    ConveyedRegionSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConveyedRegionSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ConveyedRegionSet";
  }
  protected:
  explicit ConveyedRegionSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConveyedRegionsFieldNumber = 1,
  };
  // repeated .rti1516_2025.fedpro.ConveyedRegion conveyedRegions = 1;
  int conveyedregions_size() const;
  private:
  int _internal_conveyedregions_size() const;
  public:
  void clear_conveyedregions();
  ::rti1516_2025::fedpro::ConveyedRegion* mutable_conveyedregions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::ConveyedRegion >*
      mutable_conveyedregions();
  private:
  const ::rti1516_2025::fedpro::ConveyedRegion& _internal_conveyedregions(int index) const;
  ::rti1516_2025::fedpro::ConveyedRegion* _internal_add_conveyedregions();
  public:
  const ::rti1516_2025::fedpro::ConveyedRegion& conveyedregions(int index) const;
  ::rti1516_2025::fedpro::ConveyedRegion* add_conveyedregions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::ConveyedRegion >&
      conveyedregions() const;

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ConveyedRegionSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::ConveyedRegion > conveyedregions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class SupplementalReflectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.SupplementalReflectInfo) */ {
 public:
  inline SupplementalReflectInfo() : SupplementalReflectInfo(nullptr) {}
  ~SupplementalReflectInfo() override;
  explicit PROTOBUF_CONSTEXPR SupplementalReflectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SupplementalReflectInfo(const SupplementalReflectInfo& from);
  SupplementalReflectInfo(SupplementalReflectInfo&& from) noexcept
    : SupplementalReflectInfo() {
    *this = ::std::move(from);
  }

  inline SupplementalReflectInfo& operator=(const SupplementalReflectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SupplementalReflectInfo& operator=(SupplementalReflectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SupplementalReflectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SupplementalReflectInfo* internal_default_instance() {
    return reinterpret_cast<const SupplementalReflectInfo*>(
               &_SupplementalReflectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(SupplementalReflectInfo& a, SupplementalReflectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SupplementalReflectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SupplementalReflectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SupplementalReflectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SupplementalReflectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SupplementalReflectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SupplementalReflectInfo& from) {
    SupplementalReflectInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SupplementalReflectInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.SupplementalReflectInfo";
  }
  protected:
  explicit SupplementalReflectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProducingFederateFieldNumber = 1,
    kConveyedRegionsFieldNumber = 3,
    kConveyedRegionsIsValidFieldNumber = 2,
  };
  // .rti1516_2025.fedpro.FederateHandle producingFederate = 1;
  bool has_producingfederate() const;
  private:
  bool _internal_has_producingfederate() const;
  public:
  void clear_producingfederate();
  const ::rti1516_2025::fedpro::FederateHandle& producingfederate() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandle* release_producingfederate();
  ::rti1516_2025::fedpro::FederateHandle* mutable_producingfederate();
  void set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate);
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_producingfederate() const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_mutable_producingfederate();
  public:
  void unsafe_arena_set_allocated_producingfederate(
      ::rti1516_2025::fedpro::FederateHandle* producingfederate);
  ::rti1516_2025::fedpro::FederateHandle* unsafe_arena_release_producingfederate();

  // .rti1516_2025.fedpro.ConveyedRegionSet conveyedRegions = 3;
  bool has_conveyedregions() const;
  private:
  bool _internal_has_conveyedregions() const;
  public:
  void clear_conveyedregions();
  const ::rti1516_2025::fedpro::ConveyedRegionSet& conveyedregions() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ConveyedRegionSet* release_conveyedregions();
  ::rti1516_2025::fedpro::ConveyedRegionSet* mutable_conveyedregions();
  void set_allocated_conveyedregions(::rti1516_2025::fedpro::ConveyedRegionSet* conveyedregions);
  private:
  const ::rti1516_2025::fedpro::ConveyedRegionSet& _internal_conveyedregions() const;
  ::rti1516_2025::fedpro::ConveyedRegionSet* _internal_mutable_conveyedregions();
  public:
  void unsafe_arena_set_allocated_conveyedregions(
      ::rti1516_2025::fedpro::ConveyedRegionSet* conveyedregions);
  ::rti1516_2025::fedpro::ConveyedRegionSet* unsafe_arena_release_conveyedregions();

  // bool conveyedRegionsIsValid = 2;
  void clear_conveyedregionsisvalid();
  bool conveyedregionsisvalid() const;
  void set_conveyedregionsisvalid(bool value);
  private:
  bool _internal_conveyedregionsisvalid() const;
  void _internal_set_conveyedregionsisvalid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.SupplementalReflectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::FederateHandle* producingfederate_;
    ::rti1516_2025::fedpro::ConveyedRegionSet* conveyedregions_;
    bool conveyedregionsisvalid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class SupplementalReceiveInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.SupplementalReceiveInfo) */ {
 public:
  inline SupplementalReceiveInfo() : SupplementalReceiveInfo(nullptr) {}
  ~SupplementalReceiveInfo() override;
  explicit PROTOBUF_CONSTEXPR SupplementalReceiveInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SupplementalReceiveInfo(const SupplementalReceiveInfo& from);
  SupplementalReceiveInfo(SupplementalReceiveInfo&& from) noexcept
    : SupplementalReceiveInfo() {
    *this = ::std::move(from);
  }

  inline SupplementalReceiveInfo& operator=(const SupplementalReceiveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SupplementalReceiveInfo& operator=(SupplementalReceiveInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SupplementalReceiveInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SupplementalReceiveInfo* internal_default_instance() {
    return reinterpret_cast<const SupplementalReceiveInfo*>(
               &_SupplementalReceiveInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(SupplementalReceiveInfo& a, SupplementalReceiveInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SupplementalReceiveInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SupplementalReceiveInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SupplementalReceiveInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SupplementalReceiveInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SupplementalReceiveInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SupplementalReceiveInfo& from) {
    SupplementalReceiveInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SupplementalReceiveInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.SupplementalReceiveInfo";
  }
  protected:
  explicit SupplementalReceiveInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProducingFederateFieldNumber = 1,
    kConveyedRegionsFieldNumber = 3,
    kConveyedRegionsIsValidFieldNumber = 2,
  };
  // .rti1516_2025.fedpro.FederateHandle producingFederate = 1;
  bool has_producingfederate() const;
  private:
  bool _internal_has_producingfederate() const;
  public:
  void clear_producingfederate();
  const ::rti1516_2025::fedpro::FederateHandle& producingfederate() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandle* release_producingfederate();
  ::rti1516_2025::fedpro::FederateHandle* mutable_producingfederate();
  void set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate);
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_producingfederate() const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_mutable_producingfederate();
  public:
  void unsafe_arena_set_allocated_producingfederate(
      ::rti1516_2025::fedpro::FederateHandle* producingfederate);
  ::rti1516_2025::fedpro::FederateHandle* unsafe_arena_release_producingfederate();

  // .rti1516_2025.fedpro.ConveyedRegionSet conveyedRegions = 3;
  bool has_conveyedregions() const;
  private:
  bool _internal_has_conveyedregions() const;
  public:
  void clear_conveyedregions();
  const ::rti1516_2025::fedpro::ConveyedRegionSet& conveyedregions() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ConveyedRegionSet* release_conveyedregions();
  ::rti1516_2025::fedpro::ConveyedRegionSet* mutable_conveyedregions();
  void set_allocated_conveyedregions(::rti1516_2025::fedpro::ConveyedRegionSet* conveyedregions);
  private:
  const ::rti1516_2025::fedpro::ConveyedRegionSet& _internal_conveyedregions() const;
  ::rti1516_2025::fedpro::ConveyedRegionSet* _internal_mutable_conveyedregions();
  public:
  void unsafe_arena_set_allocated_conveyedregions(
      ::rti1516_2025::fedpro::ConveyedRegionSet* conveyedregions);
  ::rti1516_2025::fedpro::ConveyedRegionSet* unsafe_arena_release_conveyedregions();

  // bool conveyedRegionsIsValid = 2;
  void clear_conveyedregionsisvalid();
  bool conveyedregionsisvalid() const;
  void set_conveyedregionsisvalid(bool value);
  private:
  bool _internal_conveyedregionsisvalid() const;
  void _internal_set_conveyedregionsisvalid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.SupplementalReceiveInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::FederateHandle* producingfederate_;
    ::rti1516_2025::fedpro::ConveyedRegionSet* conveyedregions_;
    bool conveyedregionsisvalid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class FomModule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FomModule) */ {
 public:
  inline FomModule() : FomModule(nullptr) {}
  ~FomModule() override;
  explicit PROTOBUF_CONSTEXPR FomModule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FomModule(const FomModule& from);
  FomModule(FomModule&& from) noexcept
    : FomModule() {
    *this = ::std::move(from);
  }

  inline FomModule& operator=(const FomModule& from) {
    CopyFrom(from);
    return *this;
  }
  inline FomModule& operator=(FomModule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FomModule& default_instance() {
    return *internal_default_instance();
  }
  enum FomModuleCase {
    kFile = 1,
    kCompressedModule = 2,
    kUrl = 3,
    FOMMODULE_NOT_SET = 0,
  };

  static inline const FomModule* internal_default_instance() {
    return reinterpret_cast<const FomModule*>(
               &_FomModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(FomModule& a, FomModule& b) {
    a.Swap(&b);
  }
  inline void Swap(FomModule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FomModule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FomModule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FomModule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FomModule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FomModule& from) {
    FomModule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FomModule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FomModule";
  }
  protected:
  explicit FomModule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 1,
    kCompressedModuleFieldNumber = 2,
    kUrlFieldNumber = 3,
  };
  // .rti1516_2025.fedpro.FileFomModule file = 1;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::rti1516_2025::fedpro::FileFomModule& file() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FileFomModule* release_file();
  ::rti1516_2025::fedpro::FileFomModule* mutable_file();
  void set_allocated_file(::rti1516_2025::fedpro::FileFomModule* file);
  private:
  const ::rti1516_2025::fedpro::FileFomModule& _internal_file() const;
  ::rti1516_2025::fedpro::FileFomModule* _internal_mutable_file();
  public:
  void unsafe_arena_set_allocated_file(
      ::rti1516_2025::fedpro::FileFomModule* file);
  ::rti1516_2025::fedpro::FileFomModule* unsafe_arena_release_file();

  // bytes compressedModule = 2;
  bool has_compressedmodule() const;
  private:
  bool _internal_has_compressedmodule() const;
  public:
  void clear_compressedmodule();
  const std::string& compressedmodule() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_compressedmodule(ArgT0&& arg0, ArgT... args);
  std::string* mutable_compressedmodule();
  PROTOBUF_NODISCARD std::string* release_compressedmodule();
  void set_allocated_compressedmodule(std::string* compressedmodule);
  private:
  const std::string& _internal_compressedmodule() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compressedmodule(const std::string& value);
  std::string* _internal_mutable_compressedmodule();
  public:

  // string url = 3;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  void clear_fomModule();
  FomModuleCase fomModule_case() const;
  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FomModule)
 private:
  class _Internal;
  void set_has_file();
  void set_has_compressedmodule();
  void set_has_url();

  inline bool has_fomModule() const;
  inline void clear_has_fomModule();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union FomModuleUnion {
      constexpr FomModuleUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::rti1516_2025::fedpro::FileFomModule* file_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compressedmodule_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    } fomModule_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class FileFomModule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FileFomModule) */ {
 public:
  inline FileFomModule() : FileFomModule(nullptr) {}
  ~FileFomModule() override;
  explicit PROTOBUF_CONSTEXPR FileFomModule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileFomModule(const FileFomModule& from);
  FileFomModule(FileFomModule&& from) noexcept
    : FileFomModule() {
    *this = ::std::move(from);
  }

  inline FileFomModule& operator=(const FileFomModule& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileFomModule& operator=(FileFomModule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileFomModule& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileFomModule* internal_default_instance() {
    return reinterpret_cast<const FileFomModule*>(
               &_FileFomModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(FileFomModule& a, FileFomModule& b) {
    a.Swap(&b);
  }
  inline void Swap(FileFomModule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileFomModule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileFomModule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileFomModule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileFomModule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileFomModule& from) {
    FileFomModule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileFomModule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FileFomModule";
  }
  protected:
  explicit FileFomModule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FileFomModule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class FomModuleSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FomModuleSet) */ {
 public:
  inline FomModuleSet() : FomModuleSet(nullptr) {}
  ~FomModuleSet() override;
  explicit PROTOBUF_CONSTEXPR FomModuleSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FomModuleSet(const FomModuleSet& from);
  FomModuleSet(FomModuleSet&& from) noexcept
    : FomModuleSet() {
    *this = ::std::move(from);
  }

  inline FomModuleSet& operator=(const FomModuleSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FomModuleSet& operator=(FomModuleSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FomModuleSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const FomModuleSet* internal_default_instance() {
    return reinterpret_cast<const FomModuleSet*>(
               &_FomModuleSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(FomModuleSet& a, FomModuleSet& b) {
    a.Swap(&b);
  }
  inline void Swap(FomModuleSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FomModuleSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FomModuleSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FomModuleSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FomModuleSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FomModuleSet& from) {
    FomModuleSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FomModuleSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FomModuleSet";
  }
  protected:
  explicit FomModuleSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFomModuleFieldNumber = 1,
  };
  // repeated .rti1516_2025.fedpro.FomModule fomModule = 1;
  int fommodule_size() const;
  private:
  int _internal_fommodule_size() const;
  public:
  void clear_fommodule();
  ::rti1516_2025::fedpro::FomModule* mutable_fommodule(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FomModule >*
      mutable_fommodule();
  private:
  const ::rti1516_2025::fedpro::FomModule& _internal_fommodule(int index) const;
  ::rti1516_2025::fedpro::FomModule* _internal_add_fommodule();
  public:
  const ::rti1516_2025::fedpro::FomModule& fommodule(int index) const;
  ::rti1516_2025::fedpro::FomModule* add_fommodule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FomModule >&
      fommodule() const;

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FomModuleSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FomModule > fommodule_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// -------------------------------------------------------------------

class JoinResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.JoinResult) */ {
 public:
  inline JoinResult() : JoinResult(nullptr) {}
  ~JoinResult() override;
  explicit PROTOBUF_CONSTEXPR JoinResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinResult(const JoinResult& from);
  JoinResult(JoinResult&& from) noexcept
    : JoinResult() {
    *this = ::std::move(from);
  }

  inline JoinResult& operator=(const JoinResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinResult& operator=(JoinResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinResult* internal_default_instance() {
    return reinterpret_cast<const JoinResult*>(
               &_JoinResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(JoinResult& a, JoinResult& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinResult& from) {
    JoinResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.JoinResult";
  }
  protected:
  explicit JoinResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalTimeImplementationNameFieldNumber = 2,
    kFederateHandleFieldNumber = 1,
  };
  // string logicalTimeImplementationName = 2;
  void clear_logicaltimeimplementationname();
  const std::string& logicaltimeimplementationname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_logicaltimeimplementationname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_logicaltimeimplementationname();
  PROTOBUF_NODISCARD std::string* release_logicaltimeimplementationname();
  void set_allocated_logicaltimeimplementationname(std::string* logicaltimeimplementationname);
  private:
  const std::string& _internal_logicaltimeimplementationname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logicaltimeimplementationname(const std::string& value);
  std::string* _internal_mutable_logicaltimeimplementationname();
  public:

  // .rti1516_2025.fedpro.FederateHandle federateHandle = 1;
  bool has_federatehandle() const;
  private:
  bool _internal_has_federatehandle() const;
  public:
  void clear_federatehandle();
  const ::rti1516_2025::fedpro::FederateHandle& federatehandle() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandle* release_federatehandle();
  ::rti1516_2025::fedpro::FederateHandle* mutable_federatehandle();
  void set_allocated_federatehandle(::rti1516_2025::fedpro::FederateHandle* federatehandle);
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_federatehandle() const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_mutable_federatehandle();
  public:
  void unsafe_arena_set_allocated_federatehandle(
      ::rti1516_2025::fedpro::FederateHandle* federatehandle);
  ::rti1516_2025::fedpro::FederateHandle* unsafe_arena_release_federatehandle();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.JoinResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logicaltimeimplementationname_;
    ::rti1516_2025::fedpro::FederateHandle* federatehandle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datatypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExceptionData

// string exceptionName = 1;
inline void ExceptionData::clear_exceptionname() {
  _impl_.exceptionname_.ClearToEmpty();
}
inline const std::string& ExceptionData::exceptionname() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ExceptionData.exceptionName)
  return _internal_exceptionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExceptionData::set_exceptionname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.exceptionname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ExceptionData.exceptionName)
}
inline std::string* ExceptionData::mutable_exceptionname() {
  std::string* _s = _internal_mutable_exceptionname();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ExceptionData.exceptionName)
  return _s;
}
inline const std::string& ExceptionData::_internal_exceptionname() const {
  return _impl_.exceptionname_.Get();
}
inline void ExceptionData::_internal_set_exceptionname(const std::string& value) {
  
  _impl_.exceptionname_.Set(value, GetArenaForAllocation());
}
inline std::string* ExceptionData::_internal_mutable_exceptionname() {
  
  return _impl_.exceptionname_.Mutable(GetArenaForAllocation());
}
inline std::string* ExceptionData::release_exceptionname() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ExceptionData.exceptionName)
  return _impl_.exceptionname_.Release();
}
inline void ExceptionData::set_allocated_exceptionname(std::string* exceptionname) {
  if (exceptionname != nullptr) {
    
  } else {
    
  }
  _impl_.exceptionname_.SetAllocated(exceptionname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.exceptionname_.IsDefault()) {
    _impl_.exceptionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ExceptionData.exceptionName)
}

// string details = 2;
inline void ExceptionData::clear_details() {
  _impl_.details_.ClearToEmpty();
}
inline const std::string& ExceptionData::details() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ExceptionData.details)
  return _internal_details();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExceptionData::set_details(ArgT0&& arg0, ArgT... args) {
 
 _impl_.details_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ExceptionData.details)
}
inline std::string* ExceptionData::mutable_details() {
  std::string* _s = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ExceptionData.details)
  return _s;
}
inline const std::string& ExceptionData::_internal_details() const {
  return _impl_.details_.Get();
}
inline void ExceptionData::_internal_set_details(const std::string& value) {
  
  _impl_.details_.Set(value, GetArenaForAllocation());
}
inline std::string* ExceptionData::_internal_mutable_details() {
  
  return _impl_.details_.Mutable(GetArenaForAllocation());
}
inline std::string* ExceptionData::release_details() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ExceptionData.details)
  return _impl_.details_.Release();
}
inline void ExceptionData::set_allocated_details(std::string* details) {
  if (details != nullptr) {
    
  } else {
    
  }
  _impl_.details_.SetAllocated(details, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.details_.IsDefault()) {
    _impl_.details_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ExceptionData.details)
}

// -------------------------------------------------------------------

// RtiConfiguration

// string configurationName = 1;
inline void RtiConfiguration::clear_configurationname() {
  _impl_.configurationname_.ClearToEmpty();
}
inline const std::string& RtiConfiguration::configurationname() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RtiConfiguration.configurationName)
  return _internal_configurationname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtiConfiguration::set_configurationname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.configurationname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.RtiConfiguration.configurationName)
}
inline std::string* RtiConfiguration::mutable_configurationname() {
  std::string* _s = _internal_mutable_configurationname();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RtiConfiguration.configurationName)
  return _s;
}
inline const std::string& RtiConfiguration::_internal_configurationname() const {
  return _impl_.configurationname_.Get();
}
inline void RtiConfiguration::_internal_set_configurationname(const std::string& value) {
  
  _impl_.configurationname_.Set(value, GetArenaForAllocation());
}
inline std::string* RtiConfiguration::_internal_mutable_configurationname() {
  
  return _impl_.configurationname_.Mutable(GetArenaForAllocation());
}
inline std::string* RtiConfiguration::release_configurationname() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RtiConfiguration.configurationName)
  return _impl_.configurationname_.Release();
}
inline void RtiConfiguration::set_allocated_configurationname(std::string* configurationname) {
  if (configurationname != nullptr) {
    
  } else {
    
  }
  _impl_.configurationname_.SetAllocated(configurationname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.configurationname_.IsDefault()) {
    _impl_.configurationname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RtiConfiguration.configurationName)
}

// string rtiAddress = 2;
inline void RtiConfiguration::clear_rtiaddress() {
  _impl_.rtiaddress_.ClearToEmpty();
}
inline const std::string& RtiConfiguration::rtiaddress() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RtiConfiguration.rtiAddress)
  return _internal_rtiaddress();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtiConfiguration::set_rtiaddress(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rtiaddress_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.RtiConfiguration.rtiAddress)
}
inline std::string* RtiConfiguration::mutable_rtiaddress() {
  std::string* _s = _internal_mutable_rtiaddress();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RtiConfiguration.rtiAddress)
  return _s;
}
inline const std::string& RtiConfiguration::_internal_rtiaddress() const {
  return _impl_.rtiaddress_.Get();
}
inline void RtiConfiguration::_internal_set_rtiaddress(const std::string& value) {
  
  _impl_.rtiaddress_.Set(value, GetArenaForAllocation());
}
inline std::string* RtiConfiguration::_internal_mutable_rtiaddress() {
  
  return _impl_.rtiaddress_.Mutable(GetArenaForAllocation());
}
inline std::string* RtiConfiguration::release_rtiaddress() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RtiConfiguration.rtiAddress)
  return _impl_.rtiaddress_.Release();
}
inline void RtiConfiguration::set_allocated_rtiaddress(std::string* rtiaddress) {
  if (rtiaddress != nullptr) {
    
  } else {
    
  }
  _impl_.rtiaddress_.SetAllocated(rtiaddress, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rtiaddress_.IsDefault()) {
    _impl_.rtiaddress_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RtiConfiguration.rtiAddress)
}

// string additionalSettings = 3;
inline void RtiConfiguration::clear_additionalsettings() {
  _impl_.additionalsettings_.ClearToEmpty();
}
inline const std::string& RtiConfiguration::additionalsettings() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RtiConfiguration.additionalSettings)
  return _internal_additionalsettings();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtiConfiguration::set_additionalsettings(ArgT0&& arg0, ArgT... args) {
 
 _impl_.additionalsettings_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.RtiConfiguration.additionalSettings)
}
inline std::string* RtiConfiguration::mutable_additionalsettings() {
  std::string* _s = _internal_mutable_additionalsettings();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RtiConfiguration.additionalSettings)
  return _s;
}
inline const std::string& RtiConfiguration::_internal_additionalsettings() const {
  return _impl_.additionalsettings_.Get();
}
inline void RtiConfiguration::_internal_set_additionalsettings(const std::string& value) {
  
  _impl_.additionalsettings_.Set(value, GetArenaForAllocation());
}
inline std::string* RtiConfiguration::_internal_mutable_additionalsettings() {
  
  return _impl_.additionalsettings_.Mutable(GetArenaForAllocation());
}
inline std::string* RtiConfiguration::release_additionalsettings() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RtiConfiguration.additionalSettings)
  return _impl_.additionalsettings_.Release();
}
inline void RtiConfiguration::set_allocated_additionalsettings(std::string* additionalsettings) {
  if (additionalsettings != nullptr) {
    
  } else {
    
  }
  _impl_.additionalsettings_.SetAllocated(additionalsettings, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.additionalsettings_.IsDefault()) {
    _impl_.additionalsettings_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RtiConfiguration.additionalSettings)
}

// -------------------------------------------------------------------

// ConfigurationResult

// bool configurationUsed = 1;
inline void ConfigurationResult::clear_configurationused() {
  _impl_.configurationused_ = false;
}
inline bool ConfigurationResult::_internal_configurationused() const {
  return _impl_.configurationused_;
}
inline bool ConfigurationResult::configurationused() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ConfigurationResult.configurationUsed)
  return _internal_configurationused();
}
inline void ConfigurationResult::_internal_set_configurationused(bool value) {
  
  _impl_.configurationused_ = value;
}
inline void ConfigurationResult::set_configurationused(bool value) {
  _internal_set_configurationused(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ConfigurationResult.configurationUsed)
}

// bool addressUsed = 2;
inline void ConfigurationResult::clear_addressused() {
  _impl_.addressused_ = false;
}
inline bool ConfigurationResult::_internal_addressused() const {
  return _impl_.addressused_;
}
inline bool ConfigurationResult::addressused() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ConfigurationResult.addressUsed)
  return _internal_addressused();
}
inline void ConfigurationResult::_internal_set_addressused(bool value) {
  
  _impl_.addressused_ = value;
}
inline void ConfigurationResult::set_addressused(bool value) {
  _internal_set_addressused(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ConfigurationResult.addressUsed)
}

// .rti1516_2025.fedpro.AdditionalSettingsResultCode additionalSettingsResultCode = 3;
inline void ConfigurationResult::clear_additionalsettingsresultcode() {
  _impl_.additionalsettingsresultcode_ = 0;
}
inline ::rti1516_2025::fedpro::AdditionalSettingsResultCode ConfigurationResult::_internal_additionalsettingsresultcode() const {
  return static_cast< ::rti1516_2025::fedpro::AdditionalSettingsResultCode >(_impl_.additionalsettingsresultcode_);
}
inline ::rti1516_2025::fedpro::AdditionalSettingsResultCode ConfigurationResult::additionalsettingsresultcode() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ConfigurationResult.additionalSettingsResultCode)
  return _internal_additionalsettingsresultcode();
}
inline void ConfigurationResult::_internal_set_additionalsettingsresultcode(::rti1516_2025::fedpro::AdditionalSettingsResultCode value) {
  
  _impl_.additionalsettingsresultcode_ = value;
}
inline void ConfigurationResult::set_additionalsettingsresultcode(::rti1516_2025::fedpro::AdditionalSettingsResultCode value) {
  _internal_set_additionalsettingsresultcode(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ConfigurationResult.additionalSettingsResultCode)
}

// string message = 4;
inline void ConfigurationResult::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ConfigurationResult::message() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ConfigurationResult.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigurationResult::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ConfigurationResult.message)
}
inline std::string* ConfigurationResult::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ConfigurationResult.message)
  return _s;
}
inline const std::string& ConfigurationResult::_internal_message() const {
  return _impl_.message_.Get();
}
inline void ConfigurationResult::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfigurationResult::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfigurationResult::release_message() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ConfigurationResult.message)
  return _impl_.message_.Release();
}
inline void ConfigurationResult::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ConfigurationResult.message)
}

// -------------------------------------------------------------------

// Credentials

// string type = 1;
inline void Credentials::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Credentials::type() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.Credentials.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Credentials::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.Credentials.type)
}
inline std::string* Credentials::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.Credentials.type)
  return _s;
}
inline const std::string& Credentials::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Credentials::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Credentials::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Credentials::release_type() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.Credentials.type)
  return _impl_.type_.Release();
}
inline void Credentials::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.Credentials.type)
}

// bytes data = 2;
inline void Credentials::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Credentials::data() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.Credentials.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Credentials::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.Credentials.data)
}
inline std::string* Credentials::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.Credentials.data)
  return _s;
}
inline const std::string& Credentials::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Credentials::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Credentials::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Credentials::release_data() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.Credentials.data)
  return _impl_.data_.Release();
}
inline void Credentials::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.Credentials.data)
}

// -------------------------------------------------------------------

// FederateRestoreStatus

// .rti1516_2025.fedpro.FederateHandle preRestoreHandle = 1;
inline bool FederateRestoreStatus::_internal_has_prerestorehandle() const {
  return this != internal_default_instance() && _impl_.prerestorehandle_ != nullptr;
}
inline bool FederateRestoreStatus::has_prerestorehandle() const {
  return _internal_has_prerestorehandle();
}
inline void FederateRestoreStatus::clear_prerestorehandle() {
  if (GetArenaForAllocation() == nullptr && _impl_.prerestorehandle_ != nullptr) {
    delete _impl_.prerestorehandle_;
  }
  _impl_.prerestorehandle_ = nullptr;
}
inline const ::rti1516_2025::fedpro::FederateHandle& FederateRestoreStatus::_internal_prerestorehandle() const {
  const ::rti1516_2025::fedpro::FederateHandle* p = _impl_.prerestorehandle_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandle&>(
      ::rti1516_2025::fedpro::_FederateHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandle& FederateRestoreStatus::prerestorehandle() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederateRestoreStatus.preRestoreHandle)
  return _internal_prerestorehandle();
}
inline void FederateRestoreStatus::unsafe_arena_set_allocated_prerestorehandle(
    ::rti1516_2025::fedpro::FederateHandle* prerestorehandle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prerestorehandle_);
  }
  _impl_.prerestorehandle_ = prerestorehandle;
  if (prerestorehandle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.FederateRestoreStatus.preRestoreHandle)
}
inline ::rti1516_2025::fedpro::FederateHandle* FederateRestoreStatus::release_prerestorehandle() {
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.prerestorehandle_;
  _impl_.prerestorehandle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* FederateRestoreStatus::unsafe_arena_release_prerestorehandle() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FederateRestoreStatus.preRestoreHandle)
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.prerestorehandle_;
  _impl_.prerestorehandle_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* FederateRestoreStatus::_internal_mutable_prerestorehandle() {
  
  if (_impl_.prerestorehandle_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(GetArenaForAllocation());
    _impl_.prerestorehandle_ = p;
  }
  return _impl_.prerestorehandle_;
}
inline ::rti1516_2025::fedpro::FederateHandle* FederateRestoreStatus::mutable_prerestorehandle() {
  ::rti1516_2025::fedpro::FederateHandle* _msg = _internal_mutable_prerestorehandle();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FederateRestoreStatus.preRestoreHandle)
  return _msg;
}
inline void FederateRestoreStatus::set_allocated_prerestorehandle(::rti1516_2025::fedpro::FederateHandle* prerestorehandle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.prerestorehandle_;
  }
  if (prerestorehandle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prerestorehandle);
    if (message_arena != submessage_arena) {
      prerestorehandle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prerestorehandle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.prerestorehandle_ = prerestorehandle;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FederateRestoreStatus.preRestoreHandle)
}

// .rti1516_2025.fedpro.FederateHandle postRestoreHandle = 2;
inline bool FederateRestoreStatus::_internal_has_postrestorehandle() const {
  return this != internal_default_instance() && _impl_.postrestorehandle_ != nullptr;
}
inline bool FederateRestoreStatus::has_postrestorehandle() const {
  return _internal_has_postrestorehandle();
}
inline void FederateRestoreStatus::clear_postrestorehandle() {
  if (GetArenaForAllocation() == nullptr && _impl_.postrestorehandle_ != nullptr) {
    delete _impl_.postrestorehandle_;
  }
  _impl_.postrestorehandle_ = nullptr;
}
inline const ::rti1516_2025::fedpro::FederateHandle& FederateRestoreStatus::_internal_postrestorehandle() const {
  const ::rti1516_2025::fedpro::FederateHandle* p = _impl_.postrestorehandle_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandle&>(
      ::rti1516_2025::fedpro::_FederateHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandle& FederateRestoreStatus::postrestorehandle() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederateRestoreStatus.postRestoreHandle)
  return _internal_postrestorehandle();
}
inline void FederateRestoreStatus::unsafe_arena_set_allocated_postrestorehandle(
    ::rti1516_2025::fedpro::FederateHandle* postrestorehandle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.postrestorehandle_);
  }
  _impl_.postrestorehandle_ = postrestorehandle;
  if (postrestorehandle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.FederateRestoreStatus.postRestoreHandle)
}
inline ::rti1516_2025::fedpro::FederateHandle* FederateRestoreStatus::release_postrestorehandle() {
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.postrestorehandle_;
  _impl_.postrestorehandle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* FederateRestoreStatus::unsafe_arena_release_postrestorehandle() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FederateRestoreStatus.postRestoreHandle)
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.postrestorehandle_;
  _impl_.postrestorehandle_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* FederateRestoreStatus::_internal_mutable_postrestorehandle() {
  
  if (_impl_.postrestorehandle_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(GetArenaForAllocation());
    _impl_.postrestorehandle_ = p;
  }
  return _impl_.postrestorehandle_;
}
inline ::rti1516_2025::fedpro::FederateHandle* FederateRestoreStatus::mutable_postrestorehandle() {
  ::rti1516_2025::fedpro::FederateHandle* _msg = _internal_mutable_postrestorehandle();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FederateRestoreStatus.postRestoreHandle)
  return _msg;
}
inline void FederateRestoreStatus::set_allocated_postrestorehandle(::rti1516_2025::fedpro::FederateHandle* postrestorehandle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.postrestorehandle_;
  }
  if (postrestorehandle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(postrestorehandle);
    if (message_arena != submessage_arena) {
      postrestorehandle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, postrestorehandle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.postrestorehandle_ = postrestorehandle;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FederateRestoreStatus.postRestoreHandle)
}

// .rti1516_2025.fedpro.RestoreStatus restoreStatus = 3;
inline void FederateRestoreStatus::clear_restorestatus() {
  _impl_.restorestatus_ = 0;
}
inline ::rti1516_2025::fedpro::RestoreStatus FederateRestoreStatus::_internal_restorestatus() const {
  return static_cast< ::rti1516_2025::fedpro::RestoreStatus >(_impl_.restorestatus_);
}
inline ::rti1516_2025::fedpro::RestoreStatus FederateRestoreStatus::restorestatus() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederateRestoreStatus.restoreStatus)
  return _internal_restorestatus();
}
inline void FederateRestoreStatus::_internal_set_restorestatus(::rti1516_2025::fedpro::RestoreStatus value) {
  
  _impl_.restorestatus_ = value;
}
inline void FederateRestoreStatus::set_restorestatus(::rti1516_2025::fedpro::RestoreStatus value) {
  _internal_set_restorestatus(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.FederateRestoreStatus.restoreStatus)
}

// -------------------------------------------------------------------

// FederateRestoreStatusArray

// repeated .rti1516_2025.fedpro.FederateRestoreStatus federateRestoreStatus = 1;
inline int FederateRestoreStatusArray::_internal_federaterestorestatus_size() const {
  return _impl_.federaterestorestatus_.size();
}
inline int FederateRestoreStatusArray::federaterestorestatus_size() const {
  return _internal_federaterestorestatus_size();
}
inline void FederateRestoreStatusArray::clear_federaterestorestatus() {
  _impl_.federaterestorestatus_.Clear();
}
inline ::rti1516_2025::fedpro::FederateRestoreStatus* FederateRestoreStatusArray::mutable_federaterestorestatus(int index) {
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FederateRestoreStatusArray.federateRestoreStatus)
  return _impl_.federaterestorestatus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederateRestoreStatus >*
FederateRestoreStatusArray::mutable_federaterestorestatus() {
  // @@protoc_insertion_point(field_mutable_list:rti1516_2025.fedpro.FederateRestoreStatusArray.federateRestoreStatus)
  return &_impl_.federaterestorestatus_;
}
inline const ::rti1516_2025::fedpro::FederateRestoreStatus& FederateRestoreStatusArray::_internal_federaterestorestatus(int index) const {
  return _impl_.federaterestorestatus_.Get(index);
}
inline const ::rti1516_2025::fedpro::FederateRestoreStatus& FederateRestoreStatusArray::federaterestorestatus(int index) const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederateRestoreStatusArray.federateRestoreStatus)
  return _internal_federaterestorestatus(index);
}
inline ::rti1516_2025::fedpro::FederateRestoreStatus* FederateRestoreStatusArray::_internal_add_federaterestorestatus() {
  return _impl_.federaterestorestatus_.Add();
}
inline ::rti1516_2025::fedpro::FederateRestoreStatus* FederateRestoreStatusArray::add_federaterestorestatus() {
  ::rti1516_2025::fedpro::FederateRestoreStatus* _add = _internal_add_federaterestorestatus();
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.FederateRestoreStatusArray.federateRestoreStatus)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederateRestoreStatus >&
FederateRestoreStatusArray::federaterestorestatus() const {
  // @@protoc_insertion_point(field_list:rti1516_2025.fedpro.FederateRestoreStatusArray.federateRestoreStatus)
  return _impl_.federaterestorestatus_;
}

// -------------------------------------------------------------------

// FederationExecutionInformation

// string federationExecutionName = 1;
inline void FederationExecutionInformation::clear_federationexecutionname() {
  _impl_.federationexecutionname_.ClearToEmpty();
}
inline const std::string& FederationExecutionInformation::federationexecutionname() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederationExecutionInformation.federationExecutionName)
  return _internal_federationexecutionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FederationExecutionInformation::set_federationexecutionname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.federationexecutionname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.FederationExecutionInformation.federationExecutionName)
}
inline std::string* FederationExecutionInformation::mutable_federationexecutionname() {
  std::string* _s = _internal_mutable_federationexecutionname();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FederationExecutionInformation.federationExecutionName)
  return _s;
}
inline const std::string& FederationExecutionInformation::_internal_federationexecutionname() const {
  return _impl_.federationexecutionname_.Get();
}
inline void FederationExecutionInformation::_internal_set_federationexecutionname(const std::string& value) {
  
  _impl_.federationexecutionname_.Set(value, GetArenaForAllocation());
}
inline std::string* FederationExecutionInformation::_internal_mutable_federationexecutionname() {
  
  return _impl_.federationexecutionname_.Mutable(GetArenaForAllocation());
}
inline std::string* FederationExecutionInformation::release_federationexecutionname() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FederationExecutionInformation.federationExecutionName)
  return _impl_.federationexecutionname_.Release();
}
inline void FederationExecutionInformation::set_allocated_federationexecutionname(std::string* federationexecutionname) {
  if (federationexecutionname != nullptr) {
    
  } else {
    
  }
  _impl_.federationexecutionname_.SetAllocated(federationexecutionname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.federationexecutionname_.IsDefault()) {
    _impl_.federationexecutionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FederationExecutionInformation.federationExecutionName)
}

// string logicalTimeImplementationName = 2;
inline void FederationExecutionInformation::clear_logicaltimeimplementationname() {
  _impl_.logicaltimeimplementationname_.ClearToEmpty();
}
inline const std::string& FederationExecutionInformation::logicaltimeimplementationname() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederationExecutionInformation.logicalTimeImplementationName)
  return _internal_logicaltimeimplementationname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FederationExecutionInformation::set_logicaltimeimplementationname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.logicaltimeimplementationname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.FederationExecutionInformation.logicalTimeImplementationName)
}
inline std::string* FederationExecutionInformation::mutable_logicaltimeimplementationname() {
  std::string* _s = _internal_mutable_logicaltimeimplementationname();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FederationExecutionInformation.logicalTimeImplementationName)
  return _s;
}
inline const std::string& FederationExecutionInformation::_internal_logicaltimeimplementationname() const {
  return _impl_.logicaltimeimplementationname_.Get();
}
inline void FederationExecutionInformation::_internal_set_logicaltimeimplementationname(const std::string& value) {
  
  _impl_.logicaltimeimplementationname_.Set(value, GetArenaForAllocation());
}
inline std::string* FederationExecutionInformation::_internal_mutable_logicaltimeimplementationname() {
  
  return _impl_.logicaltimeimplementationname_.Mutable(GetArenaForAllocation());
}
inline std::string* FederationExecutionInformation::release_logicaltimeimplementationname() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FederationExecutionInformation.logicalTimeImplementationName)
  return _impl_.logicaltimeimplementationname_.Release();
}
inline void FederationExecutionInformation::set_allocated_logicaltimeimplementationname(std::string* logicaltimeimplementationname) {
  if (logicaltimeimplementationname != nullptr) {
    
  } else {
    
  }
  _impl_.logicaltimeimplementationname_.SetAllocated(logicaltimeimplementationname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.logicaltimeimplementationname_.IsDefault()) {
    _impl_.logicaltimeimplementationname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FederationExecutionInformation.logicalTimeImplementationName)
}

// -------------------------------------------------------------------

// FederationExecutionInformationSet

// repeated .rti1516_2025.fedpro.FederationExecutionInformation federationExecutionInformation = 1;
inline int FederationExecutionInformationSet::_internal_federationexecutioninformation_size() const {
  return _impl_.federationexecutioninformation_.size();
}
inline int FederationExecutionInformationSet::federationexecutioninformation_size() const {
  return _internal_federationexecutioninformation_size();
}
inline void FederationExecutionInformationSet::clear_federationexecutioninformation() {
  _impl_.federationexecutioninformation_.Clear();
}
inline ::rti1516_2025::fedpro::FederationExecutionInformation* FederationExecutionInformationSet::mutable_federationexecutioninformation(int index) {
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FederationExecutionInformationSet.federationExecutionInformation)
  return _impl_.federationexecutioninformation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederationExecutionInformation >*
FederationExecutionInformationSet::mutable_federationexecutioninformation() {
  // @@protoc_insertion_point(field_mutable_list:rti1516_2025.fedpro.FederationExecutionInformationSet.federationExecutionInformation)
  return &_impl_.federationexecutioninformation_;
}
inline const ::rti1516_2025::fedpro::FederationExecutionInformation& FederationExecutionInformationSet::_internal_federationexecutioninformation(int index) const {
  return _impl_.federationexecutioninformation_.Get(index);
}
inline const ::rti1516_2025::fedpro::FederationExecutionInformation& FederationExecutionInformationSet::federationexecutioninformation(int index) const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederationExecutionInformationSet.federationExecutionInformation)
  return _internal_federationexecutioninformation(index);
}
inline ::rti1516_2025::fedpro::FederationExecutionInformation* FederationExecutionInformationSet::_internal_add_federationexecutioninformation() {
  return _impl_.federationexecutioninformation_.Add();
}
inline ::rti1516_2025::fedpro::FederationExecutionInformation* FederationExecutionInformationSet::add_federationexecutioninformation() {
  ::rti1516_2025::fedpro::FederationExecutionInformation* _add = _internal_add_federationexecutioninformation();
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.FederationExecutionInformationSet.federationExecutionInformation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederationExecutionInformation >&
FederationExecutionInformationSet::federationexecutioninformation() const {
  // @@protoc_insertion_point(field_list:rti1516_2025.fedpro.FederationExecutionInformationSet.federationExecutionInformation)
  return _impl_.federationexecutioninformation_;
}

// -------------------------------------------------------------------

// FederationExecutionMemberInformation

// string federateName = 1;
inline void FederationExecutionMemberInformation::clear_federatename() {
  _impl_.federatename_.ClearToEmpty();
}
inline const std::string& FederationExecutionMemberInformation::federatename() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederationExecutionMemberInformation.federateName)
  return _internal_federatename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FederationExecutionMemberInformation::set_federatename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.federatename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.FederationExecutionMemberInformation.federateName)
}
inline std::string* FederationExecutionMemberInformation::mutable_federatename() {
  std::string* _s = _internal_mutable_federatename();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FederationExecutionMemberInformation.federateName)
  return _s;
}
inline const std::string& FederationExecutionMemberInformation::_internal_federatename() const {
  return _impl_.federatename_.Get();
}
inline void FederationExecutionMemberInformation::_internal_set_federatename(const std::string& value) {
  
  _impl_.federatename_.Set(value, GetArenaForAllocation());
}
inline std::string* FederationExecutionMemberInformation::_internal_mutable_federatename() {
  
  return _impl_.federatename_.Mutable(GetArenaForAllocation());
}
inline std::string* FederationExecutionMemberInformation::release_federatename() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FederationExecutionMemberInformation.federateName)
  return _impl_.federatename_.Release();
}
inline void FederationExecutionMemberInformation::set_allocated_federatename(std::string* federatename) {
  if (federatename != nullptr) {
    
  } else {
    
  }
  _impl_.federatename_.SetAllocated(federatename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.federatename_.IsDefault()) {
    _impl_.federatename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FederationExecutionMemberInformation.federateName)
}

// string federateType = 2;
inline void FederationExecutionMemberInformation::clear_federatetype() {
  _impl_.federatetype_.ClearToEmpty();
}
inline const std::string& FederationExecutionMemberInformation::federatetype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederationExecutionMemberInformation.federateType)
  return _internal_federatetype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FederationExecutionMemberInformation::set_federatetype(ArgT0&& arg0, ArgT... args) {
 
 _impl_.federatetype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.FederationExecutionMemberInformation.federateType)
}
inline std::string* FederationExecutionMemberInformation::mutable_federatetype() {
  std::string* _s = _internal_mutable_federatetype();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FederationExecutionMemberInformation.federateType)
  return _s;
}
inline const std::string& FederationExecutionMemberInformation::_internal_federatetype() const {
  return _impl_.federatetype_.Get();
}
inline void FederationExecutionMemberInformation::_internal_set_federatetype(const std::string& value) {
  
  _impl_.federatetype_.Set(value, GetArenaForAllocation());
}
inline std::string* FederationExecutionMemberInformation::_internal_mutable_federatetype() {
  
  return _impl_.federatetype_.Mutable(GetArenaForAllocation());
}
inline std::string* FederationExecutionMemberInformation::release_federatetype() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FederationExecutionMemberInformation.federateType)
  return _impl_.federatetype_.Release();
}
inline void FederationExecutionMemberInformation::set_allocated_federatetype(std::string* federatetype) {
  if (federatetype != nullptr) {
    
  } else {
    
  }
  _impl_.federatetype_.SetAllocated(federatetype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.federatetype_.IsDefault()) {
    _impl_.federatetype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FederationExecutionMemberInformation.federateType)
}

// -------------------------------------------------------------------

// FederationExecutionMemberInformationSet

// repeated .rti1516_2025.fedpro.FederationExecutionMemberInformation federationExecutionMemberInformation = 1;
inline int FederationExecutionMemberInformationSet::_internal_federationexecutionmemberinformation_size() const {
  return _impl_.federationexecutionmemberinformation_.size();
}
inline int FederationExecutionMemberInformationSet::federationexecutionmemberinformation_size() const {
  return _internal_federationexecutionmemberinformation_size();
}
inline void FederationExecutionMemberInformationSet::clear_federationexecutionmemberinformation() {
  _impl_.federationexecutionmemberinformation_.Clear();
}
inline ::rti1516_2025::fedpro::FederationExecutionMemberInformation* FederationExecutionMemberInformationSet::mutable_federationexecutionmemberinformation(int index) {
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FederationExecutionMemberInformationSet.federationExecutionMemberInformation)
  return _impl_.federationexecutionmemberinformation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederationExecutionMemberInformation >*
FederationExecutionMemberInformationSet::mutable_federationexecutionmemberinformation() {
  // @@protoc_insertion_point(field_mutable_list:rti1516_2025.fedpro.FederationExecutionMemberInformationSet.federationExecutionMemberInformation)
  return &_impl_.federationexecutionmemberinformation_;
}
inline const ::rti1516_2025::fedpro::FederationExecutionMemberInformation& FederationExecutionMemberInformationSet::_internal_federationexecutionmemberinformation(int index) const {
  return _impl_.federationexecutionmemberinformation_.Get(index);
}
inline const ::rti1516_2025::fedpro::FederationExecutionMemberInformation& FederationExecutionMemberInformationSet::federationexecutionmemberinformation(int index) const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederationExecutionMemberInformationSet.federationExecutionMemberInformation)
  return _internal_federationexecutionmemberinformation(index);
}
inline ::rti1516_2025::fedpro::FederationExecutionMemberInformation* FederationExecutionMemberInformationSet::_internal_add_federationexecutionmemberinformation() {
  return _impl_.federationexecutionmemberinformation_.Add();
}
inline ::rti1516_2025::fedpro::FederationExecutionMemberInformation* FederationExecutionMemberInformationSet::add_federationexecutionmemberinformation() {
  ::rti1516_2025::fedpro::FederationExecutionMemberInformation* _add = _internal_add_federationexecutionmemberinformation();
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.FederationExecutionMemberInformationSet.federationExecutionMemberInformation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederationExecutionMemberInformation >&
FederationExecutionMemberInformationSet::federationexecutionmemberinformation() const {
  // @@protoc_insertion_point(field_list:rti1516_2025.fedpro.FederationExecutionMemberInformationSet.federationExecutionMemberInformation)
  return _impl_.federationexecutionmemberinformation_;
}

// -------------------------------------------------------------------

// FederateHandle

// bytes data = 1;
inline void FederateHandle::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& FederateHandle::data() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederateHandle.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FederateHandle::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.FederateHandle.data)
}
inline std::string* FederateHandle::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FederateHandle.data)
  return _s;
}
inline const std::string& FederateHandle::_internal_data() const {
  return _impl_.data_.Get();
}
inline void FederateHandle::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* FederateHandle::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* FederateHandle::release_data() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FederateHandle.data)
  return _impl_.data_.Release();
}
inline void FederateHandle::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FederateHandle.data)
}

// -------------------------------------------------------------------

// FederateHandleSaveStatusPair

// .rti1516_2025.fedpro.FederateHandle federateHandle = 1;
inline bool FederateHandleSaveStatusPair::_internal_has_federatehandle() const {
  return this != internal_default_instance() && _impl_.federatehandle_ != nullptr;
}
inline bool FederateHandleSaveStatusPair::has_federatehandle() const {
  return _internal_has_federatehandle();
}
inline void FederateHandleSaveStatusPair::clear_federatehandle() {
  if (GetArenaForAllocation() == nullptr && _impl_.federatehandle_ != nullptr) {
    delete _impl_.federatehandle_;
  }
  _impl_.federatehandle_ = nullptr;
}
inline const ::rti1516_2025::fedpro::FederateHandle& FederateHandleSaveStatusPair::_internal_federatehandle() const {
  const ::rti1516_2025::fedpro::FederateHandle* p = _impl_.federatehandle_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandle&>(
      ::rti1516_2025::fedpro::_FederateHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandle& FederateHandleSaveStatusPair::federatehandle() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederateHandleSaveStatusPair.federateHandle)
  return _internal_federatehandle();
}
inline void FederateHandleSaveStatusPair::unsafe_arena_set_allocated_federatehandle(
    ::rti1516_2025::fedpro::FederateHandle* federatehandle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.federatehandle_);
  }
  _impl_.federatehandle_ = federatehandle;
  if (federatehandle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.FederateHandleSaveStatusPair.federateHandle)
}
inline ::rti1516_2025::fedpro::FederateHandle* FederateHandleSaveStatusPair::release_federatehandle() {
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.federatehandle_;
  _impl_.federatehandle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* FederateHandleSaveStatusPair::unsafe_arena_release_federatehandle() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FederateHandleSaveStatusPair.federateHandle)
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.federatehandle_;
  _impl_.federatehandle_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* FederateHandleSaveStatusPair::_internal_mutable_federatehandle() {
  
  if (_impl_.federatehandle_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(GetArenaForAllocation());
    _impl_.federatehandle_ = p;
  }
  return _impl_.federatehandle_;
}
inline ::rti1516_2025::fedpro::FederateHandle* FederateHandleSaveStatusPair::mutable_federatehandle() {
  ::rti1516_2025::fedpro::FederateHandle* _msg = _internal_mutable_federatehandle();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FederateHandleSaveStatusPair.federateHandle)
  return _msg;
}
inline void FederateHandleSaveStatusPair::set_allocated_federatehandle(::rti1516_2025::fedpro::FederateHandle* federatehandle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.federatehandle_;
  }
  if (federatehandle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(federatehandle);
    if (message_arena != submessage_arena) {
      federatehandle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, federatehandle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.federatehandle_ = federatehandle;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FederateHandleSaveStatusPair.federateHandle)
}

// .rti1516_2025.fedpro.SaveStatus saveStatus = 2;
inline void FederateHandleSaveStatusPair::clear_savestatus() {
  _impl_.savestatus_ = 0;
}
inline ::rti1516_2025::fedpro::SaveStatus FederateHandleSaveStatusPair::_internal_savestatus() const {
  return static_cast< ::rti1516_2025::fedpro::SaveStatus >(_impl_.savestatus_);
}
inline ::rti1516_2025::fedpro::SaveStatus FederateHandleSaveStatusPair::savestatus() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederateHandleSaveStatusPair.saveStatus)
  return _internal_savestatus();
}
inline void FederateHandleSaveStatusPair::_internal_set_savestatus(::rti1516_2025::fedpro::SaveStatus value) {
  
  _impl_.savestatus_ = value;
}
inline void FederateHandleSaveStatusPair::set_savestatus(::rti1516_2025::fedpro::SaveStatus value) {
  _internal_set_savestatus(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.FederateHandleSaveStatusPair.saveStatus)
}

// -------------------------------------------------------------------

// FederateHandleSaveStatusPairArray

// repeated .rti1516_2025.fedpro.FederateHandleSaveStatusPair federateHandleSaveStatusPair = 1;
inline int FederateHandleSaveStatusPairArray::_internal_federatehandlesavestatuspair_size() const {
  return _impl_.federatehandlesavestatuspair_.size();
}
inline int FederateHandleSaveStatusPairArray::federatehandlesavestatuspair_size() const {
  return _internal_federatehandlesavestatuspair_size();
}
inline void FederateHandleSaveStatusPairArray::clear_federatehandlesavestatuspair() {
  _impl_.federatehandlesavestatuspair_.Clear();
}
inline ::rti1516_2025::fedpro::FederateHandleSaveStatusPair* FederateHandleSaveStatusPairArray::mutable_federatehandlesavestatuspair(int index) {
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FederateHandleSaveStatusPairArray.federateHandleSaveStatusPair)
  return _impl_.federatehandlesavestatuspair_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederateHandleSaveStatusPair >*
FederateHandleSaveStatusPairArray::mutable_federatehandlesavestatuspair() {
  // @@protoc_insertion_point(field_mutable_list:rti1516_2025.fedpro.FederateHandleSaveStatusPairArray.federateHandleSaveStatusPair)
  return &_impl_.federatehandlesavestatuspair_;
}
inline const ::rti1516_2025::fedpro::FederateHandleSaveStatusPair& FederateHandleSaveStatusPairArray::_internal_federatehandlesavestatuspair(int index) const {
  return _impl_.federatehandlesavestatuspair_.Get(index);
}
inline const ::rti1516_2025::fedpro::FederateHandleSaveStatusPair& FederateHandleSaveStatusPairArray::federatehandlesavestatuspair(int index) const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederateHandleSaveStatusPairArray.federateHandleSaveStatusPair)
  return _internal_federatehandlesavestatuspair(index);
}
inline ::rti1516_2025::fedpro::FederateHandleSaveStatusPair* FederateHandleSaveStatusPairArray::_internal_add_federatehandlesavestatuspair() {
  return _impl_.federatehandlesavestatuspair_.Add();
}
inline ::rti1516_2025::fedpro::FederateHandleSaveStatusPair* FederateHandleSaveStatusPairArray::add_federatehandlesavestatuspair() {
  ::rti1516_2025::fedpro::FederateHandleSaveStatusPair* _add = _internal_add_federatehandlesavestatuspair();
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.FederateHandleSaveStatusPairArray.federateHandleSaveStatusPair)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederateHandleSaveStatusPair >&
FederateHandleSaveStatusPairArray::federatehandlesavestatuspair() const {
  // @@protoc_insertion_point(field_list:rti1516_2025.fedpro.FederateHandleSaveStatusPairArray.federateHandleSaveStatusPair)
  return _impl_.federatehandlesavestatuspair_;
}

// -------------------------------------------------------------------

// ObjectClassHandle

// bytes data = 1;
inline void ObjectClassHandle::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ObjectClassHandle::data() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ObjectClassHandle.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectClassHandle::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ObjectClassHandle.data)
}
inline std::string* ObjectClassHandle::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ObjectClassHandle.data)
  return _s;
}
inline const std::string& ObjectClassHandle::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ObjectClassHandle::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectClassHandle::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectClassHandle::release_data() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ObjectClassHandle.data)
  return _impl_.data_.Release();
}
inline void ObjectClassHandle::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ObjectClassHandle.data)
}

// -------------------------------------------------------------------

// AttributeHandle

// bytes data = 1;
inline void AttributeHandle::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& AttributeHandle::data() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributeHandle.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AttributeHandle::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.AttributeHandle.data)
}
inline std::string* AttributeHandle::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributeHandle.data)
  return _s;
}
inline const std::string& AttributeHandle::_internal_data() const {
  return _impl_.data_.Get();
}
inline void AttributeHandle::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* AttributeHandle::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* AttributeHandle::release_data() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributeHandle.data)
  return _impl_.data_.Release();
}
inline void AttributeHandle::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributeHandle.data)
}

// -------------------------------------------------------------------

// InteractionClassHandle

// bytes data = 1;
inline void InteractionClassHandle::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& InteractionClassHandle::data() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.InteractionClassHandle.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InteractionClassHandle::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.InteractionClassHandle.data)
}
inline std::string* InteractionClassHandle::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.InteractionClassHandle.data)
  return _s;
}
inline const std::string& InteractionClassHandle::_internal_data() const {
  return _impl_.data_.Get();
}
inline void InteractionClassHandle::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* InteractionClassHandle::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* InteractionClassHandle::release_data() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.InteractionClassHandle.data)
  return _impl_.data_.Release();
}
inline void InteractionClassHandle::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.InteractionClassHandle.data)
}

// -------------------------------------------------------------------

// ParameterHandle

// bytes data = 1;
inline void ParameterHandle::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ParameterHandle::data() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ParameterHandle.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParameterHandle::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ParameterHandle.data)
}
inline std::string* ParameterHandle::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ParameterHandle.data)
  return _s;
}
inline const std::string& ParameterHandle::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ParameterHandle::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ParameterHandle::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* ParameterHandle::release_data() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ParameterHandle.data)
  return _impl_.data_.Release();
}
inline void ParameterHandle::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ParameterHandle.data)
}

// -------------------------------------------------------------------

// ObjectInstanceHandle

// bytes data = 1;
inline void ObjectInstanceHandle::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ObjectInstanceHandle::data() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ObjectInstanceHandle.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectInstanceHandle::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ObjectInstanceHandle.data)
}
inline std::string* ObjectInstanceHandle::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ObjectInstanceHandle.data)
  return _s;
}
inline const std::string& ObjectInstanceHandle::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ObjectInstanceHandle::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectInstanceHandle::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectInstanceHandle::release_data() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ObjectInstanceHandle.data)
  return _impl_.data_.Release();
}
inline void ObjectInstanceHandle::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ObjectInstanceHandle.data)
}

// -------------------------------------------------------------------

// AttributeHandleValue

// .rti1516_2025.fedpro.AttributeHandle attributeHandle = 1;
inline bool AttributeHandleValue::_internal_has_attributehandle() const {
  return this != internal_default_instance() && _impl_.attributehandle_ != nullptr;
}
inline bool AttributeHandleValue::has_attributehandle() const {
  return _internal_has_attributehandle();
}
inline void AttributeHandleValue::clear_attributehandle() {
  if (GetArenaForAllocation() == nullptr && _impl_.attributehandle_ != nullptr) {
    delete _impl_.attributehandle_;
  }
  _impl_.attributehandle_ = nullptr;
}
inline const ::rti1516_2025::fedpro::AttributeHandle& AttributeHandleValue::_internal_attributehandle() const {
  const ::rti1516_2025::fedpro::AttributeHandle* p = _impl_.attributehandle_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandle&>(
      ::rti1516_2025::fedpro::_AttributeHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandle& AttributeHandleValue::attributehandle() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributeHandleValue.attributeHandle)
  return _internal_attributehandle();
}
inline void AttributeHandleValue::unsafe_arena_set_allocated_attributehandle(
    ::rti1516_2025::fedpro::AttributeHandle* attributehandle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributehandle_);
  }
  _impl_.attributehandle_ = attributehandle;
  if (attributehandle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.AttributeHandleValue.attributeHandle)
}
inline ::rti1516_2025::fedpro::AttributeHandle* AttributeHandleValue::release_attributehandle() {
  
  ::rti1516_2025::fedpro::AttributeHandle* temp = _impl_.attributehandle_;
  _impl_.attributehandle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandle* AttributeHandleValue::unsafe_arena_release_attributehandle() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributeHandleValue.attributeHandle)
  
  ::rti1516_2025::fedpro::AttributeHandle* temp = _impl_.attributehandle_;
  _impl_.attributehandle_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandle* AttributeHandleValue::_internal_mutable_attributehandle() {
  
  if (_impl_.attributehandle_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandle>(GetArenaForAllocation());
    _impl_.attributehandle_ = p;
  }
  return _impl_.attributehandle_;
}
inline ::rti1516_2025::fedpro::AttributeHandle* AttributeHandleValue::mutable_attributehandle() {
  ::rti1516_2025::fedpro::AttributeHandle* _msg = _internal_mutable_attributehandle();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributeHandleValue.attributeHandle)
  return _msg;
}
inline void AttributeHandleValue::set_allocated_attributehandle(::rti1516_2025::fedpro::AttributeHandle* attributehandle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attributehandle_;
  }
  if (attributehandle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attributehandle);
    if (message_arena != submessage_arena) {
      attributehandle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributehandle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributehandle_ = attributehandle;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributeHandleValue.attributeHandle)
}

// bytes value = 2;
inline void AttributeHandleValue::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& AttributeHandleValue::value() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributeHandleValue.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AttributeHandleValue::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.AttributeHandleValue.value)
}
inline std::string* AttributeHandleValue::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributeHandleValue.value)
  return _s;
}
inline const std::string& AttributeHandleValue::_internal_value() const {
  return _impl_.value_.Get();
}
inline void AttributeHandleValue::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* AttributeHandleValue::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* AttributeHandleValue::release_value() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributeHandleValue.value)
  return _impl_.value_.Release();
}
inline void AttributeHandleValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributeHandleValue.value)
}

// -------------------------------------------------------------------

// AttributeHandleValueMap

// repeated .rti1516_2025.fedpro.AttributeHandleValue attributeHandleValue = 1;
inline int AttributeHandleValueMap::_internal_attributehandlevalue_size() const {
  return _impl_.attributehandlevalue_.size();
}
inline int AttributeHandleValueMap::attributehandlevalue_size() const {
  return _internal_attributehandlevalue_size();
}
inline void AttributeHandleValueMap::clear_attributehandlevalue() {
  _impl_.attributehandlevalue_.Clear();
}
inline ::rti1516_2025::fedpro::AttributeHandleValue* AttributeHandleValueMap::mutable_attributehandlevalue(int index) {
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributeHandleValueMap.attributeHandleValue)
  return _impl_.attributehandlevalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::AttributeHandleValue >*
AttributeHandleValueMap::mutable_attributehandlevalue() {
  // @@protoc_insertion_point(field_mutable_list:rti1516_2025.fedpro.AttributeHandleValueMap.attributeHandleValue)
  return &_impl_.attributehandlevalue_;
}
inline const ::rti1516_2025::fedpro::AttributeHandleValue& AttributeHandleValueMap::_internal_attributehandlevalue(int index) const {
  return _impl_.attributehandlevalue_.Get(index);
}
inline const ::rti1516_2025::fedpro::AttributeHandleValue& AttributeHandleValueMap::attributehandlevalue(int index) const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributeHandleValueMap.attributeHandleValue)
  return _internal_attributehandlevalue(index);
}
inline ::rti1516_2025::fedpro::AttributeHandleValue* AttributeHandleValueMap::_internal_add_attributehandlevalue() {
  return _impl_.attributehandlevalue_.Add();
}
inline ::rti1516_2025::fedpro::AttributeHandleValue* AttributeHandleValueMap::add_attributehandlevalue() {
  ::rti1516_2025::fedpro::AttributeHandleValue* _add = _internal_add_attributehandlevalue();
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.AttributeHandleValueMap.attributeHandleValue)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::AttributeHandleValue >&
AttributeHandleValueMap::attributehandlevalue() const {
  // @@protoc_insertion_point(field_list:rti1516_2025.fedpro.AttributeHandleValueMap.attributeHandleValue)
  return _impl_.attributehandlevalue_;
}

// -------------------------------------------------------------------

// ParameterHandleValue

// .rti1516_2025.fedpro.ParameterHandle parameterHandle = 1;
inline bool ParameterHandleValue::_internal_has_parameterhandle() const {
  return this != internal_default_instance() && _impl_.parameterhandle_ != nullptr;
}
inline bool ParameterHandleValue::has_parameterhandle() const {
  return _internal_has_parameterhandle();
}
inline void ParameterHandleValue::clear_parameterhandle() {
  if (GetArenaForAllocation() == nullptr && _impl_.parameterhandle_ != nullptr) {
    delete _impl_.parameterhandle_;
  }
  _impl_.parameterhandle_ = nullptr;
}
inline const ::rti1516_2025::fedpro::ParameterHandle& ParameterHandleValue::_internal_parameterhandle() const {
  const ::rti1516_2025::fedpro::ParameterHandle* p = _impl_.parameterhandle_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ParameterHandle&>(
      ::rti1516_2025::fedpro::_ParameterHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ParameterHandle& ParameterHandleValue::parameterhandle() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ParameterHandleValue.parameterHandle)
  return _internal_parameterhandle();
}
inline void ParameterHandleValue::unsafe_arena_set_allocated_parameterhandle(
    ::rti1516_2025::fedpro::ParameterHandle* parameterhandle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parameterhandle_);
  }
  _impl_.parameterhandle_ = parameterhandle;
  if (parameterhandle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ParameterHandleValue.parameterHandle)
}
inline ::rti1516_2025::fedpro::ParameterHandle* ParameterHandleValue::release_parameterhandle() {
  
  ::rti1516_2025::fedpro::ParameterHandle* temp = _impl_.parameterhandle_;
  _impl_.parameterhandle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ParameterHandle* ParameterHandleValue::unsafe_arena_release_parameterhandle() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ParameterHandleValue.parameterHandle)
  
  ::rti1516_2025::fedpro::ParameterHandle* temp = _impl_.parameterhandle_;
  _impl_.parameterhandle_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ParameterHandle* ParameterHandleValue::_internal_mutable_parameterhandle() {
  
  if (_impl_.parameterhandle_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ParameterHandle>(GetArenaForAllocation());
    _impl_.parameterhandle_ = p;
  }
  return _impl_.parameterhandle_;
}
inline ::rti1516_2025::fedpro::ParameterHandle* ParameterHandleValue::mutable_parameterhandle() {
  ::rti1516_2025::fedpro::ParameterHandle* _msg = _internal_mutable_parameterhandle();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ParameterHandleValue.parameterHandle)
  return _msg;
}
inline void ParameterHandleValue::set_allocated_parameterhandle(::rti1516_2025::fedpro::ParameterHandle* parameterhandle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.parameterhandle_;
  }
  if (parameterhandle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(parameterhandle);
    if (message_arena != submessage_arena) {
      parameterhandle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameterhandle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.parameterhandle_ = parameterhandle;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ParameterHandleValue.parameterHandle)
}

// bytes value = 2;
inline void ParameterHandleValue::clear_value() {
  _impl_.value_.ClearToEmpty();
}
inline const std::string& ParameterHandleValue::value() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ParameterHandleValue.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ParameterHandleValue::set_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ParameterHandleValue.value)
}
inline std::string* ParameterHandleValue::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ParameterHandleValue.value)
  return _s;
}
inline const std::string& ParameterHandleValue::_internal_value() const {
  return _impl_.value_.Get();
}
inline void ParameterHandleValue::_internal_set_value(const std::string& value) {
  
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* ParameterHandleValue::_internal_mutable_value() {
  
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* ParameterHandleValue::release_value() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ParameterHandleValue.value)
  return _impl_.value_.Release();
}
inline void ParameterHandleValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ParameterHandleValue.value)
}

// -------------------------------------------------------------------

// ParameterHandleValueMap

// repeated .rti1516_2025.fedpro.ParameterHandleValue parameterHandleValue = 1;
inline int ParameterHandleValueMap::_internal_parameterhandlevalue_size() const {
  return _impl_.parameterhandlevalue_.size();
}
inline int ParameterHandleValueMap::parameterhandlevalue_size() const {
  return _internal_parameterhandlevalue_size();
}
inline void ParameterHandleValueMap::clear_parameterhandlevalue() {
  _impl_.parameterhandlevalue_.Clear();
}
inline ::rti1516_2025::fedpro::ParameterHandleValue* ParameterHandleValueMap::mutable_parameterhandlevalue(int index) {
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ParameterHandleValueMap.parameterHandleValue)
  return _impl_.parameterhandlevalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::ParameterHandleValue >*
ParameterHandleValueMap::mutable_parameterhandlevalue() {
  // @@protoc_insertion_point(field_mutable_list:rti1516_2025.fedpro.ParameterHandleValueMap.parameterHandleValue)
  return &_impl_.parameterhandlevalue_;
}
inline const ::rti1516_2025::fedpro::ParameterHandleValue& ParameterHandleValueMap::_internal_parameterhandlevalue(int index) const {
  return _impl_.parameterhandlevalue_.Get(index);
}
inline const ::rti1516_2025::fedpro::ParameterHandleValue& ParameterHandleValueMap::parameterhandlevalue(int index) const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ParameterHandleValueMap.parameterHandleValue)
  return _internal_parameterhandlevalue(index);
}
inline ::rti1516_2025::fedpro::ParameterHandleValue* ParameterHandleValueMap::_internal_add_parameterhandlevalue() {
  return _impl_.parameterhandlevalue_.Add();
}
inline ::rti1516_2025::fedpro::ParameterHandleValue* ParameterHandleValueMap::add_parameterhandlevalue() {
  ::rti1516_2025::fedpro::ParameterHandleValue* _add = _internal_add_parameterhandlevalue();
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.ParameterHandleValueMap.parameterHandleValue)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::ParameterHandleValue >&
ParameterHandleValueMap::parameterhandlevalue() const {
  // @@protoc_insertion_point(field_list:rti1516_2025.fedpro.ParameterHandleValueMap.parameterHandleValue)
  return _impl_.parameterhandlevalue_;
}

// -------------------------------------------------------------------

// MessageRetractionHandle

// bytes data = 1;
inline void MessageRetractionHandle::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& MessageRetractionHandle::data() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.MessageRetractionHandle.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageRetractionHandle::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.MessageRetractionHandle.data)
}
inline std::string* MessageRetractionHandle::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.MessageRetractionHandle.data)
  return _s;
}
inline const std::string& MessageRetractionHandle::_internal_data() const {
  return _impl_.data_.Get();
}
inline void MessageRetractionHandle::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* MessageRetractionHandle::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* MessageRetractionHandle::release_data() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.MessageRetractionHandle.data)
  return _impl_.data_.Release();
}
inline void MessageRetractionHandle::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.MessageRetractionHandle.data)
}

// -------------------------------------------------------------------

// MessageRetractionReturn

// bool retractionHandleIsValid = 1;
inline void MessageRetractionReturn::clear_retractionhandleisvalid() {
  _impl_.retractionhandleisvalid_ = false;
}
inline bool MessageRetractionReturn::_internal_retractionhandleisvalid() const {
  return _impl_.retractionhandleisvalid_;
}
inline bool MessageRetractionReturn::retractionhandleisvalid() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.MessageRetractionReturn.retractionHandleIsValid)
  return _internal_retractionhandleisvalid();
}
inline void MessageRetractionReturn::_internal_set_retractionhandleisvalid(bool value) {
  
  _impl_.retractionhandleisvalid_ = value;
}
inline void MessageRetractionReturn::set_retractionhandleisvalid(bool value) {
  _internal_set_retractionhandleisvalid(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.MessageRetractionReturn.retractionHandleIsValid)
}

// .rti1516_2025.fedpro.MessageRetractionHandle messageRetractionHandle = 2;
inline bool MessageRetractionReturn::_internal_has_messageretractionhandle() const {
  return this != internal_default_instance() && _impl_.messageretractionhandle_ != nullptr;
}
inline bool MessageRetractionReturn::has_messageretractionhandle() const {
  return _internal_has_messageretractionhandle();
}
inline void MessageRetractionReturn::clear_messageretractionhandle() {
  if (GetArenaForAllocation() == nullptr && _impl_.messageretractionhandle_ != nullptr) {
    delete _impl_.messageretractionhandle_;
  }
  _impl_.messageretractionhandle_ = nullptr;
}
inline const ::rti1516_2025::fedpro::MessageRetractionHandle& MessageRetractionReturn::_internal_messageretractionhandle() const {
  const ::rti1516_2025::fedpro::MessageRetractionHandle* p = _impl_.messageretractionhandle_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::MessageRetractionHandle&>(
      ::rti1516_2025::fedpro::_MessageRetractionHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::MessageRetractionHandle& MessageRetractionReturn::messageretractionhandle() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.MessageRetractionReturn.messageRetractionHandle)
  return _internal_messageretractionhandle();
}
inline void MessageRetractionReturn::unsafe_arena_set_allocated_messageretractionhandle(
    ::rti1516_2025::fedpro::MessageRetractionHandle* messageretractionhandle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.messageretractionhandle_);
  }
  _impl_.messageretractionhandle_ = messageretractionhandle;
  if (messageretractionhandle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.MessageRetractionReturn.messageRetractionHandle)
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* MessageRetractionReturn::release_messageretractionhandle() {
  
  ::rti1516_2025::fedpro::MessageRetractionHandle* temp = _impl_.messageretractionhandle_;
  _impl_.messageretractionhandle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* MessageRetractionReturn::unsafe_arena_release_messageretractionhandle() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.MessageRetractionReturn.messageRetractionHandle)
  
  ::rti1516_2025::fedpro::MessageRetractionHandle* temp = _impl_.messageretractionhandle_;
  _impl_.messageretractionhandle_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* MessageRetractionReturn::_internal_mutable_messageretractionhandle() {
  
  if (_impl_.messageretractionhandle_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::MessageRetractionHandle>(GetArenaForAllocation());
    _impl_.messageretractionhandle_ = p;
  }
  return _impl_.messageretractionhandle_;
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* MessageRetractionReturn::mutable_messageretractionhandle() {
  ::rti1516_2025::fedpro::MessageRetractionHandle* _msg = _internal_mutable_messageretractionhandle();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.MessageRetractionReturn.messageRetractionHandle)
  return _msg;
}
inline void MessageRetractionReturn::set_allocated_messageretractionhandle(::rti1516_2025::fedpro::MessageRetractionHandle* messageretractionhandle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.messageretractionhandle_;
  }
  if (messageretractionhandle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(messageretractionhandle);
    if (message_arena != submessage_arena) {
      messageretractionhandle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messageretractionhandle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.messageretractionhandle_ = messageretractionhandle;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.MessageRetractionReturn.messageRetractionHandle)
}

// -------------------------------------------------------------------

// LogicalTime

// bytes data = 1;
inline void LogicalTime::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& LogicalTime::data() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.LogicalTime.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogicalTime::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.LogicalTime.data)
}
inline std::string* LogicalTime::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.LogicalTime.data)
  return _s;
}
inline const std::string& LogicalTime::_internal_data() const {
  return _impl_.data_.Get();
}
inline void LogicalTime::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* LogicalTime::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* LogicalTime::release_data() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.LogicalTime.data)
  return _impl_.data_.Release();
}
inline void LogicalTime::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.LogicalTime.data)
}

// -------------------------------------------------------------------

// LogicalTimeInterval

// bytes data = 1;
inline void LogicalTimeInterval::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& LogicalTimeInterval::data() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.LogicalTimeInterval.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogicalTimeInterval::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.LogicalTimeInterval.data)
}
inline std::string* LogicalTimeInterval::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.LogicalTimeInterval.data)
  return _s;
}
inline const std::string& LogicalTimeInterval::_internal_data() const {
  return _impl_.data_.Get();
}
inline void LogicalTimeInterval::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* LogicalTimeInterval::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* LogicalTimeInterval::release_data() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.LogicalTimeInterval.data)
  return _impl_.data_.Release();
}
inline void LogicalTimeInterval::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.LogicalTimeInterval.data)
}

// -------------------------------------------------------------------

// TransportationTypeHandle

// bytes data = 1;
inline void TransportationTypeHandle::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& TransportationTypeHandle::data() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.TransportationTypeHandle.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransportationTypeHandle::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.TransportationTypeHandle.data)
}
inline std::string* TransportationTypeHandle::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.TransportationTypeHandle.data)
  return _s;
}
inline const std::string& TransportationTypeHandle::_internal_data() const {
  return _impl_.data_.Get();
}
inline void TransportationTypeHandle::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* TransportationTypeHandle::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* TransportationTypeHandle::release_data() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.TransportationTypeHandle.data)
  return _impl_.data_.Release();
}
inline void TransportationTypeHandle::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.TransportationTypeHandle.data)
}

// -------------------------------------------------------------------

// DimensionHandle

// bytes data = 1;
inline void DimensionHandle::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& DimensionHandle::data() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.DimensionHandle.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DimensionHandle::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.DimensionHandle.data)
}
inline std::string* DimensionHandle::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.DimensionHandle.data)
  return _s;
}
inline const std::string& DimensionHandle::_internal_data() const {
  return _impl_.data_.Get();
}
inline void DimensionHandle::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* DimensionHandle::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* DimensionHandle::release_data() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.DimensionHandle.data)
  return _impl_.data_.Release();
}
inline void DimensionHandle::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.DimensionHandle.data)
}

// -------------------------------------------------------------------

// RegionHandle

// bytes data = 1;
inline void RegionHandle::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& RegionHandle::data() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RegionHandle.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegionHandle::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.RegionHandle.data)
}
inline std::string* RegionHandle::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RegionHandle.data)
  return _s;
}
inline const std::string& RegionHandle::_internal_data() const {
  return _impl_.data_.Get();
}
inline void RegionHandle::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* RegionHandle::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* RegionHandle::release_data() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RegionHandle.data)
  return _impl_.data_.Release();
}
inline void RegionHandle::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RegionHandle.data)
}

// -------------------------------------------------------------------

// TimeQueryReturn

// bool logicalTimeIsValid = 1;
inline void TimeQueryReturn::clear_logicaltimeisvalid() {
  _impl_.logicaltimeisvalid_ = false;
}
inline bool TimeQueryReturn::_internal_logicaltimeisvalid() const {
  return _impl_.logicaltimeisvalid_;
}
inline bool TimeQueryReturn::logicaltimeisvalid() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.TimeQueryReturn.logicalTimeIsValid)
  return _internal_logicaltimeisvalid();
}
inline void TimeQueryReturn::_internal_set_logicaltimeisvalid(bool value) {
  
  _impl_.logicaltimeisvalid_ = value;
}
inline void TimeQueryReturn::set_logicaltimeisvalid(bool value) {
  _internal_set_logicaltimeisvalid(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.TimeQueryReturn.logicalTimeIsValid)
}

// .rti1516_2025.fedpro.LogicalTime logicalTime = 2;
inline bool TimeQueryReturn::_internal_has_logicaltime() const {
  return this != internal_default_instance() && _impl_.logicaltime_ != nullptr;
}
inline bool TimeQueryReturn::has_logicaltime() const {
  return _internal_has_logicaltime();
}
inline void TimeQueryReturn::clear_logicaltime() {
  if (GetArenaForAllocation() == nullptr && _impl_.logicaltime_ != nullptr) {
    delete _impl_.logicaltime_;
  }
  _impl_.logicaltime_ = nullptr;
}
inline const ::rti1516_2025::fedpro::LogicalTime& TimeQueryReturn::_internal_logicaltime() const {
  const ::rti1516_2025::fedpro::LogicalTime* p = _impl_.logicaltime_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::LogicalTime&>(
      ::rti1516_2025::fedpro::_LogicalTime_default_instance_);
}
inline const ::rti1516_2025::fedpro::LogicalTime& TimeQueryReturn::logicaltime() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.TimeQueryReturn.logicalTime)
  return _internal_logicaltime();
}
inline void TimeQueryReturn::unsafe_arena_set_allocated_logicaltime(
    ::rti1516_2025::fedpro::LogicalTime* logicaltime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.logicaltime_);
  }
  _impl_.logicaltime_ = logicaltime;
  if (logicaltime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.TimeQueryReturn.logicalTime)
}
inline ::rti1516_2025::fedpro::LogicalTime* TimeQueryReturn::release_logicaltime() {
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.logicaltime_;
  _impl_.logicaltime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* TimeQueryReturn::unsafe_arena_release_logicaltime() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.TimeQueryReturn.logicalTime)
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.logicaltime_;
  _impl_.logicaltime_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* TimeQueryReturn::_internal_mutable_logicaltime() {
  
  if (_impl_.logicaltime_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::LogicalTime>(GetArenaForAllocation());
    _impl_.logicaltime_ = p;
  }
  return _impl_.logicaltime_;
}
inline ::rti1516_2025::fedpro::LogicalTime* TimeQueryReturn::mutable_logicaltime() {
  ::rti1516_2025::fedpro::LogicalTime* _msg = _internal_mutable_logicaltime();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.TimeQueryReturn.logicalTime)
  return _msg;
}
inline void TimeQueryReturn::set_allocated_logicaltime(::rti1516_2025::fedpro::LogicalTime* logicaltime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.logicaltime_;
  }
  if (logicaltime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(logicaltime);
    if (message_arena != submessage_arena) {
      logicaltime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logicaltime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.logicaltime_ = logicaltime;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.TimeQueryReturn.logicalTime)
}

// -------------------------------------------------------------------

// FederateHandleSet

// repeated .rti1516_2025.fedpro.FederateHandle federateHandle = 1;
inline int FederateHandleSet::_internal_federatehandle_size() const {
  return _impl_.federatehandle_.size();
}
inline int FederateHandleSet::federatehandle_size() const {
  return _internal_federatehandle_size();
}
inline void FederateHandleSet::clear_federatehandle() {
  _impl_.federatehandle_.Clear();
}
inline ::rti1516_2025::fedpro::FederateHandle* FederateHandleSet::mutable_federatehandle(int index) {
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FederateHandleSet.federateHandle)
  return _impl_.federatehandle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederateHandle >*
FederateHandleSet::mutable_federatehandle() {
  // @@protoc_insertion_point(field_mutable_list:rti1516_2025.fedpro.FederateHandleSet.federateHandle)
  return &_impl_.federatehandle_;
}
inline const ::rti1516_2025::fedpro::FederateHandle& FederateHandleSet::_internal_federatehandle(int index) const {
  return _impl_.federatehandle_.Get(index);
}
inline const ::rti1516_2025::fedpro::FederateHandle& FederateHandleSet::federatehandle(int index) const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederateHandleSet.federateHandle)
  return _internal_federatehandle(index);
}
inline ::rti1516_2025::fedpro::FederateHandle* FederateHandleSet::_internal_add_federatehandle() {
  return _impl_.federatehandle_.Add();
}
inline ::rti1516_2025::fedpro::FederateHandle* FederateHandleSet::add_federatehandle() {
  ::rti1516_2025::fedpro::FederateHandle* _add = _internal_add_federatehandle();
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.FederateHandleSet.federateHandle)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FederateHandle >&
FederateHandleSet::federatehandle() const {
  // @@protoc_insertion_point(field_list:rti1516_2025.fedpro.FederateHandleSet.federateHandle)
  return _impl_.federatehandle_;
}

// -------------------------------------------------------------------

// DimensionHandleSet

// repeated .rti1516_2025.fedpro.DimensionHandle dimensionHandle = 1;
inline int DimensionHandleSet::_internal_dimensionhandle_size() const {
  return _impl_.dimensionhandle_.size();
}
inline int DimensionHandleSet::dimensionhandle_size() const {
  return _internal_dimensionhandle_size();
}
inline void DimensionHandleSet::clear_dimensionhandle() {
  _impl_.dimensionhandle_.Clear();
}
inline ::rti1516_2025::fedpro::DimensionHandle* DimensionHandleSet::mutable_dimensionhandle(int index) {
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.DimensionHandleSet.dimensionHandle)
  return _impl_.dimensionhandle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::DimensionHandle >*
DimensionHandleSet::mutable_dimensionhandle() {
  // @@protoc_insertion_point(field_mutable_list:rti1516_2025.fedpro.DimensionHandleSet.dimensionHandle)
  return &_impl_.dimensionhandle_;
}
inline const ::rti1516_2025::fedpro::DimensionHandle& DimensionHandleSet::_internal_dimensionhandle(int index) const {
  return _impl_.dimensionhandle_.Get(index);
}
inline const ::rti1516_2025::fedpro::DimensionHandle& DimensionHandleSet::dimensionhandle(int index) const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.DimensionHandleSet.dimensionHandle)
  return _internal_dimensionhandle(index);
}
inline ::rti1516_2025::fedpro::DimensionHandle* DimensionHandleSet::_internal_add_dimensionhandle() {
  return _impl_.dimensionhandle_.Add();
}
inline ::rti1516_2025::fedpro::DimensionHandle* DimensionHandleSet::add_dimensionhandle() {
  ::rti1516_2025::fedpro::DimensionHandle* _add = _internal_add_dimensionhandle();
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.DimensionHandleSet.dimensionHandle)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::DimensionHandle >&
DimensionHandleSet::dimensionhandle() const {
  // @@protoc_insertion_point(field_list:rti1516_2025.fedpro.DimensionHandleSet.dimensionHandle)
  return _impl_.dimensionhandle_;
}

// -------------------------------------------------------------------

// RegionHandleSet

// repeated .rti1516_2025.fedpro.RegionHandle regionHandle = 1;
inline int RegionHandleSet::_internal_regionhandle_size() const {
  return _impl_.regionhandle_.size();
}
inline int RegionHandleSet::regionhandle_size() const {
  return _internal_regionhandle_size();
}
inline void RegionHandleSet::clear_regionhandle() {
  _impl_.regionhandle_.Clear();
}
inline ::rti1516_2025::fedpro::RegionHandle* RegionHandleSet::mutable_regionhandle(int index) {
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RegionHandleSet.regionHandle)
  return _impl_.regionhandle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::RegionHandle >*
RegionHandleSet::mutable_regionhandle() {
  // @@protoc_insertion_point(field_mutable_list:rti1516_2025.fedpro.RegionHandleSet.regionHandle)
  return &_impl_.regionhandle_;
}
inline const ::rti1516_2025::fedpro::RegionHandle& RegionHandleSet::_internal_regionhandle(int index) const {
  return _impl_.regionhandle_.Get(index);
}
inline const ::rti1516_2025::fedpro::RegionHandle& RegionHandleSet::regionhandle(int index) const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RegionHandleSet.regionHandle)
  return _internal_regionhandle(index);
}
inline ::rti1516_2025::fedpro::RegionHandle* RegionHandleSet::_internal_add_regionhandle() {
  return _impl_.regionhandle_.Add();
}
inline ::rti1516_2025::fedpro::RegionHandle* RegionHandleSet::add_regionhandle() {
  ::rti1516_2025::fedpro::RegionHandle* _add = _internal_add_regionhandle();
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.RegionHandleSet.regionHandle)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::RegionHandle >&
RegionHandleSet::regionhandle() const {
  // @@protoc_insertion_point(field_list:rti1516_2025.fedpro.RegionHandleSet.regionHandle)
  return _impl_.regionhandle_;
}

// -------------------------------------------------------------------

// AttributeHandleSet

// repeated .rti1516_2025.fedpro.AttributeHandle attributeHandle = 1;
inline int AttributeHandleSet::_internal_attributehandle_size() const {
  return _impl_.attributehandle_.size();
}
inline int AttributeHandleSet::attributehandle_size() const {
  return _internal_attributehandle_size();
}
inline void AttributeHandleSet::clear_attributehandle() {
  _impl_.attributehandle_.Clear();
}
inline ::rti1516_2025::fedpro::AttributeHandle* AttributeHandleSet::mutable_attributehandle(int index) {
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributeHandleSet.attributeHandle)
  return _impl_.attributehandle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::AttributeHandle >*
AttributeHandleSet::mutable_attributehandle() {
  // @@protoc_insertion_point(field_mutable_list:rti1516_2025.fedpro.AttributeHandleSet.attributeHandle)
  return &_impl_.attributehandle_;
}
inline const ::rti1516_2025::fedpro::AttributeHandle& AttributeHandleSet::_internal_attributehandle(int index) const {
  return _impl_.attributehandle_.Get(index);
}
inline const ::rti1516_2025::fedpro::AttributeHandle& AttributeHandleSet::attributehandle(int index) const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributeHandleSet.attributeHandle)
  return _internal_attributehandle(index);
}
inline ::rti1516_2025::fedpro::AttributeHandle* AttributeHandleSet::_internal_add_attributehandle() {
  return _impl_.attributehandle_.Add();
}
inline ::rti1516_2025::fedpro::AttributeHandle* AttributeHandleSet::add_attributehandle() {
  ::rti1516_2025::fedpro::AttributeHandle* _add = _internal_add_attributehandle();
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.AttributeHandleSet.attributeHandle)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::AttributeHandle >&
AttributeHandleSet::attributehandle() const {
  // @@protoc_insertion_point(field_list:rti1516_2025.fedpro.AttributeHandleSet.attributeHandle)
  return _impl_.attributehandle_;
}

// -------------------------------------------------------------------

// AttributeSetRegionSetPair

// .rti1516_2025.fedpro.AttributeHandleSet attributeSet = 1;
inline bool AttributeSetRegionSetPair::_internal_has_attributeset() const {
  return this != internal_default_instance() && _impl_.attributeset_ != nullptr;
}
inline bool AttributeSetRegionSetPair::has_attributeset() const {
  return _internal_has_attributeset();
}
inline void AttributeSetRegionSetPair::clear_attributeset() {
  if (GetArenaForAllocation() == nullptr && _impl_.attributeset_ != nullptr) {
    delete _impl_.attributeset_;
  }
  _impl_.attributeset_ = nullptr;
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& AttributeSetRegionSetPair::_internal_attributeset() const {
  const ::rti1516_2025::fedpro::AttributeHandleSet* p = _impl_.attributeset_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleSet&>(
      ::rti1516_2025::fedpro::_AttributeHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& AttributeSetRegionSetPair::attributeset() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributeSetRegionSetPair.attributeSet)
  return _internal_attributeset();
}
inline void AttributeSetRegionSetPair::unsafe_arena_set_allocated_attributeset(
    ::rti1516_2025::fedpro::AttributeHandleSet* attributeset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributeset_);
  }
  _impl_.attributeset_ = attributeset;
  if (attributeset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.AttributeSetRegionSetPair.attributeSet)
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeSetRegionSetPair::release_attributeset() {
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributeset_;
  _impl_.attributeset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeSetRegionSetPair::unsafe_arena_release_attributeset() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributeSetRegionSetPair.attributeSet)
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributeset_;
  _impl_.attributeset_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeSetRegionSetPair::_internal_mutable_attributeset() {
  
  if (_impl_.attributeset_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleSet>(GetArenaForAllocation());
    _impl_.attributeset_ = p;
  }
  return _impl_.attributeset_;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeSetRegionSetPair::mutable_attributeset() {
  ::rti1516_2025::fedpro::AttributeHandleSet* _msg = _internal_mutable_attributeset();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributeSetRegionSetPair.attributeSet)
  return _msg;
}
inline void AttributeSetRegionSetPair::set_allocated_attributeset(::rti1516_2025::fedpro::AttributeHandleSet* attributeset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.attributeset_;
  }
  if (attributeset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attributeset);
    if (message_arena != submessage_arena) {
      attributeset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributeset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributeset_ = attributeset;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributeSetRegionSetPair.attributeSet)
}

// .rti1516_2025.fedpro.RegionHandleSet regionSet = 2;
inline bool AttributeSetRegionSetPair::_internal_has_regionset() const {
  return this != internal_default_instance() && _impl_.regionset_ != nullptr;
}
inline bool AttributeSetRegionSetPair::has_regionset() const {
  return _internal_has_regionset();
}
inline void AttributeSetRegionSetPair::clear_regionset() {
  if (GetArenaForAllocation() == nullptr && _impl_.regionset_ != nullptr) {
    delete _impl_.regionset_;
  }
  _impl_.regionset_ = nullptr;
}
inline const ::rti1516_2025::fedpro::RegionHandleSet& AttributeSetRegionSetPair::_internal_regionset() const {
  const ::rti1516_2025::fedpro::RegionHandleSet* p = _impl_.regionset_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::RegionHandleSet&>(
      ::rti1516_2025::fedpro::_RegionHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::RegionHandleSet& AttributeSetRegionSetPair::regionset() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributeSetRegionSetPair.regionSet)
  return _internal_regionset();
}
inline void AttributeSetRegionSetPair::unsafe_arena_set_allocated_regionset(
    ::rti1516_2025::fedpro::RegionHandleSet* regionset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.regionset_);
  }
  _impl_.regionset_ = regionset;
  if (regionset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.AttributeSetRegionSetPair.regionSet)
}
inline ::rti1516_2025::fedpro::RegionHandleSet* AttributeSetRegionSetPair::release_regionset() {
  
  ::rti1516_2025::fedpro::RegionHandleSet* temp = _impl_.regionset_;
  _impl_.regionset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::RegionHandleSet* AttributeSetRegionSetPair::unsafe_arena_release_regionset() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributeSetRegionSetPair.regionSet)
  
  ::rti1516_2025::fedpro::RegionHandleSet* temp = _impl_.regionset_;
  _impl_.regionset_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::RegionHandleSet* AttributeSetRegionSetPair::_internal_mutable_regionset() {
  
  if (_impl_.regionset_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::RegionHandleSet>(GetArenaForAllocation());
    _impl_.regionset_ = p;
  }
  return _impl_.regionset_;
}
inline ::rti1516_2025::fedpro::RegionHandleSet* AttributeSetRegionSetPair::mutable_regionset() {
  ::rti1516_2025::fedpro::RegionHandleSet* _msg = _internal_mutable_regionset();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributeSetRegionSetPair.regionSet)
  return _msg;
}
inline void AttributeSetRegionSetPair::set_allocated_regionset(::rti1516_2025::fedpro::RegionHandleSet* regionset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.regionset_;
  }
  if (regionset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(regionset);
    if (message_arena != submessage_arena) {
      regionset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, regionset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.regionset_ = regionset;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributeSetRegionSetPair.regionSet)
}

// -------------------------------------------------------------------

// AttributeSetRegionSetPairList

// repeated .rti1516_2025.fedpro.AttributeSetRegionSetPair AttributeSetRegionSetPair = 1;
inline int AttributeSetRegionSetPairList::_internal_attributesetregionsetpair_size() const {
  return _impl_.attributesetregionsetpair_.size();
}
inline int AttributeSetRegionSetPairList::attributesetregionsetpair_size() const {
  return _internal_attributesetregionsetpair_size();
}
inline void AttributeSetRegionSetPairList::clear_attributesetregionsetpair() {
  _impl_.attributesetregionsetpair_.Clear();
}
inline ::rti1516_2025::fedpro::AttributeSetRegionSetPair* AttributeSetRegionSetPairList::mutable_attributesetregionsetpair(int index) {
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributeSetRegionSetPairList.AttributeSetRegionSetPair)
  return _impl_.attributesetregionsetpair_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::AttributeSetRegionSetPair >*
AttributeSetRegionSetPairList::mutable_attributesetregionsetpair() {
  // @@protoc_insertion_point(field_mutable_list:rti1516_2025.fedpro.AttributeSetRegionSetPairList.AttributeSetRegionSetPair)
  return &_impl_.attributesetregionsetpair_;
}
inline const ::rti1516_2025::fedpro::AttributeSetRegionSetPair& AttributeSetRegionSetPairList::_internal_attributesetregionsetpair(int index) const {
  return _impl_.attributesetregionsetpair_.Get(index);
}
inline const ::rti1516_2025::fedpro::AttributeSetRegionSetPair& AttributeSetRegionSetPairList::attributesetregionsetpair(int index) const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributeSetRegionSetPairList.AttributeSetRegionSetPair)
  return _internal_attributesetregionsetpair(index);
}
inline ::rti1516_2025::fedpro::AttributeSetRegionSetPair* AttributeSetRegionSetPairList::_internal_add_attributesetregionsetpair() {
  return _impl_.attributesetregionsetpair_.Add();
}
inline ::rti1516_2025::fedpro::AttributeSetRegionSetPair* AttributeSetRegionSetPairList::add_attributesetregionsetpair() {
  ::rti1516_2025::fedpro::AttributeSetRegionSetPair* _add = _internal_add_attributesetregionsetpair();
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.AttributeSetRegionSetPairList.AttributeSetRegionSetPair)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::AttributeSetRegionSetPair >&
AttributeSetRegionSetPairList::attributesetregionsetpair() const {
  // @@protoc_insertion_point(field_list:rti1516_2025.fedpro.AttributeSetRegionSetPairList.AttributeSetRegionSetPair)
  return _impl_.attributesetregionsetpair_;
}

// -------------------------------------------------------------------

// InteractionClassHandleSet

// repeated .rti1516_2025.fedpro.InteractionClassHandle interactionClassHandle = 1;
inline int InteractionClassHandleSet::_internal_interactionclasshandle_size() const {
  return _impl_.interactionclasshandle_.size();
}
inline int InteractionClassHandleSet::interactionclasshandle_size() const {
  return _internal_interactionclasshandle_size();
}
inline void InteractionClassHandleSet::clear_interactionclasshandle() {
  _impl_.interactionclasshandle_.Clear();
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* InteractionClassHandleSet::mutable_interactionclasshandle(int index) {
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.InteractionClassHandleSet.interactionClassHandle)
  return _impl_.interactionclasshandle_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::InteractionClassHandle >*
InteractionClassHandleSet::mutable_interactionclasshandle() {
  // @@protoc_insertion_point(field_mutable_list:rti1516_2025.fedpro.InteractionClassHandleSet.interactionClassHandle)
  return &_impl_.interactionclasshandle_;
}
inline const ::rti1516_2025::fedpro::InteractionClassHandle& InteractionClassHandleSet::_internal_interactionclasshandle(int index) const {
  return _impl_.interactionclasshandle_.Get(index);
}
inline const ::rti1516_2025::fedpro::InteractionClassHandle& InteractionClassHandleSet::interactionclasshandle(int index) const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.InteractionClassHandleSet.interactionClassHandle)
  return _internal_interactionclasshandle(index);
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* InteractionClassHandleSet::_internal_add_interactionclasshandle() {
  return _impl_.interactionclasshandle_.Add();
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* InteractionClassHandleSet::add_interactionclasshandle() {
  ::rti1516_2025::fedpro::InteractionClassHandle* _add = _internal_add_interactionclasshandle();
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.InteractionClassHandleSet.interactionClassHandle)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::InteractionClassHandle >&
InteractionClassHandleSet::interactionclasshandle() const {
  // @@protoc_insertion_point(field_list:rti1516_2025.fedpro.InteractionClassHandleSet.interactionClassHandle)
  return _impl_.interactionclasshandle_;
}

// -------------------------------------------------------------------

// RangeBounds

// uint32 lower = 1;
inline void RangeBounds::clear_lower() {
  _impl_.lower_ = 0u;
}
inline uint32_t RangeBounds::_internal_lower() const {
  return _impl_.lower_;
}
inline uint32_t RangeBounds::lower() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RangeBounds.lower)
  return _internal_lower();
}
inline void RangeBounds::_internal_set_lower(uint32_t value) {
  
  _impl_.lower_ = value;
}
inline void RangeBounds::set_lower(uint32_t value) {
  _internal_set_lower(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.RangeBounds.lower)
}

// uint32 upper = 2;
inline void RangeBounds::clear_upper() {
  _impl_.upper_ = 0u;
}
inline uint32_t RangeBounds::_internal_upper() const {
  return _impl_.upper_;
}
inline uint32_t RangeBounds::upper() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RangeBounds.upper)
  return _internal_upper();
}
inline void RangeBounds::_internal_set_upper(uint32_t value) {
  
  _impl_.upper_ = value;
}
inline void RangeBounds::set_upper(uint32_t value) {
  _internal_set_upper(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.RangeBounds.upper)
}

// -------------------------------------------------------------------

// DimensionAndRange

// .rti1516_2025.fedpro.DimensionHandle dimensionHandle = 1;
inline bool DimensionAndRange::_internal_has_dimensionhandle() const {
  return this != internal_default_instance() && _impl_.dimensionhandle_ != nullptr;
}
inline bool DimensionAndRange::has_dimensionhandle() const {
  return _internal_has_dimensionhandle();
}
inline void DimensionAndRange::clear_dimensionhandle() {
  if (GetArenaForAllocation() == nullptr && _impl_.dimensionhandle_ != nullptr) {
    delete _impl_.dimensionhandle_;
  }
  _impl_.dimensionhandle_ = nullptr;
}
inline const ::rti1516_2025::fedpro::DimensionHandle& DimensionAndRange::_internal_dimensionhandle() const {
  const ::rti1516_2025::fedpro::DimensionHandle* p = _impl_.dimensionhandle_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::DimensionHandle&>(
      ::rti1516_2025::fedpro::_DimensionHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::DimensionHandle& DimensionAndRange::dimensionhandle() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.DimensionAndRange.dimensionHandle)
  return _internal_dimensionhandle();
}
inline void DimensionAndRange::unsafe_arena_set_allocated_dimensionhandle(
    ::rti1516_2025::fedpro::DimensionHandle* dimensionhandle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dimensionhandle_);
  }
  _impl_.dimensionhandle_ = dimensionhandle;
  if (dimensionhandle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.DimensionAndRange.dimensionHandle)
}
inline ::rti1516_2025::fedpro::DimensionHandle* DimensionAndRange::release_dimensionhandle() {
  
  ::rti1516_2025::fedpro::DimensionHandle* temp = _impl_.dimensionhandle_;
  _impl_.dimensionhandle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::DimensionHandle* DimensionAndRange::unsafe_arena_release_dimensionhandle() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.DimensionAndRange.dimensionHandle)
  
  ::rti1516_2025::fedpro::DimensionHandle* temp = _impl_.dimensionhandle_;
  _impl_.dimensionhandle_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::DimensionHandle* DimensionAndRange::_internal_mutable_dimensionhandle() {
  
  if (_impl_.dimensionhandle_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::DimensionHandle>(GetArenaForAllocation());
    _impl_.dimensionhandle_ = p;
  }
  return _impl_.dimensionhandle_;
}
inline ::rti1516_2025::fedpro::DimensionHandle* DimensionAndRange::mutable_dimensionhandle() {
  ::rti1516_2025::fedpro::DimensionHandle* _msg = _internal_mutable_dimensionhandle();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.DimensionAndRange.dimensionHandle)
  return _msg;
}
inline void DimensionAndRange::set_allocated_dimensionhandle(::rti1516_2025::fedpro::DimensionHandle* dimensionhandle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dimensionhandle_;
  }
  if (dimensionhandle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dimensionhandle);
    if (message_arena != submessage_arena) {
      dimensionhandle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dimensionhandle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dimensionhandle_ = dimensionhandle;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.DimensionAndRange.dimensionHandle)
}

// .rti1516_2025.fedpro.RangeBounds rangeBounds = 2;
inline bool DimensionAndRange::_internal_has_rangebounds() const {
  return this != internal_default_instance() && _impl_.rangebounds_ != nullptr;
}
inline bool DimensionAndRange::has_rangebounds() const {
  return _internal_has_rangebounds();
}
inline void DimensionAndRange::clear_rangebounds() {
  if (GetArenaForAllocation() == nullptr && _impl_.rangebounds_ != nullptr) {
    delete _impl_.rangebounds_;
  }
  _impl_.rangebounds_ = nullptr;
}
inline const ::rti1516_2025::fedpro::RangeBounds& DimensionAndRange::_internal_rangebounds() const {
  const ::rti1516_2025::fedpro::RangeBounds* p = _impl_.rangebounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::RangeBounds&>(
      ::rti1516_2025::fedpro::_RangeBounds_default_instance_);
}
inline const ::rti1516_2025::fedpro::RangeBounds& DimensionAndRange::rangebounds() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.DimensionAndRange.rangeBounds)
  return _internal_rangebounds();
}
inline void DimensionAndRange::unsafe_arena_set_allocated_rangebounds(
    ::rti1516_2025::fedpro::RangeBounds* rangebounds) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rangebounds_);
  }
  _impl_.rangebounds_ = rangebounds;
  if (rangebounds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.DimensionAndRange.rangeBounds)
}
inline ::rti1516_2025::fedpro::RangeBounds* DimensionAndRange::release_rangebounds() {
  
  ::rti1516_2025::fedpro::RangeBounds* temp = _impl_.rangebounds_;
  _impl_.rangebounds_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::RangeBounds* DimensionAndRange::unsafe_arena_release_rangebounds() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.DimensionAndRange.rangeBounds)
  
  ::rti1516_2025::fedpro::RangeBounds* temp = _impl_.rangebounds_;
  _impl_.rangebounds_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::RangeBounds* DimensionAndRange::_internal_mutable_rangebounds() {
  
  if (_impl_.rangebounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::RangeBounds>(GetArenaForAllocation());
    _impl_.rangebounds_ = p;
  }
  return _impl_.rangebounds_;
}
inline ::rti1516_2025::fedpro::RangeBounds* DimensionAndRange::mutable_rangebounds() {
  ::rti1516_2025::fedpro::RangeBounds* _msg = _internal_mutable_rangebounds();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.DimensionAndRange.rangeBounds)
  return _msg;
}
inline void DimensionAndRange::set_allocated_rangebounds(::rti1516_2025::fedpro::RangeBounds* rangebounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rangebounds_;
  }
  if (rangebounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rangebounds);
    if (message_arena != submessage_arena) {
      rangebounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rangebounds, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rangebounds_ = rangebounds;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.DimensionAndRange.rangeBounds)
}

// -------------------------------------------------------------------

// ConveyedRegion

// repeated .rti1516_2025.fedpro.DimensionAndRange dimensionAndRange = 1;
inline int ConveyedRegion::_internal_dimensionandrange_size() const {
  return _impl_.dimensionandrange_.size();
}
inline int ConveyedRegion::dimensionandrange_size() const {
  return _internal_dimensionandrange_size();
}
inline void ConveyedRegion::clear_dimensionandrange() {
  _impl_.dimensionandrange_.Clear();
}
inline ::rti1516_2025::fedpro::DimensionAndRange* ConveyedRegion::mutable_dimensionandrange(int index) {
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ConveyedRegion.dimensionAndRange)
  return _impl_.dimensionandrange_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::DimensionAndRange >*
ConveyedRegion::mutable_dimensionandrange() {
  // @@protoc_insertion_point(field_mutable_list:rti1516_2025.fedpro.ConveyedRegion.dimensionAndRange)
  return &_impl_.dimensionandrange_;
}
inline const ::rti1516_2025::fedpro::DimensionAndRange& ConveyedRegion::_internal_dimensionandrange(int index) const {
  return _impl_.dimensionandrange_.Get(index);
}
inline const ::rti1516_2025::fedpro::DimensionAndRange& ConveyedRegion::dimensionandrange(int index) const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ConveyedRegion.dimensionAndRange)
  return _internal_dimensionandrange(index);
}
inline ::rti1516_2025::fedpro::DimensionAndRange* ConveyedRegion::_internal_add_dimensionandrange() {
  return _impl_.dimensionandrange_.Add();
}
inline ::rti1516_2025::fedpro::DimensionAndRange* ConveyedRegion::add_dimensionandrange() {
  ::rti1516_2025::fedpro::DimensionAndRange* _add = _internal_add_dimensionandrange();
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.ConveyedRegion.dimensionAndRange)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::DimensionAndRange >&
ConveyedRegion::dimensionandrange() const {
  // @@protoc_insertion_point(field_list:rti1516_2025.fedpro.ConveyedRegion.dimensionAndRange)
  return _impl_.dimensionandrange_;
}

// -------------------------------------------------------------------

// ConveyedRegionSet

// repeated .rti1516_2025.fedpro.ConveyedRegion conveyedRegions = 1;
inline int ConveyedRegionSet::_internal_conveyedregions_size() const {
  return _impl_.conveyedregions_.size();
}
inline int ConveyedRegionSet::conveyedregions_size() const {
  return _internal_conveyedregions_size();
}
inline void ConveyedRegionSet::clear_conveyedregions() {
  _impl_.conveyedregions_.Clear();
}
inline ::rti1516_2025::fedpro::ConveyedRegion* ConveyedRegionSet::mutable_conveyedregions(int index) {
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ConveyedRegionSet.conveyedRegions)
  return _impl_.conveyedregions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::ConveyedRegion >*
ConveyedRegionSet::mutable_conveyedregions() {
  // @@protoc_insertion_point(field_mutable_list:rti1516_2025.fedpro.ConveyedRegionSet.conveyedRegions)
  return &_impl_.conveyedregions_;
}
inline const ::rti1516_2025::fedpro::ConveyedRegion& ConveyedRegionSet::_internal_conveyedregions(int index) const {
  return _impl_.conveyedregions_.Get(index);
}
inline const ::rti1516_2025::fedpro::ConveyedRegion& ConveyedRegionSet::conveyedregions(int index) const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ConveyedRegionSet.conveyedRegions)
  return _internal_conveyedregions(index);
}
inline ::rti1516_2025::fedpro::ConveyedRegion* ConveyedRegionSet::_internal_add_conveyedregions() {
  return _impl_.conveyedregions_.Add();
}
inline ::rti1516_2025::fedpro::ConveyedRegion* ConveyedRegionSet::add_conveyedregions() {
  ::rti1516_2025::fedpro::ConveyedRegion* _add = _internal_add_conveyedregions();
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.ConveyedRegionSet.conveyedRegions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::ConveyedRegion >&
ConveyedRegionSet::conveyedregions() const {
  // @@protoc_insertion_point(field_list:rti1516_2025.fedpro.ConveyedRegionSet.conveyedRegions)
  return _impl_.conveyedregions_;
}

// -------------------------------------------------------------------

// SupplementalReflectInfo

// .rti1516_2025.fedpro.FederateHandle producingFederate = 1;
inline bool SupplementalReflectInfo::_internal_has_producingfederate() const {
  return this != internal_default_instance() && _impl_.producingfederate_ != nullptr;
}
inline bool SupplementalReflectInfo::has_producingfederate() const {
  return _internal_has_producingfederate();
}
inline void SupplementalReflectInfo::clear_producingfederate() {
  if (GetArenaForAllocation() == nullptr && _impl_.producingfederate_ != nullptr) {
    delete _impl_.producingfederate_;
  }
  _impl_.producingfederate_ = nullptr;
}
inline const ::rti1516_2025::fedpro::FederateHandle& SupplementalReflectInfo::_internal_producingfederate() const {
  const ::rti1516_2025::fedpro::FederateHandle* p = _impl_.producingfederate_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandle&>(
      ::rti1516_2025::fedpro::_FederateHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandle& SupplementalReflectInfo::producingfederate() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.SupplementalReflectInfo.producingFederate)
  return _internal_producingfederate();
}
inline void SupplementalReflectInfo::unsafe_arena_set_allocated_producingfederate(
    ::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  _impl_.producingfederate_ = producingfederate;
  if (producingfederate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.SupplementalReflectInfo.producingFederate)
}
inline ::rti1516_2025::fedpro::FederateHandle* SupplementalReflectInfo::release_producingfederate() {
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* SupplementalReflectInfo::unsafe_arena_release_producingfederate() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.SupplementalReflectInfo.producingFederate)
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* SupplementalReflectInfo::_internal_mutable_producingfederate() {
  
  if (_impl_.producingfederate_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(GetArenaForAllocation());
    _impl_.producingfederate_ = p;
  }
  return _impl_.producingfederate_;
}
inline ::rti1516_2025::fedpro::FederateHandle* SupplementalReflectInfo::mutable_producingfederate() {
  ::rti1516_2025::fedpro::FederateHandle* _msg = _internal_mutable_producingfederate();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.SupplementalReflectInfo.producingFederate)
  return _msg;
}
inline void SupplementalReflectInfo::set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.producingfederate_;
  }
  if (producingfederate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(producingfederate);
    if (message_arena != submessage_arena) {
      producingfederate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, producingfederate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.producingfederate_ = producingfederate;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.SupplementalReflectInfo.producingFederate)
}

// bool conveyedRegionsIsValid = 2;
inline void SupplementalReflectInfo::clear_conveyedregionsisvalid() {
  _impl_.conveyedregionsisvalid_ = false;
}
inline bool SupplementalReflectInfo::_internal_conveyedregionsisvalid() const {
  return _impl_.conveyedregionsisvalid_;
}
inline bool SupplementalReflectInfo::conveyedregionsisvalid() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.SupplementalReflectInfo.conveyedRegionsIsValid)
  return _internal_conveyedregionsisvalid();
}
inline void SupplementalReflectInfo::_internal_set_conveyedregionsisvalid(bool value) {
  
  _impl_.conveyedregionsisvalid_ = value;
}
inline void SupplementalReflectInfo::set_conveyedregionsisvalid(bool value) {
  _internal_set_conveyedregionsisvalid(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.SupplementalReflectInfo.conveyedRegionsIsValid)
}

// .rti1516_2025.fedpro.ConveyedRegionSet conveyedRegions = 3;
inline bool SupplementalReflectInfo::_internal_has_conveyedregions() const {
  return this != internal_default_instance() && _impl_.conveyedregions_ != nullptr;
}
inline bool SupplementalReflectInfo::has_conveyedregions() const {
  return _internal_has_conveyedregions();
}
inline void SupplementalReflectInfo::clear_conveyedregions() {
  if (GetArenaForAllocation() == nullptr && _impl_.conveyedregions_ != nullptr) {
    delete _impl_.conveyedregions_;
  }
  _impl_.conveyedregions_ = nullptr;
}
inline const ::rti1516_2025::fedpro::ConveyedRegionSet& SupplementalReflectInfo::_internal_conveyedregions() const {
  const ::rti1516_2025::fedpro::ConveyedRegionSet* p = _impl_.conveyedregions_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ConveyedRegionSet&>(
      ::rti1516_2025::fedpro::_ConveyedRegionSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::ConveyedRegionSet& SupplementalReflectInfo::conveyedregions() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.SupplementalReflectInfo.conveyedRegions)
  return _internal_conveyedregions();
}
inline void SupplementalReflectInfo::unsafe_arena_set_allocated_conveyedregions(
    ::rti1516_2025::fedpro::ConveyedRegionSet* conveyedregions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conveyedregions_);
  }
  _impl_.conveyedregions_ = conveyedregions;
  if (conveyedregions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.SupplementalReflectInfo.conveyedRegions)
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* SupplementalReflectInfo::release_conveyedregions() {
  
  ::rti1516_2025::fedpro::ConveyedRegionSet* temp = _impl_.conveyedregions_;
  _impl_.conveyedregions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* SupplementalReflectInfo::unsafe_arena_release_conveyedregions() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.SupplementalReflectInfo.conveyedRegions)
  
  ::rti1516_2025::fedpro::ConveyedRegionSet* temp = _impl_.conveyedregions_;
  _impl_.conveyedregions_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* SupplementalReflectInfo::_internal_mutable_conveyedregions() {
  
  if (_impl_.conveyedregions_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ConveyedRegionSet>(GetArenaForAllocation());
    _impl_.conveyedregions_ = p;
  }
  return _impl_.conveyedregions_;
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* SupplementalReflectInfo::mutable_conveyedregions() {
  ::rti1516_2025::fedpro::ConveyedRegionSet* _msg = _internal_mutable_conveyedregions();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.SupplementalReflectInfo.conveyedRegions)
  return _msg;
}
inline void SupplementalReflectInfo::set_allocated_conveyedregions(::rti1516_2025::fedpro::ConveyedRegionSet* conveyedregions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.conveyedregions_;
  }
  if (conveyedregions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(conveyedregions);
    if (message_arena != submessage_arena) {
      conveyedregions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conveyedregions, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.conveyedregions_ = conveyedregions;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.SupplementalReflectInfo.conveyedRegions)
}

// -------------------------------------------------------------------

// SupplementalReceiveInfo

// .rti1516_2025.fedpro.FederateHandle producingFederate = 1;
inline bool SupplementalReceiveInfo::_internal_has_producingfederate() const {
  return this != internal_default_instance() && _impl_.producingfederate_ != nullptr;
}
inline bool SupplementalReceiveInfo::has_producingfederate() const {
  return _internal_has_producingfederate();
}
inline void SupplementalReceiveInfo::clear_producingfederate() {
  if (GetArenaForAllocation() == nullptr && _impl_.producingfederate_ != nullptr) {
    delete _impl_.producingfederate_;
  }
  _impl_.producingfederate_ = nullptr;
}
inline const ::rti1516_2025::fedpro::FederateHandle& SupplementalReceiveInfo::_internal_producingfederate() const {
  const ::rti1516_2025::fedpro::FederateHandle* p = _impl_.producingfederate_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandle&>(
      ::rti1516_2025::fedpro::_FederateHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandle& SupplementalReceiveInfo::producingfederate() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.SupplementalReceiveInfo.producingFederate)
  return _internal_producingfederate();
}
inline void SupplementalReceiveInfo::unsafe_arena_set_allocated_producingfederate(
    ::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  _impl_.producingfederate_ = producingfederate;
  if (producingfederate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.SupplementalReceiveInfo.producingFederate)
}
inline ::rti1516_2025::fedpro::FederateHandle* SupplementalReceiveInfo::release_producingfederate() {
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* SupplementalReceiveInfo::unsafe_arena_release_producingfederate() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.SupplementalReceiveInfo.producingFederate)
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* SupplementalReceiveInfo::_internal_mutable_producingfederate() {
  
  if (_impl_.producingfederate_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(GetArenaForAllocation());
    _impl_.producingfederate_ = p;
  }
  return _impl_.producingfederate_;
}
inline ::rti1516_2025::fedpro::FederateHandle* SupplementalReceiveInfo::mutable_producingfederate() {
  ::rti1516_2025::fedpro::FederateHandle* _msg = _internal_mutable_producingfederate();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.SupplementalReceiveInfo.producingFederate)
  return _msg;
}
inline void SupplementalReceiveInfo::set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.producingfederate_;
  }
  if (producingfederate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(producingfederate);
    if (message_arena != submessage_arena) {
      producingfederate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, producingfederate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.producingfederate_ = producingfederate;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.SupplementalReceiveInfo.producingFederate)
}

// bool conveyedRegionsIsValid = 2;
inline void SupplementalReceiveInfo::clear_conveyedregionsisvalid() {
  _impl_.conveyedregionsisvalid_ = false;
}
inline bool SupplementalReceiveInfo::_internal_conveyedregionsisvalid() const {
  return _impl_.conveyedregionsisvalid_;
}
inline bool SupplementalReceiveInfo::conveyedregionsisvalid() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.SupplementalReceiveInfo.conveyedRegionsIsValid)
  return _internal_conveyedregionsisvalid();
}
inline void SupplementalReceiveInfo::_internal_set_conveyedregionsisvalid(bool value) {
  
  _impl_.conveyedregionsisvalid_ = value;
}
inline void SupplementalReceiveInfo::set_conveyedregionsisvalid(bool value) {
  _internal_set_conveyedregionsisvalid(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.SupplementalReceiveInfo.conveyedRegionsIsValid)
}

// .rti1516_2025.fedpro.ConveyedRegionSet conveyedRegions = 3;
inline bool SupplementalReceiveInfo::_internal_has_conveyedregions() const {
  return this != internal_default_instance() && _impl_.conveyedregions_ != nullptr;
}
inline bool SupplementalReceiveInfo::has_conveyedregions() const {
  return _internal_has_conveyedregions();
}
inline void SupplementalReceiveInfo::clear_conveyedregions() {
  if (GetArenaForAllocation() == nullptr && _impl_.conveyedregions_ != nullptr) {
    delete _impl_.conveyedregions_;
  }
  _impl_.conveyedregions_ = nullptr;
}
inline const ::rti1516_2025::fedpro::ConveyedRegionSet& SupplementalReceiveInfo::_internal_conveyedregions() const {
  const ::rti1516_2025::fedpro::ConveyedRegionSet* p = _impl_.conveyedregions_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ConveyedRegionSet&>(
      ::rti1516_2025::fedpro::_ConveyedRegionSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::ConveyedRegionSet& SupplementalReceiveInfo::conveyedregions() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.SupplementalReceiveInfo.conveyedRegions)
  return _internal_conveyedregions();
}
inline void SupplementalReceiveInfo::unsafe_arena_set_allocated_conveyedregions(
    ::rti1516_2025::fedpro::ConveyedRegionSet* conveyedregions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conveyedregions_);
  }
  _impl_.conveyedregions_ = conveyedregions;
  if (conveyedregions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.SupplementalReceiveInfo.conveyedRegions)
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* SupplementalReceiveInfo::release_conveyedregions() {
  
  ::rti1516_2025::fedpro::ConveyedRegionSet* temp = _impl_.conveyedregions_;
  _impl_.conveyedregions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* SupplementalReceiveInfo::unsafe_arena_release_conveyedregions() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.SupplementalReceiveInfo.conveyedRegions)
  
  ::rti1516_2025::fedpro::ConveyedRegionSet* temp = _impl_.conveyedregions_;
  _impl_.conveyedregions_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* SupplementalReceiveInfo::_internal_mutable_conveyedregions() {
  
  if (_impl_.conveyedregions_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ConveyedRegionSet>(GetArenaForAllocation());
    _impl_.conveyedregions_ = p;
  }
  return _impl_.conveyedregions_;
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* SupplementalReceiveInfo::mutable_conveyedregions() {
  ::rti1516_2025::fedpro::ConveyedRegionSet* _msg = _internal_mutable_conveyedregions();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.SupplementalReceiveInfo.conveyedRegions)
  return _msg;
}
inline void SupplementalReceiveInfo::set_allocated_conveyedregions(::rti1516_2025::fedpro::ConveyedRegionSet* conveyedregions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.conveyedregions_;
  }
  if (conveyedregions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(conveyedregions);
    if (message_arena != submessage_arena) {
      conveyedregions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conveyedregions, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.conveyedregions_ = conveyedregions;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.SupplementalReceiveInfo.conveyedRegions)
}

// -------------------------------------------------------------------

// FomModule

// .rti1516_2025.fedpro.FileFomModule file = 1;
inline bool FomModule::_internal_has_file() const {
  return fomModule_case() == kFile;
}
inline bool FomModule::has_file() const {
  return _internal_has_file();
}
inline void FomModule::set_has_file() {
  _impl_._oneof_case_[0] = kFile;
}
inline void FomModule::clear_file() {
  if (_internal_has_file()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.fomModule_.file_;
    }
    clear_has_fomModule();
  }
}
inline ::rti1516_2025::fedpro::FileFomModule* FomModule::release_file() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FomModule.file)
  if (_internal_has_file()) {
    clear_has_fomModule();
    ::rti1516_2025::fedpro::FileFomModule* temp = _impl_.fomModule_.file_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.fomModule_.file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::FileFomModule& FomModule::_internal_file() const {
  return _internal_has_file()
      ? *_impl_.fomModule_.file_
      : reinterpret_cast< ::rti1516_2025::fedpro::FileFomModule&>(::rti1516_2025::fedpro::_FileFomModule_default_instance_);
}
inline const ::rti1516_2025::fedpro::FileFomModule& FomModule::file() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FomModule.file)
  return _internal_file();
}
inline ::rti1516_2025::fedpro::FileFomModule* FomModule::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.FomModule.file)
  if (_internal_has_file()) {
    clear_has_fomModule();
    ::rti1516_2025::fedpro::FileFomModule* temp = _impl_.fomModule_.file_;
    _impl_.fomModule_.file_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FomModule::unsafe_arena_set_allocated_file(::rti1516_2025::fedpro::FileFomModule* file) {
  clear_fomModule();
  if (file) {
    set_has_file();
    _impl_.fomModule_.file_ = file;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.FomModule.file)
}
inline ::rti1516_2025::fedpro::FileFomModule* FomModule::_internal_mutable_file() {
  if (!_internal_has_file()) {
    clear_fomModule();
    set_has_file();
    _impl_.fomModule_.file_ = CreateMaybeMessage< ::rti1516_2025::fedpro::FileFomModule >(GetArenaForAllocation());
  }
  return _impl_.fomModule_.file_;
}
inline ::rti1516_2025::fedpro::FileFomModule* FomModule::mutable_file() {
  ::rti1516_2025::fedpro::FileFomModule* _msg = _internal_mutable_file();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FomModule.file)
  return _msg;
}

// bytes compressedModule = 2;
inline bool FomModule::_internal_has_compressedmodule() const {
  return fomModule_case() == kCompressedModule;
}
inline bool FomModule::has_compressedmodule() const {
  return _internal_has_compressedmodule();
}
inline void FomModule::set_has_compressedmodule() {
  _impl_._oneof_case_[0] = kCompressedModule;
}
inline void FomModule::clear_compressedmodule() {
  if (_internal_has_compressedmodule()) {
    _impl_.fomModule_.compressedmodule_.Destroy();
    clear_has_fomModule();
  }
}
inline const std::string& FomModule::compressedmodule() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FomModule.compressedModule)
  return _internal_compressedmodule();
}
template <typename ArgT0, typename... ArgT>
inline void FomModule::set_compressedmodule(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_compressedmodule()) {
    clear_fomModule();
    set_has_compressedmodule();
    _impl_.fomModule_.compressedmodule_.InitDefault();
  }
  _impl_.fomModule_.compressedmodule_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.FomModule.compressedModule)
}
inline std::string* FomModule::mutable_compressedmodule() {
  std::string* _s = _internal_mutable_compressedmodule();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FomModule.compressedModule)
  return _s;
}
inline const std::string& FomModule::_internal_compressedmodule() const {
  if (_internal_has_compressedmodule()) {
    return _impl_.fomModule_.compressedmodule_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void FomModule::_internal_set_compressedmodule(const std::string& value) {
  if (!_internal_has_compressedmodule()) {
    clear_fomModule();
    set_has_compressedmodule();
    _impl_.fomModule_.compressedmodule_.InitDefault();
  }
  _impl_.fomModule_.compressedmodule_.Set(value, GetArenaForAllocation());
}
inline std::string* FomModule::_internal_mutable_compressedmodule() {
  if (!_internal_has_compressedmodule()) {
    clear_fomModule();
    set_has_compressedmodule();
    _impl_.fomModule_.compressedmodule_.InitDefault();
  }
  return _impl_.fomModule_.compressedmodule_.Mutable(      GetArenaForAllocation());
}
inline std::string* FomModule::release_compressedmodule() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FomModule.compressedModule)
  if (_internal_has_compressedmodule()) {
    clear_has_fomModule();
    return _impl_.fomModule_.compressedmodule_.Release();
  } else {
    return nullptr;
  }
}
inline void FomModule::set_allocated_compressedmodule(std::string* compressedmodule) {
  if (has_fomModule()) {
    clear_fomModule();
  }
  if (compressedmodule != nullptr) {
    set_has_compressedmodule();
    _impl_.fomModule_.compressedmodule_.InitAllocated(compressedmodule, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FomModule.compressedModule)
}

// string url = 3;
inline bool FomModule::_internal_has_url() const {
  return fomModule_case() == kUrl;
}
inline bool FomModule::has_url() const {
  return _internal_has_url();
}
inline void FomModule::set_has_url() {
  _impl_._oneof_case_[0] = kUrl;
}
inline void FomModule::clear_url() {
  if (_internal_has_url()) {
    _impl_.fomModule_.url_.Destroy();
    clear_has_fomModule();
  }
}
inline const std::string& FomModule::url() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FomModule.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline void FomModule::set_url(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_url()) {
    clear_fomModule();
    set_has_url();
    _impl_.fomModule_.url_.InitDefault();
  }
  _impl_.fomModule_.url_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.FomModule.url)
}
inline std::string* FomModule::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FomModule.url)
  return _s;
}
inline const std::string& FomModule::_internal_url() const {
  if (_internal_has_url()) {
    return _impl_.fomModule_.url_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void FomModule::_internal_set_url(const std::string& value) {
  if (!_internal_has_url()) {
    clear_fomModule();
    set_has_url();
    _impl_.fomModule_.url_.InitDefault();
  }
  _impl_.fomModule_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* FomModule::_internal_mutable_url() {
  if (!_internal_has_url()) {
    clear_fomModule();
    set_has_url();
    _impl_.fomModule_.url_.InitDefault();
  }
  return _impl_.fomModule_.url_.Mutable(      GetArenaForAllocation());
}
inline std::string* FomModule::release_url() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FomModule.url)
  if (_internal_has_url()) {
    clear_has_fomModule();
    return _impl_.fomModule_.url_.Release();
  } else {
    return nullptr;
  }
}
inline void FomModule::set_allocated_url(std::string* url) {
  if (has_fomModule()) {
    clear_fomModule();
  }
  if (url != nullptr) {
    set_has_url();
    _impl_.fomModule_.url_.InitAllocated(url, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FomModule.url)
}

inline bool FomModule::has_fomModule() const {
  return fomModule_case() != FOMMODULE_NOT_SET;
}
inline void FomModule::clear_has_fomModule() {
  _impl_._oneof_case_[0] = FOMMODULE_NOT_SET;
}
inline FomModule::FomModuleCase FomModule::fomModule_case() const {
  return FomModule::FomModuleCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// FileFomModule

// string name = 1;
inline void FileFomModule::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FileFomModule::name() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FileFomModule.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileFomModule::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.FileFomModule.name)
}
inline std::string* FileFomModule::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FileFomModule.name)
  return _s;
}
inline const std::string& FileFomModule::_internal_name() const {
  return _impl_.name_.Get();
}
inline void FileFomModule::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileFomModule::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* FileFomModule::release_name() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FileFomModule.name)
  return _impl_.name_.Release();
}
inline void FileFomModule::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FileFomModule.name)
}

// bytes content = 2;
inline void FileFomModule::clear_content() {
  _impl_.content_.ClearToEmpty();
}
inline const std::string& FileFomModule::content() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FileFomModule.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileFomModule::set_content(ArgT0&& arg0, ArgT... args) {
 
 _impl_.content_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.FileFomModule.content)
}
inline std::string* FileFomModule::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FileFomModule.content)
  return _s;
}
inline const std::string& FileFomModule::_internal_content() const {
  return _impl_.content_.Get();
}
inline void FileFomModule::_internal_set_content(const std::string& value) {
  
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* FileFomModule::_internal_mutable_content() {
  
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* FileFomModule::release_content() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FileFomModule.content)
  return _impl_.content_.Release();
}
inline void FileFomModule::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FileFomModule.content)
}

// -------------------------------------------------------------------

// FomModuleSet

// repeated .rti1516_2025.fedpro.FomModule fomModule = 1;
inline int FomModuleSet::_internal_fommodule_size() const {
  return _impl_.fommodule_.size();
}
inline int FomModuleSet::fommodule_size() const {
  return _internal_fommodule_size();
}
inline void FomModuleSet::clear_fommodule() {
  _impl_.fommodule_.Clear();
}
inline ::rti1516_2025::fedpro::FomModule* FomModuleSet::mutable_fommodule(int index) {
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FomModuleSet.fomModule)
  return _impl_.fommodule_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FomModule >*
FomModuleSet::mutable_fommodule() {
  // @@protoc_insertion_point(field_mutable_list:rti1516_2025.fedpro.FomModuleSet.fomModule)
  return &_impl_.fommodule_;
}
inline const ::rti1516_2025::fedpro::FomModule& FomModuleSet::_internal_fommodule(int index) const {
  return _impl_.fommodule_.Get(index);
}
inline const ::rti1516_2025::fedpro::FomModule& FomModuleSet::fommodule(int index) const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FomModuleSet.fomModule)
  return _internal_fommodule(index);
}
inline ::rti1516_2025::fedpro::FomModule* FomModuleSet::_internal_add_fommodule() {
  return _impl_.fommodule_.Add();
}
inline ::rti1516_2025::fedpro::FomModule* FomModuleSet::add_fommodule() {
  ::rti1516_2025::fedpro::FomModule* _add = _internal_add_fommodule();
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.FomModuleSet.fomModule)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rti1516_2025::fedpro::FomModule >&
FomModuleSet::fommodule() const {
  // @@protoc_insertion_point(field_list:rti1516_2025.fedpro.FomModuleSet.fomModule)
  return _impl_.fommodule_;
}

// -------------------------------------------------------------------

// JoinResult

// .rti1516_2025.fedpro.FederateHandle federateHandle = 1;
inline bool JoinResult::_internal_has_federatehandle() const {
  return this != internal_default_instance() && _impl_.federatehandle_ != nullptr;
}
inline bool JoinResult::has_federatehandle() const {
  return _internal_has_federatehandle();
}
inline void JoinResult::clear_federatehandle() {
  if (GetArenaForAllocation() == nullptr && _impl_.federatehandle_ != nullptr) {
    delete _impl_.federatehandle_;
  }
  _impl_.federatehandle_ = nullptr;
}
inline const ::rti1516_2025::fedpro::FederateHandle& JoinResult::_internal_federatehandle() const {
  const ::rti1516_2025::fedpro::FederateHandle* p = _impl_.federatehandle_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandle&>(
      ::rti1516_2025::fedpro::_FederateHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandle& JoinResult::federatehandle() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.JoinResult.federateHandle)
  return _internal_federatehandle();
}
inline void JoinResult::unsafe_arena_set_allocated_federatehandle(
    ::rti1516_2025::fedpro::FederateHandle* federatehandle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.federatehandle_);
  }
  _impl_.federatehandle_ = federatehandle;
  if (federatehandle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.JoinResult.federateHandle)
}
inline ::rti1516_2025::fedpro::FederateHandle* JoinResult::release_federatehandle() {
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.federatehandle_;
  _impl_.federatehandle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* JoinResult::unsafe_arena_release_federatehandle() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.JoinResult.federateHandle)
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.federatehandle_;
  _impl_.federatehandle_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* JoinResult::_internal_mutable_federatehandle() {
  
  if (_impl_.federatehandle_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(GetArenaForAllocation());
    _impl_.federatehandle_ = p;
  }
  return _impl_.federatehandle_;
}
inline ::rti1516_2025::fedpro::FederateHandle* JoinResult::mutable_federatehandle() {
  ::rti1516_2025::fedpro::FederateHandle* _msg = _internal_mutable_federatehandle();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.JoinResult.federateHandle)
  return _msg;
}
inline void JoinResult::set_allocated_federatehandle(::rti1516_2025::fedpro::FederateHandle* federatehandle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.federatehandle_;
  }
  if (federatehandle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(federatehandle);
    if (message_arena != submessage_arena) {
      federatehandle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, federatehandle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.federatehandle_ = federatehandle;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.JoinResult.federateHandle)
}

// string logicalTimeImplementationName = 2;
inline void JoinResult::clear_logicaltimeimplementationname() {
  _impl_.logicaltimeimplementationname_.ClearToEmpty();
}
inline const std::string& JoinResult::logicaltimeimplementationname() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.JoinResult.logicalTimeImplementationName)
  return _internal_logicaltimeimplementationname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinResult::set_logicaltimeimplementationname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.logicaltimeimplementationname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.JoinResult.logicalTimeImplementationName)
}
inline std::string* JoinResult::mutable_logicaltimeimplementationname() {
  std::string* _s = _internal_mutable_logicaltimeimplementationname();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.JoinResult.logicalTimeImplementationName)
  return _s;
}
inline const std::string& JoinResult::_internal_logicaltimeimplementationname() const {
  return _impl_.logicaltimeimplementationname_.Get();
}
inline void JoinResult::_internal_set_logicaltimeimplementationname(const std::string& value) {
  
  _impl_.logicaltimeimplementationname_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinResult::_internal_mutable_logicaltimeimplementationname() {
  
  return _impl_.logicaltimeimplementationname_.Mutable(GetArenaForAllocation());
}
inline std::string* JoinResult::release_logicaltimeimplementationname() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.JoinResult.logicalTimeImplementationName)
  return _impl_.logicaltimeimplementationname_.Release();
}
inline void JoinResult::set_allocated_logicaltimeimplementationname(std::string* logicaltimeimplementationname) {
  if (logicaltimeimplementationname != nullptr) {
    
  } else {
    
  }
  _impl_.logicaltimeimplementationname_.SetAllocated(logicaltimeimplementationname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.logicaltimeimplementationname_.IsDefault()) {
    _impl_.logicaltimeimplementationname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.JoinResult.logicalTimeImplementationName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fedpro
}  // namespace rti1516_2025

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::rti1516_2025::fedpro::AdditionalSettingsResultCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rti1516_2025::fedpro::AdditionalSettingsResultCode>() {
  return ::rti1516_2025::fedpro::AdditionalSettingsResultCode_descriptor();
}
template <> struct is_proto_enum< ::rti1516_2025::fedpro::CallbackModel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rti1516_2025::fedpro::CallbackModel>() {
  return ::rti1516_2025::fedpro::CallbackModel_descriptor();
}
template <> struct is_proto_enum< ::rti1516_2025::fedpro::ResignAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rti1516_2025::fedpro::ResignAction>() {
  return ::rti1516_2025::fedpro::ResignAction_descriptor();
}
template <> struct is_proto_enum< ::rti1516_2025::fedpro::SynchronizationPointFailureReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rti1516_2025::fedpro::SynchronizationPointFailureReason>() {
  return ::rti1516_2025::fedpro::SynchronizationPointFailureReason_descriptor();
}
template <> struct is_proto_enum< ::rti1516_2025::fedpro::SaveFailureReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rti1516_2025::fedpro::SaveFailureReason>() {
  return ::rti1516_2025::fedpro::SaveFailureReason_descriptor();
}
template <> struct is_proto_enum< ::rti1516_2025::fedpro::RestoreFailureReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rti1516_2025::fedpro::RestoreFailureReason>() {
  return ::rti1516_2025::fedpro::RestoreFailureReason_descriptor();
}
template <> struct is_proto_enum< ::rti1516_2025::fedpro::SaveStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rti1516_2025::fedpro::SaveStatus>() {
  return ::rti1516_2025::fedpro::SaveStatus_descriptor();
}
template <> struct is_proto_enum< ::rti1516_2025::fedpro::RestoreStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rti1516_2025::fedpro::RestoreStatus>() {
  return ::rti1516_2025::fedpro::RestoreStatus_descriptor();
}
template <> struct is_proto_enum< ::rti1516_2025::fedpro::OrderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rti1516_2025::fedpro::OrderType>() {
  return ::rti1516_2025::fedpro::OrderType_descriptor();
}
template <> struct is_proto_enum< ::rti1516_2025::fedpro::ServiceGroup> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rti1516_2025::fedpro::ServiceGroup>() {
  return ::rti1516_2025::fedpro::ServiceGroup_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_datatypes_2eproto
