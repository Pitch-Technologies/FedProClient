// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FederateAmbassador.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FederateAmbassador_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FederateAmbassador_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "datatypes.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FederateAmbassador_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FederateAmbassador_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FederateAmbassador_2eproto;
namespace rti1516_2025 {
namespace fedpro {
class AnnounceSynchronizationPoint;
struct AnnounceSynchronizationPointDefaultTypeInternal;
extern AnnounceSynchronizationPointDefaultTypeInternal _AnnounceSynchronizationPoint_default_instance_;
class AttributeIsNotOwned;
struct AttributeIsNotOwnedDefaultTypeInternal;
extern AttributeIsNotOwnedDefaultTypeInternal _AttributeIsNotOwned_default_instance_;
class AttributeIsOwnedByRTI;
struct AttributeIsOwnedByRTIDefaultTypeInternal;
extern AttributeIsOwnedByRTIDefaultTypeInternal _AttributeIsOwnedByRTI_default_instance_;
class AttributeOwnershipAcquisitionNotification;
struct AttributeOwnershipAcquisitionNotificationDefaultTypeInternal;
extern AttributeOwnershipAcquisitionNotificationDefaultTypeInternal _AttributeOwnershipAcquisitionNotification_default_instance_;
class AttributeOwnershipUnavailable;
struct AttributeOwnershipUnavailableDefaultTypeInternal;
extern AttributeOwnershipUnavailableDefaultTypeInternal _AttributeOwnershipUnavailable_default_instance_;
class AttributesInScope;
struct AttributesInScopeDefaultTypeInternal;
extern AttributesInScopeDefaultTypeInternal _AttributesInScope_default_instance_;
class AttributesOutOfScope;
struct AttributesOutOfScopeDefaultTypeInternal;
extern AttributesOutOfScopeDefaultTypeInternal _AttributesOutOfScope_default_instance_;
class CallbackRequest;
struct CallbackRequestDefaultTypeInternal;
extern CallbackRequestDefaultTypeInternal _CallbackRequest_default_instance_;
class CallbackResponse;
struct CallbackResponseDefaultTypeInternal;
extern CallbackResponseDefaultTypeInternal _CallbackResponse_default_instance_;
class CallbackSucceeded;
struct CallbackSucceededDefaultTypeInternal;
extern CallbackSucceededDefaultTypeInternal _CallbackSucceeded_default_instance_;
class ConfirmAttributeOwnershipAcquisitionCancellation;
struct ConfirmAttributeOwnershipAcquisitionCancellationDefaultTypeInternal;
extern ConfirmAttributeOwnershipAcquisitionCancellationDefaultTypeInternal _ConfirmAttributeOwnershipAcquisitionCancellation_default_instance_;
class ConfirmAttributeTransportationTypeChange;
struct ConfirmAttributeTransportationTypeChangeDefaultTypeInternal;
extern ConfirmAttributeTransportationTypeChangeDefaultTypeInternal _ConfirmAttributeTransportationTypeChange_default_instance_;
class ConfirmInteractionTransportationTypeChange;
struct ConfirmInteractionTransportationTypeChangeDefaultTypeInternal;
extern ConfirmInteractionTransportationTypeChangeDefaultTypeInternal _ConfirmInteractionTransportationTypeChange_default_instance_;
class ConnectionLost;
struct ConnectionLostDefaultTypeInternal;
extern ConnectionLostDefaultTypeInternal _ConnectionLost_default_instance_;
class DiscoverObjectInstance;
struct DiscoverObjectInstanceDefaultTypeInternal;
extern DiscoverObjectInstanceDefaultTypeInternal _DiscoverObjectInstance_default_instance_;
class FederateResigned;
struct FederateResignedDefaultTypeInternal;
extern FederateResignedDefaultTypeInternal _FederateResigned_default_instance_;
class FederationNotRestored;
struct FederationNotRestoredDefaultTypeInternal;
extern FederationNotRestoredDefaultTypeInternal _FederationNotRestored_default_instance_;
class FederationNotSaved;
struct FederationNotSavedDefaultTypeInternal;
extern FederationNotSavedDefaultTypeInternal _FederationNotSaved_default_instance_;
class FederationRestoreBegun;
struct FederationRestoreBegunDefaultTypeInternal;
extern FederationRestoreBegunDefaultTypeInternal _FederationRestoreBegun_default_instance_;
class FederationRestoreStatusResponse;
struct FederationRestoreStatusResponseDefaultTypeInternal;
extern FederationRestoreStatusResponseDefaultTypeInternal _FederationRestoreStatusResponse_default_instance_;
class FederationRestored;
struct FederationRestoredDefaultTypeInternal;
extern FederationRestoredDefaultTypeInternal _FederationRestored_default_instance_;
class FederationSaveStatusResponse;
struct FederationSaveStatusResponseDefaultTypeInternal;
extern FederationSaveStatusResponseDefaultTypeInternal _FederationSaveStatusResponse_default_instance_;
class FederationSaved;
struct FederationSavedDefaultTypeInternal;
extern FederationSavedDefaultTypeInternal _FederationSaved_default_instance_;
class FederationSynchronized;
struct FederationSynchronizedDefaultTypeInternal;
extern FederationSynchronizedDefaultTypeInternal _FederationSynchronized_default_instance_;
class FlushQueueGrant;
struct FlushQueueGrantDefaultTypeInternal;
extern FlushQueueGrantDefaultTypeInternal _FlushQueueGrant_default_instance_;
class InformAttributeOwnership;
struct InformAttributeOwnershipDefaultTypeInternal;
extern InformAttributeOwnershipDefaultTypeInternal _InformAttributeOwnership_default_instance_;
class InitiateFederateRestore;
struct InitiateFederateRestoreDefaultTypeInternal;
extern InitiateFederateRestoreDefaultTypeInternal _InitiateFederateRestore_default_instance_;
class InitiateFederateSave;
struct InitiateFederateSaveDefaultTypeInternal;
extern InitiateFederateSaveDefaultTypeInternal _InitiateFederateSave_default_instance_;
class InitiateFederateSaveWithTime;
struct InitiateFederateSaveWithTimeDefaultTypeInternal;
extern InitiateFederateSaveWithTimeDefaultTypeInternal _InitiateFederateSaveWithTime_default_instance_;
class MultipleObjectInstanceNameReservationFailed;
struct MultipleObjectInstanceNameReservationFailedDefaultTypeInternal;
extern MultipleObjectInstanceNameReservationFailedDefaultTypeInternal _MultipleObjectInstanceNameReservationFailed_default_instance_;
class MultipleObjectInstanceNameReservationSucceeded;
struct MultipleObjectInstanceNameReservationSucceededDefaultTypeInternal;
extern MultipleObjectInstanceNameReservationSucceededDefaultTypeInternal _MultipleObjectInstanceNameReservationSucceeded_default_instance_;
class ObjectInstanceNameReservationFailed;
struct ObjectInstanceNameReservationFailedDefaultTypeInternal;
extern ObjectInstanceNameReservationFailedDefaultTypeInternal _ObjectInstanceNameReservationFailed_default_instance_;
class ObjectInstanceNameReservationSucceeded;
struct ObjectInstanceNameReservationSucceededDefaultTypeInternal;
extern ObjectInstanceNameReservationSucceededDefaultTypeInternal _ObjectInstanceNameReservationSucceeded_default_instance_;
class ProvideAttributeValueUpdate;
struct ProvideAttributeValueUpdateDefaultTypeInternal;
extern ProvideAttributeValueUpdateDefaultTypeInternal _ProvideAttributeValueUpdate_default_instance_;
class ReceiveDirectedInteraction;
struct ReceiveDirectedInteractionDefaultTypeInternal;
extern ReceiveDirectedInteractionDefaultTypeInternal _ReceiveDirectedInteraction_default_instance_;
class ReceiveDirectedInteractionWithTime;
struct ReceiveDirectedInteractionWithTimeDefaultTypeInternal;
extern ReceiveDirectedInteractionWithTimeDefaultTypeInternal _ReceiveDirectedInteractionWithTime_default_instance_;
class ReceiveInteraction;
struct ReceiveInteractionDefaultTypeInternal;
extern ReceiveInteractionDefaultTypeInternal _ReceiveInteraction_default_instance_;
class ReceiveInteractionWithTime;
struct ReceiveInteractionWithTimeDefaultTypeInternal;
extern ReceiveInteractionWithTimeDefaultTypeInternal _ReceiveInteractionWithTime_default_instance_;
class ReflectAttributeValues;
struct ReflectAttributeValuesDefaultTypeInternal;
extern ReflectAttributeValuesDefaultTypeInternal _ReflectAttributeValues_default_instance_;
class ReflectAttributeValuesWithTime;
struct ReflectAttributeValuesWithTimeDefaultTypeInternal;
extern ReflectAttributeValuesWithTimeDefaultTypeInternal _ReflectAttributeValuesWithTime_default_instance_;
class RemoveObjectInstance;
struct RemoveObjectInstanceDefaultTypeInternal;
extern RemoveObjectInstanceDefaultTypeInternal _RemoveObjectInstance_default_instance_;
class RemoveObjectInstanceWithTime;
struct RemoveObjectInstanceWithTimeDefaultTypeInternal;
extern RemoveObjectInstanceWithTimeDefaultTypeInternal _RemoveObjectInstanceWithTime_default_instance_;
class ReportAttributeTransportationType;
struct ReportAttributeTransportationTypeDefaultTypeInternal;
extern ReportAttributeTransportationTypeDefaultTypeInternal _ReportAttributeTransportationType_default_instance_;
class ReportFederationExecutionDoesNotExist;
struct ReportFederationExecutionDoesNotExistDefaultTypeInternal;
extern ReportFederationExecutionDoesNotExistDefaultTypeInternal _ReportFederationExecutionDoesNotExist_default_instance_;
class ReportFederationExecutionMembers;
struct ReportFederationExecutionMembersDefaultTypeInternal;
extern ReportFederationExecutionMembersDefaultTypeInternal _ReportFederationExecutionMembers_default_instance_;
class ReportFederationExecutions;
struct ReportFederationExecutionsDefaultTypeInternal;
extern ReportFederationExecutionsDefaultTypeInternal _ReportFederationExecutions_default_instance_;
class ReportInteractionTransportationType;
struct ReportInteractionTransportationTypeDefaultTypeInternal;
extern ReportInteractionTransportationTypeDefaultTypeInternal _ReportInteractionTransportationType_default_instance_;
class RequestAttributeOwnershipAssumption;
struct RequestAttributeOwnershipAssumptionDefaultTypeInternal;
extern RequestAttributeOwnershipAssumptionDefaultTypeInternal _RequestAttributeOwnershipAssumption_default_instance_;
class RequestAttributeOwnershipRelease;
struct RequestAttributeOwnershipReleaseDefaultTypeInternal;
extern RequestAttributeOwnershipReleaseDefaultTypeInternal _RequestAttributeOwnershipRelease_default_instance_;
class RequestDivestitureConfirmation;
struct RequestDivestitureConfirmationDefaultTypeInternal;
extern RequestDivestitureConfirmationDefaultTypeInternal _RequestDivestitureConfirmation_default_instance_;
class RequestFederationRestoreFailed;
struct RequestFederationRestoreFailedDefaultTypeInternal;
extern RequestFederationRestoreFailedDefaultTypeInternal _RequestFederationRestoreFailed_default_instance_;
class RequestFederationRestoreSucceeded;
struct RequestFederationRestoreSucceededDefaultTypeInternal;
extern RequestFederationRestoreSucceededDefaultTypeInternal _RequestFederationRestoreSucceeded_default_instance_;
class RequestRetraction;
struct RequestRetractionDefaultTypeInternal;
extern RequestRetractionDefaultTypeInternal _RequestRetraction_default_instance_;
class StartRegistrationForObjectClass;
struct StartRegistrationForObjectClassDefaultTypeInternal;
extern StartRegistrationForObjectClassDefaultTypeInternal _StartRegistrationForObjectClass_default_instance_;
class StopRegistrationForObjectClass;
struct StopRegistrationForObjectClassDefaultTypeInternal;
extern StopRegistrationForObjectClassDefaultTypeInternal _StopRegistrationForObjectClass_default_instance_;
class SynchronizationPointRegistrationFailed;
struct SynchronizationPointRegistrationFailedDefaultTypeInternal;
extern SynchronizationPointRegistrationFailedDefaultTypeInternal _SynchronizationPointRegistrationFailed_default_instance_;
class SynchronizationPointRegistrationSucceeded;
struct SynchronizationPointRegistrationSucceededDefaultTypeInternal;
extern SynchronizationPointRegistrationSucceededDefaultTypeInternal _SynchronizationPointRegistrationSucceeded_default_instance_;
class TimeAdvanceGrant;
struct TimeAdvanceGrantDefaultTypeInternal;
extern TimeAdvanceGrantDefaultTypeInternal _TimeAdvanceGrant_default_instance_;
class TimeConstrainedEnabled;
struct TimeConstrainedEnabledDefaultTypeInternal;
extern TimeConstrainedEnabledDefaultTypeInternal _TimeConstrainedEnabled_default_instance_;
class TimeRegulationEnabled;
struct TimeRegulationEnabledDefaultTypeInternal;
extern TimeRegulationEnabledDefaultTypeInternal _TimeRegulationEnabled_default_instance_;
class TurnInteractionsOff;
struct TurnInteractionsOffDefaultTypeInternal;
extern TurnInteractionsOffDefaultTypeInternal _TurnInteractionsOff_default_instance_;
class TurnInteractionsOn;
struct TurnInteractionsOnDefaultTypeInternal;
extern TurnInteractionsOnDefaultTypeInternal _TurnInteractionsOn_default_instance_;
class TurnUpdatesOffForObjectInstance;
struct TurnUpdatesOffForObjectInstanceDefaultTypeInternal;
extern TurnUpdatesOffForObjectInstanceDefaultTypeInternal _TurnUpdatesOffForObjectInstance_default_instance_;
class TurnUpdatesOnForObjectInstance;
struct TurnUpdatesOnForObjectInstanceDefaultTypeInternal;
extern TurnUpdatesOnForObjectInstanceDefaultTypeInternal _TurnUpdatesOnForObjectInstance_default_instance_;
class TurnUpdatesOnForObjectInstanceWithRate;
struct TurnUpdatesOnForObjectInstanceWithRateDefaultTypeInternal;
extern TurnUpdatesOnForObjectInstanceWithRateDefaultTypeInternal _TurnUpdatesOnForObjectInstanceWithRate_default_instance_;
}  // namespace fedpro
}  // namespace rti1516_2025
PROTOBUF_NAMESPACE_OPEN
template<> ::rti1516_2025::fedpro::AnnounceSynchronizationPoint* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::AnnounceSynchronizationPoint>(Arena*);
template<> ::rti1516_2025::fedpro::AttributeIsNotOwned* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::AttributeIsNotOwned>(Arena*);
template<> ::rti1516_2025::fedpro::AttributeIsOwnedByRTI* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::AttributeIsOwnedByRTI>(Arena*);
template<> ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification>(Arena*);
template<> ::rti1516_2025::fedpro::AttributeOwnershipUnavailable* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::AttributeOwnershipUnavailable>(Arena*);
template<> ::rti1516_2025::fedpro::AttributesInScope* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::AttributesInScope>(Arena*);
template<> ::rti1516_2025::fedpro::AttributesOutOfScope* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::AttributesOutOfScope>(Arena*);
template<> ::rti1516_2025::fedpro::CallbackRequest* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::CallbackRequest>(Arena*);
template<> ::rti1516_2025::fedpro::CallbackResponse* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::CallbackResponse>(Arena*);
template<> ::rti1516_2025::fedpro::CallbackSucceeded* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::CallbackSucceeded>(Arena*);
template<> ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation>(Arena*);
template<> ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange>(Arena*);
template<> ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange>(Arena*);
template<> ::rti1516_2025::fedpro::ConnectionLost* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ConnectionLost>(Arena*);
template<> ::rti1516_2025::fedpro::DiscoverObjectInstance* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::DiscoverObjectInstance>(Arena*);
template<> ::rti1516_2025::fedpro::FederateResigned* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederateResigned>(Arena*);
template<> ::rti1516_2025::fedpro::FederationNotRestored* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederationNotRestored>(Arena*);
template<> ::rti1516_2025::fedpro::FederationNotSaved* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederationNotSaved>(Arena*);
template<> ::rti1516_2025::fedpro::FederationRestoreBegun* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederationRestoreBegun>(Arena*);
template<> ::rti1516_2025::fedpro::FederationRestoreStatusResponse* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederationRestoreStatusResponse>(Arena*);
template<> ::rti1516_2025::fedpro::FederationRestored* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederationRestored>(Arena*);
template<> ::rti1516_2025::fedpro::FederationSaveStatusResponse* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederationSaveStatusResponse>(Arena*);
template<> ::rti1516_2025::fedpro::FederationSaved* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederationSaved>(Arena*);
template<> ::rti1516_2025::fedpro::FederationSynchronized* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FederationSynchronized>(Arena*);
template<> ::rti1516_2025::fedpro::FlushQueueGrant* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::FlushQueueGrant>(Arena*);
template<> ::rti1516_2025::fedpro::InformAttributeOwnership* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::InformAttributeOwnership>(Arena*);
template<> ::rti1516_2025::fedpro::InitiateFederateRestore* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::InitiateFederateRestore>(Arena*);
template<> ::rti1516_2025::fedpro::InitiateFederateSave* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::InitiateFederateSave>(Arena*);
template<> ::rti1516_2025::fedpro::InitiateFederateSaveWithTime* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::InitiateFederateSaveWithTime>(Arena*);
template<> ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed>(Arena*);
template<> ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded>(Arena*);
template<> ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed>(Arena*);
template<> ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded>(Arena*);
template<> ::rti1516_2025::fedpro::ProvideAttributeValueUpdate* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ProvideAttributeValueUpdate>(Arena*);
template<> ::rti1516_2025::fedpro::ReceiveDirectedInteraction* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ReceiveDirectedInteraction>(Arena*);
template<> ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime>(Arena*);
template<> ::rti1516_2025::fedpro::ReceiveInteraction* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ReceiveInteraction>(Arena*);
template<> ::rti1516_2025::fedpro::ReceiveInteractionWithTime* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ReceiveInteractionWithTime>(Arena*);
template<> ::rti1516_2025::fedpro::ReflectAttributeValues* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ReflectAttributeValues>(Arena*);
template<> ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ReflectAttributeValuesWithTime>(Arena*);
template<> ::rti1516_2025::fedpro::RemoveObjectInstance* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::RemoveObjectInstance>(Arena*);
template<> ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::RemoveObjectInstanceWithTime>(Arena*);
template<> ::rti1516_2025::fedpro::ReportAttributeTransportationType* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ReportAttributeTransportationType>(Arena*);
template<> ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist>(Arena*);
template<> ::rti1516_2025::fedpro::ReportFederationExecutionMembers* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ReportFederationExecutionMembers>(Arena*);
template<> ::rti1516_2025::fedpro::ReportFederationExecutions* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ReportFederationExecutions>(Arena*);
template<> ::rti1516_2025::fedpro::ReportInteractionTransportationType* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::ReportInteractionTransportationType>(Arena*);
template<> ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption>(Arena*);
template<> ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::RequestAttributeOwnershipRelease>(Arena*);
template<> ::rti1516_2025::fedpro::RequestDivestitureConfirmation* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::RequestDivestitureConfirmation>(Arena*);
template<> ::rti1516_2025::fedpro::RequestFederationRestoreFailed* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::RequestFederationRestoreFailed>(Arena*);
template<> ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::RequestFederationRestoreSucceeded>(Arena*);
template<> ::rti1516_2025::fedpro::RequestRetraction* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::RequestRetraction>(Arena*);
template<> ::rti1516_2025::fedpro::StartRegistrationForObjectClass* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::StartRegistrationForObjectClass>(Arena*);
template<> ::rti1516_2025::fedpro::StopRegistrationForObjectClass* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::StopRegistrationForObjectClass>(Arena*);
template<> ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed>(Arena*);
template<> ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded>(Arena*);
template<> ::rti1516_2025::fedpro::TimeAdvanceGrant* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::TimeAdvanceGrant>(Arena*);
template<> ::rti1516_2025::fedpro::TimeConstrainedEnabled* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::TimeConstrainedEnabled>(Arena*);
template<> ::rti1516_2025::fedpro::TimeRegulationEnabled* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::TimeRegulationEnabled>(Arena*);
template<> ::rti1516_2025::fedpro::TurnInteractionsOff* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::TurnInteractionsOff>(Arena*);
template<> ::rti1516_2025::fedpro::TurnInteractionsOn* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::TurnInteractionsOn>(Arena*);
template<> ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance>(Arena*);
template<> ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance>(Arena*);
template<> ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate* Arena::CreateMaybeMessage<::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rti1516_2025 {
namespace fedpro {

// ===================================================================

class ConnectionLost final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ConnectionLost) */ {
 public:
  inline ConnectionLost() : ConnectionLost(nullptr) {}
  ~ConnectionLost() override;
  explicit PROTOBUF_CONSTEXPR ConnectionLost(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionLost(const ConnectionLost& from);
  ConnectionLost(ConnectionLost&& from) noexcept
    : ConnectionLost() {
    *this = ::std::move(from);
  }

  inline ConnectionLost& operator=(const ConnectionLost& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionLost& operator=(ConnectionLost&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionLost& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionLost* internal_default_instance() {
    return reinterpret_cast<const ConnectionLost*>(
               &_ConnectionLost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConnectionLost& a, ConnectionLost& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionLost* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionLost* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionLost* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionLost>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectionLost& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectionLost& from) {
    ConnectionLost::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionLost* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ConnectionLost";
  }
  protected:
  explicit ConnectionLost(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaultDescriptionFieldNumber = 1,
  };
  // string faultDescription = 1;
  void clear_faultdescription();
  const std::string& faultdescription() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_faultdescription(ArgT0&& arg0, ArgT... args);
  std::string* mutable_faultdescription();
  PROTOBUF_NODISCARD std::string* release_faultdescription();
  void set_allocated_faultdescription(std::string* faultdescription);
  private:
  const std::string& _internal_faultdescription() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_faultdescription(const std::string& value);
  std::string* _internal_mutable_faultdescription();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ConnectionLost)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr faultdescription_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class ReportFederationExecutions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ReportFederationExecutions) */ {
 public:
  inline ReportFederationExecutions() : ReportFederationExecutions(nullptr) {}
  ~ReportFederationExecutions() override;
  explicit PROTOBUF_CONSTEXPR ReportFederationExecutions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportFederationExecutions(const ReportFederationExecutions& from);
  ReportFederationExecutions(ReportFederationExecutions&& from) noexcept
    : ReportFederationExecutions() {
    *this = ::std::move(from);
  }

  inline ReportFederationExecutions& operator=(const ReportFederationExecutions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportFederationExecutions& operator=(ReportFederationExecutions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportFederationExecutions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportFederationExecutions* internal_default_instance() {
    return reinterpret_cast<const ReportFederationExecutions*>(
               &_ReportFederationExecutions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReportFederationExecutions& a, ReportFederationExecutions& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportFederationExecutions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportFederationExecutions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportFederationExecutions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportFederationExecutions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportFederationExecutions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReportFederationExecutions& from) {
    ReportFederationExecutions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportFederationExecutions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ReportFederationExecutions";
  }
  protected:
  explicit ReportFederationExecutions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportFieldNumber = 1,
  };
  // .rti1516_2025.fedpro.FederationExecutionInformationSet report = 1;
  bool has_report() const;
  private:
  bool _internal_has_report() const;
  public:
  void clear_report();
  const ::rti1516_2025::fedpro::FederationExecutionInformationSet& report() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederationExecutionInformationSet* release_report();
  ::rti1516_2025::fedpro::FederationExecutionInformationSet* mutable_report();
  void set_allocated_report(::rti1516_2025::fedpro::FederationExecutionInformationSet* report);
  private:
  const ::rti1516_2025::fedpro::FederationExecutionInformationSet& _internal_report() const;
  ::rti1516_2025::fedpro::FederationExecutionInformationSet* _internal_mutable_report();
  public:
  void unsafe_arena_set_allocated_report(
      ::rti1516_2025::fedpro::FederationExecutionInformationSet* report);
  ::rti1516_2025::fedpro::FederationExecutionInformationSet* unsafe_arena_release_report();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ReportFederationExecutions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::FederationExecutionInformationSet* report_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class ReportFederationExecutionMembers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ReportFederationExecutionMembers) */ {
 public:
  inline ReportFederationExecutionMembers() : ReportFederationExecutionMembers(nullptr) {}
  ~ReportFederationExecutionMembers() override;
  explicit PROTOBUF_CONSTEXPR ReportFederationExecutionMembers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportFederationExecutionMembers(const ReportFederationExecutionMembers& from);
  ReportFederationExecutionMembers(ReportFederationExecutionMembers&& from) noexcept
    : ReportFederationExecutionMembers() {
    *this = ::std::move(from);
  }

  inline ReportFederationExecutionMembers& operator=(const ReportFederationExecutionMembers& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportFederationExecutionMembers& operator=(ReportFederationExecutionMembers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportFederationExecutionMembers& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportFederationExecutionMembers* internal_default_instance() {
    return reinterpret_cast<const ReportFederationExecutionMembers*>(
               &_ReportFederationExecutionMembers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReportFederationExecutionMembers& a, ReportFederationExecutionMembers& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportFederationExecutionMembers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportFederationExecutionMembers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportFederationExecutionMembers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportFederationExecutionMembers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportFederationExecutionMembers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReportFederationExecutionMembers& from) {
    ReportFederationExecutionMembers::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportFederationExecutionMembers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ReportFederationExecutionMembers";
  }
  protected:
  explicit ReportFederationExecutionMembers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFederationNameFieldNumber = 1,
    kReportFieldNumber = 2,
  };
  // string federationName = 1;
  void clear_federationname();
  const std::string& federationname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_federationname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_federationname();
  PROTOBUF_NODISCARD std::string* release_federationname();
  void set_allocated_federationname(std::string* federationname);
  private:
  const std::string& _internal_federationname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_federationname(const std::string& value);
  std::string* _internal_mutable_federationname();
  public:

  // .rti1516_2025.fedpro.FederationExecutionMemberInformationSet report = 2;
  bool has_report() const;
  private:
  bool _internal_has_report() const;
  public:
  void clear_report();
  const ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet& report() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet* release_report();
  ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet* mutable_report();
  void set_allocated_report(::rti1516_2025::fedpro::FederationExecutionMemberInformationSet* report);
  private:
  const ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet& _internal_report() const;
  ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet* _internal_mutable_report();
  public:
  void unsafe_arena_set_allocated_report(
      ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet* report);
  ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet* unsafe_arena_release_report();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ReportFederationExecutionMembers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr federationname_;
    ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet* report_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class ReportFederationExecutionDoesNotExist final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ReportFederationExecutionDoesNotExist) */ {
 public:
  inline ReportFederationExecutionDoesNotExist() : ReportFederationExecutionDoesNotExist(nullptr) {}
  ~ReportFederationExecutionDoesNotExist() override;
  explicit PROTOBUF_CONSTEXPR ReportFederationExecutionDoesNotExist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportFederationExecutionDoesNotExist(const ReportFederationExecutionDoesNotExist& from);
  ReportFederationExecutionDoesNotExist(ReportFederationExecutionDoesNotExist&& from) noexcept
    : ReportFederationExecutionDoesNotExist() {
    *this = ::std::move(from);
  }

  inline ReportFederationExecutionDoesNotExist& operator=(const ReportFederationExecutionDoesNotExist& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportFederationExecutionDoesNotExist& operator=(ReportFederationExecutionDoesNotExist&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportFederationExecutionDoesNotExist& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportFederationExecutionDoesNotExist* internal_default_instance() {
    return reinterpret_cast<const ReportFederationExecutionDoesNotExist*>(
               &_ReportFederationExecutionDoesNotExist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReportFederationExecutionDoesNotExist& a, ReportFederationExecutionDoesNotExist& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportFederationExecutionDoesNotExist* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportFederationExecutionDoesNotExist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportFederationExecutionDoesNotExist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportFederationExecutionDoesNotExist>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportFederationExecutionDoesNotExist& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReportFederationExecutionDoesNotExist& from) {
    ReportFederationExecutionDoesNotExist::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportFederationExecutionDoesNotExist* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ReportFederationExecutionDoesNotExist";
  }
  protected:
  explicit ReportFederationExecutionDoesNotExist(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFederationNameFieldNumber = 1,
  };
  // string federationName = 1;
  void clear_federationname();
  const std::string& federationname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_federationname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_federationname();
  PROTOBUF_NODISCARD std::string* release_federationname();
  void set_allocated_federationname(std::string* federationname);
  private:
  const std::string& _internal_federationname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_federationname(const std::string& value);
  std::string* _internal_mutable_federationname();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ReportFederationExecutionDoesNotExist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr federationname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class FederateResigned final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederateResigned) */ {
 public:
  inline FederateResigned() : FederateResigned(nullptr) {}
  ~FederateResigned() override;
  explicit PROTOBUF_CONSTEXPR FederateResigned(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederateResigned(const FederateResigned& from);
  FederateResigned(FederateResigned&& from) noexcept
    : FederateResigned() {
    *this = ::std::move(from);
  }

  inline FederateResigned& operator=(const FederateResigned& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederateResigned& operator=(FederateResigned&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederateResigned& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederateResigned* internal_default_instance() {
    return reinterpret_cast<const FederateResigned*>(
               &_FederateResigned_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FederateResigned& a, FederateResigned& b) {
    a.Swap(&b);
  }
  inline void Swap(FederateResigned* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederateResigned* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederateResigned* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederateResigned>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FederateResigned& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FederateResigned& from) {
    FederateResigned::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederateResigned* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederateResigned";
  }
  protected:
  explicit FederateResigned(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonForResignDescriptionFieldNumber = 1,
  };
  // string reasonForResignDescription = 1;
  void clear_reasonforresigndescription();
  const std::string& reasonforresigndescription() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reasonforresigndescription(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reasonforresigndescription();
  PROTOBUF_NODISCARD std::string* release_reasonforresigndescription();
  void set_allocated_reasonforresigndescription(std::string* reasonforresigndescription);
  private:
  const std::string& _internal_reasonforresigndescription() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reasonforresigndescription(const std::string& value);
  std::string* _internal_mutable_reasonforresigndescription();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederateResigned)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reasonforresigndescription_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class SynchronizationPointRegistrationSucceeded final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.SynchronizationPointRegistrationSucceeded) */ {
 public:
  inline SynchronizationPointRegistrationSucceeded() : SynchronizationPointRegistrationSucceeded(nullptr) {}
  ~SynchronizationPointRegistrationSucceeded() override;
  explicit PROTOBUF_CONSTEXPR SynchronizationPointRegistrationSucceeded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SynchronizationPointRegistrationSucceeded(const SynchronizationPointRegistrationSucceeded& from);
  SynchronizationPointRegistrationSucceeded(SynchronizationPointRegistrationSucceeded&& from) noexcept
    : SynchronizationPointRegistrationSucceeded() {
    *this = ::std::move(from);
  }

  inline SynchronizationPointRegistrationSucceeded& operator=(const SynchronizationPointRegistrationSucceeded& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynchronizationPointRegistrationSucceeded& operator=(SynchronizationPointRegistrationSucceeded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SynchronizationPointRegistrationSucceeded& default_instance() {
    return *internal_default_instance();
  }
  static inline const SynchronizationPointRegistrationSucceeded* internal_default_instance() {
    return reinterpret_cast<const SynchronizationPointRegistrationSucceeded*>(
               &_SynchronizationPointRegistrationSucceeded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SynchronizationPointRegistrationSucceeded& a, SynchronizationPointRegistrationSucceeded& b) {
    a.Swap(&b);
  }
  inline void Swap(SynchronizationPointRegistrationSucceeded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SynchronizationPointRegistrationSucceeded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SynchronizationPointRegistrationSucceeded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SynchronizationPointRegistrationSucceeded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SynchronizationPointRegistrationSucceeded& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SynchronizationPointRegistrationSucceeded& from) {
    SynchronizationPointRegistrationSucceeded::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynchronizationPointRegistrationSucceeded* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.SynchronizationPointRegistrationSucceeded";
  }
  protected:
  explicit SynchronizationPointRegistrationSucceeded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSynchronizationPointLabelFieldNumber = 1,
  };
  // string synchronizationPointLabel = 1;
  void clear_synchronizationpointlabel();
  const std::string& synchronizationpointlabel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_synchronizationpointlabel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_synchronizationpointlabel();
  PROTOBUF_NODISCARD std::string* release_synchronizationpointlabel();
  void set_allocated_synchronizationpointlabel(std::string* synchronizationpointlabel);
  private:
  const std::string& _internal_synchronizationpointlabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_synchronizationpointlabel(const std::string& value);
  std::string* _internal_mutable_synchronizationpointlabel();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.SynchronizationPointRegistrationSucceeded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr synchronizationpointlabel_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class SynchronizationPointRegistrationFailed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.SynchronizationPointRegistrationFailed) */ {
 public:
  inline SynchronizationPointRegistrationFailed() : SynchronizationPointRegistrationFailed(nullptr) {}
  ~SynchronizationPointRegistrationFailed() override;
  explicit PROTOBUF_CONSTEXPR SynchronizationPointRegistrationFailed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SynchronizationPointRegistrationFailed(const SynchronizationPointRegistrationFailed& from);
  SynchronizationPointRegistrationFailed(SynchronizationPointRegistrationFailed&& from) noexcept
    : SynchronizationPointRegistrationFailed() {
    *this = ::std::move(from);
  }

  inline SynchronizationPointRegistrationFailed& operator=(const SynchronizationPointRegistrationFailed& from) {
    CopyFrom(from);
    return *this;
  }
  inline SynchronizationPointRegistrationFailed& operator=(SynchronizationPointRegistrationFailed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SynchronizationPointRegistrationFailed& default_instance() {
    return *internal_default_instance();
  }
  static inline const SynchronizationPointRegistrationFailed* internal_default_instance() {
    return reinterpret_cast<const SynchronizationPointRegistrationFailed*>(
               &_SynchronizationPointRegistrationFailed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SynchronizationPointRegistrationFailed& a, SynchronizationPointRegistrationFailed& b) {
    a.Swap(&b);
  }
  inline void Swap(SynchronizationPointRegistrationFailed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SynchronizationPointRegistrationFailed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SynchronizationPointRegistrationFailed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SynchronizationPointRegistrationFailed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SynchronizationPointRegistrationFailed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SynchronizationPointRegistrationFailed& from) {
    SynchronizationPointRegistrationFailed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SynchronizationPointRegistrationFailed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.SynchronizationPointRegistrationFailed";
  }
  protected:
  explicit SynchronizationPointRegistrationFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSynchronizationPointLabelFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // string synchronizationPointLabel = 1;
  void clear_synchronizationpointlabel();
  const std::string& synchronizationpointlabel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_synchronizationpointlabel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_synchronizationpointlabel();
  PROTOBUF_NODISCARD std::string* release_synchronizationpointlabel();
  void set_allocated_synchronizationpointlabel(std::string* synchronizationpointlabel);
  private:
  const std::string& _internal_synchronizationpointlabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_synchronizationpointlabel(const std::string& value);
  std::string* _internal_mutable_synchronizationpointlabel();
  public:

  // .rti1516_2025.fedpro.SynchronizationPointFailureReason reason = 2;
  void clear_reason();
  ::rti1516_2025::fedpro::SynchronizationPointFailureReason reason() const;
  void set_reason(::rti1516_2025::fedpro::SynchronizationPointFailureReason value);
  private:
  ::rti1516_2025::fedpro::SynchronizationPointFailureReason _internal_reason() const;
  void _internal_set_reason(::rti1516_2025::fedpro::SynchronizationPointFailureReason value);
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.SynchronizationPointRegistrationFailed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr synchronizationpointlabel_;
    int reason_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class AnnounceSynchronizationPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.AnnounceSynchronizationPoint) */ {
 public:
  inline AnnounceSynchronizationPoint() : AnnounceSynchronizationPoint(nullptr) {}
  ~AnnounceSynchronizationPoint() override;
  explicit PROTOBUF_CONSTEXPR AnnounceSynchronizationPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnnounceSynchronizationPoint(const AnnounceSynchronizationPoint& from);
  AnnounceSynchronizationPoint(AnnounceSynchronizationPoint&& from) noexcept
    : AnnounceSynchronizationPoint() {
    *this = ::std::move(from);
  }

  inline AnnounceSynchronizationPoint& operator=(const AnnounceSynchronizationPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnnounceSynchronizationPoint& operator=(AnnounceSynchronizationPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnnounceSynchronizationPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnnounceSynchronizationPoint* internal_default_instance() {
    return reinterpret_cast<const AnnounceSynchronizationPoint*>(
               &_AnnounceSynchronizationPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AnnounceSynchronizationPoint& a, AnnounceSynchronizationPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(AnnounceSynchronizationPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnnounceSynchronizationPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnnounceSynchronizationPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnnounceSynchronizationPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnnounceSynchronizationPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnnounceSynchronizationPoint& from) {
    AnnounceSynchronizationPoint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnnounceSynchronizationPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.AnnounceSynchronizationPoint";
  }
  protected:
  explicit AnnounceSynchronizationPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSynchronizationPointLabelFieldNumber = 1,
    kUserSuppliedTagFieldNumber = 2,
  };
  // string synchronizationPointLabel = 1;
  void clear_synchronizationpointlabel();
  const std::string& synchronizationpointlabel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_synchronizationpointlabel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_synchronizationpointlabel();
  PROTOBUF_NODISCARD std::string* release_synchronizationpointlabel();
  void set_allocated_synchronizationpointlabel(std::string* synchronizationpointlabel);
  private:
  const std::string& _internal_synchronizationpointlabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_synchronizationpointlabel(const std::string& value);
  std::string* _internal_mutable_synchronizationpointlabel();
  public:

  // bytes userSuppliedTag = 2;
  void clear_usersuppliedtag();
  const std::string& usersuppliedtag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usersuppliedtag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usersuppliedtag();
  PROTOBUF_NODISCARD std::string* release_usersuppliedtag();
  void set_allocated_usersuppliedtag(std::string* usersuppliedtag);
  private:
  const std::string& _internal_usersuppliedtag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usersuppliedtag(const std::string& value);
  std::string* _internal_mutable_usersuppliedtag();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.AnnounceSynchronizationPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr synchronizationpointlabel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersuppliedtag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class FederationSynchronized final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederationSynchronized) */ {
 public:
  inline FederationSynchronized() : FederationSynchronized(nullptr) {}
  ~FederationSynchronized() override;
  explicit PROTOBUF_CONSTEXPR FederationSynchronized(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederationSynchronized(const FederationSynchronized& from);
  FederationSynchronized(FederationSynchronized&& from) noexcept
    : FederationSynchronized() {
    *this = ::std::move(from);
  }

  inline FederationSynchronized& operator=(const FederationSynchronized& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederationSynchronized& operator=(FederationSynchronized&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederationSynchronized& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederationSynchronized* internal_default_instance() {
    return reinterpret_cast<const FederationSynchronized*>(
               &_FederationSynchronized_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FederationSynchronized& a, FederationSynchronized& b) {
    a.Swap(&b);
  }
  inline void Swap(FederationSynchronized* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederationSynchronized* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederationSynchronized* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederationSynchronized>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FederationSynchronized& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FederationSynchronized& from) {
    FederationSynchronized::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederationSynchronized* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederationSynchronized";
  }
  protected:
  explicit FederationSynchronized(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSynchronizationPointLabelFieldNumber = 1,
    kFailedToSyncSetFieldNumber = 2,
  };
  // string synchronizationPointLabel = 1;
  void clear_synchronizationpointlabel();
  const std::string& synchronizationpointlabel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_synchronizationpointlabel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_synchronizationpointlabel();
  PROTOBUF_NODISCARD std::string* release_synchronizationpointlabel();
  void set_allocated_synchronizationpointlabel(std::string* synchronizationpointlabel);
  private:
  const std::string& _internal_synchronizationpointlabel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_synchronizationpointlabel(const std::string& value);
  std::string* _internal_mutable_synchronizationpointlabel();
  public:

  // .rti1516_2025.fedpro.FederateHandleSet failedToSyncSet = 2;
  bool has_failedtosyncset() const;
  private:
  bool _internal_has_failedtosyncset() const;
  public:
  void clear_failedtosyncset();
  const ::rti1516_2025::fedpro::FederateHandleSet& failedtosyncset() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandleSet* release_failedtosyncset();
  ::rti1516_2025::fedpro::FederateHandleSet* mutable_failedtosyncset();
  void set_allocated_failedtosyncset(::rti1516_2025::fedpro::FederateHandleSet* failedtosyncset);
  private:
  const ::rti1516_2025::fedpro::FederateHandleSet& _internal_failedtosyncset() const;
  ::rti1516_2025::fedpro::FederateHandleSet* _internal_mutable_failedtosyncset();
  public:
  void unsafe_arena_set_allocated_failedtosyncset(
      ::rti1516_2025::fedpro::FederateHandleSet* failedtosyncset);
  ::rti1516_2025::fedpro::FederateHandleSet* unsafe_arena_release_failedtosyncset();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederationSynchronized)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr synchronizationpointlabel_;
    ::rti1516_2025::fedpro::FederateHandleSet* failedtosyncset_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class InitiateFederateSave final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.InitiateFederateSave) */ {
 public:
  inline InitiateFederateSave() : InitiateFederateSave(nullptr) {}
  ~InitiateFederateSave() override;
  explicit PROTOBUF_CONSTEXPR InitiateFederateSave(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitiateFederateSave(const InitiateFederateSave& from);
  InitiateFederateSave(InitiateFederateSave&& from) noexcept
    : InitiateFederateSave() {
    *this = ::std::move(from);
  }

  inline InitiateFederateSave& operator=(const InitiateFederateSave& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitiateFederateSave& operator=(InitiateFederateSave&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitiateFederateSave& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitiateFederateSave* internal_default_instance() {
    return reinterpret_cast<const InitiateFederateSave*>(
               &_InitiateFederateSave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(InitiateFederateSave& a, InitiateFederateSave& b) {
    a.Swap(&b);
  }
  inline void Swap(InitiateFederateSave* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitiateFederateSave* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitiateFederateSave* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitiateFederateSave>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitiateFederateSave& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InitiateFederateSave& from) {
    InitiateFederateSave::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitiateFederateSave* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.InitiateFederateSave";
  }
  protected:
  explicit InitiateFederateSave(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.InitiateFederateSave)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class InitiateFederateSaveWithTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.InitiateFederateSaveWithTime) */ {
 public:
  inline InitiateFederateSaveWithTime() : InitiateFederateSaveWithTime(nullptr) {}
  ~InitiateFederateSaveWithTime() override;
  explicit PROTOBUF_CONSTEXPR InitiateFederateSaveWithTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitiateFederateSaveWithTime(const InitiateFederateSaveWithTime& from);
  InitiateFederateSaveWithTime(InitiateFederateSaveWithTime&& from) noexcept
    : InitiateFederateSaveWithTime() {
    *this = ::std::move(from);
  }

  inline InitiateFederateSaveWithTime& operator=(const InitiateFederateSaveWithTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitiateFederateSaveWithTime& operator=(InitiateFederateSaveWithTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitiateFederateSaveWithTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitiateFederateSaveWithTime* internal_default_instance() {
    return reinterpret_cast<const InitiateFederateSaveWithTime*>(
               &_InitiateFederateSaveWithTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InitiateFederateSaveWithTime& a, InitiateFederateSaveWithTime& b) {
    a.Swap(&b);
  }
  inline void Swap(InitiateFederateSaveWithTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitiateFederateSaveWithTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitiateFederateSaveWithTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitiateFederateSaveWithTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitiateFederateSaveWithTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InitiateFederateSaveWithTime& from) {
    InitiateFederateSaveWithTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitiateFederateSaveWithTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.InitiateFederateSaveWithTime";
  }
  protected:
  explicit InitiateFederateSaveWithTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // .rti1516_2025.fedpro.LogicalTime time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::rti1516_2025::fedpro::LogicalTime& time() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::LogicalTime* release_time();
  ::rti1516_2025::fedpro::LogicalTime* mutable_time();
  void set_allocated_time(::rti1516_2025::fedpro::LogicalTime* time);
  private:
  const ::rti1516_2025::fedpro::LogicalTime& _internal_time() const;
  ::rti1516_2025::fedpro::LogicalTime* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::rti1516_2025::fedpro::LogicalTime* time);
  ::rti1516_2025::fedpro::LogicalTime* unsafe_arena_release_time();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.InitiateFederateSaveWithTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    ::rti1516_2025::fedpro::LogicalTime* time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class FederationSaved final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederationSaved) */ {
 public:
  inline FederationSaved() : FederationSaved(nullptr) {}
  explicit PROTOBUF_CONSTEXPR FederationSaved(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederationSaved(const FederationSaved& from);
  FederationSaved(FederationSaved&& from) noexcept
    : FederationSaved() {
    *this = ::std::move(from);
  }

  inline FederationSaved& operator=(const FederationSaved& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederationSaved& operator=(FederationSaved&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederationSaved& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederationSaved* internal_default_instance() {
    return reinterpret_cast<const FederationSaved*>(
               &_FederationSaved_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FederationSaved& a, FederationSaved& b) {
    a.Swap(&b);
  }
  inline void Swap(FederationSaved* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederationSaved* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederationSaved* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederationSaved>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FederationSaved& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FederationSaved& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederationSaved";
  }
  protected:
  explicit FederationSaved(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederationSaved)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class FederationNotSaved final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederationNotSaved) */ {
 public:
  inline FederationNotSaved() : FederationNotSaved(nullptr) {}
  ~FederationNotSaved() override;
  explicit PROTOBUF_CONSTEXPR FederationNotSaved(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederationNotSaved(const FederationNotSaved& from);
  FederationNotSaved(FederationNotSaved&& from) noexcept
    : FederationNotSaved() {
    *this = ::std::move(from);
  }

  inline FederationNotSaved& operator=(const FederationNotSaved& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederationNotSaved& operator=(FederationNotSaved&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederationNotSaved& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederationNotSaved* internal_default_instance() {
    return reinterpret_cast<const FederationNotSaved*>(
               &_FederationNotSaved_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FederationNotSaved& a, FederationNotSaved& b) {
    a.Swap(&b);
  }
  inline void Swap(FederationNotSaved* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederationNotSaved* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederationNotSaved* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederationNotSaved>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FederationNotSaved& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FederationNotSaved& from) {
    FederationNotSaved::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederationNotSaved* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederationNotSaved";
  }
  protected:
  explicit FederationNotSaved(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // .rti1516_2025.fedpro.SaveFailureReason reason = 1;
  void clear_reason();
  ::rti1516_2025::fedpro::SaveFailureReason reason() const;
  void set_reason(::rti1516_2025::fedpro::SaveFailureReason value);
  private:
  ::rti1516_2025::fedpro::SaveFailureReason _internal_reason() const;
  void _internal_set_reason(::rti1516_2025::fedpro::SaveFailureReason value);
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederationNotSaved)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int reason_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class FederationSaveStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederationSaveStatusResponse) */ {
 public:
  inline FederationSaveStatusResponse() : FederationSaveStatusResponse(nullptr) {}
  ~FederationSaveStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR FederationSaveStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederationSaveStatusResponse(const FederationSaveStatusResponse& from);
  FederationSaveStatusResponse(FederationSaveStatusResponse&& from) noexcept
    : FederationSaveStatusResponse() {
    *this = ::std::move(from);
  }

  inline FederationSaveStatusResponse& operator=(const FederationSaveStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederationSaveStatusResponse& operator=(FederationSaveStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederationSaveStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederationSaveStatusResponse* internal_default_instance() {
    return reinterpret_cast<const FederationSaveStatusResponse*>(
               &_FederationSaveStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FederationSaveStatusResponse& a, FederationSaveStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FederationSaveStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederationSaveStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederationSaveStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederationSaveStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FederationSaveStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FederationSaveStatusResponse& from) {
    FederationSaveStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederationSaveStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederationSaveStatusResponse";
  }
  protected:
  explicit FederationSaveStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // .rti1516_2025.fedpro.FederateHandleSaveStatusPairArray response = 1;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray& response() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray* release_response();
  ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray* mutable_response();
  void set_allocated_response(::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray* response);
  private:
  const ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray& _internal_response() const;
  ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray* response);
  ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederationSaveStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray* response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class RequestFederationRestoreSucceeded final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.RequestFederationRestoreSucceeded) */ {
 public:
  inline RequestFederationRestoreSucceeded() : RequestFederationRestoreSucceeded(nullptr) {}
  ~RequestFederationRestoreSucceeded() override;
  explicit PROTOBUF_CONSTEXPR RequestFederationRestoreSucceeded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestFederationRestoreSucceeded(const RequestFederationRestoreSucceeded& from);
  RequestFederationRestoreSucceeded(RequestFederationRestoreSucceeded&& from) noexcept
    : RequestFederationRestoreSucceeded() {
    *this = ::std::move(from);
  }

  inline RequestFederationRestoreSucceeded& operator=(const RequestFederationRestoreSucceeded& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestFederationRestoreSucceeded& operator=(RequestFederationRestoreSucceeded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestFederationRestoreSucceeded& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestFederationRestoreSucceeded* internal_default_instance() {
    return reinterpret_cast<const RequestFederationRestoreSucceeded*>(
               &_RequestFederationRestoreSucceeded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RequestFederationRestoreSucceeded& a, RequestFederationRestoreSucceeded& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestFederationRestoreSucceeded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestFederationRestoreSucceeded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestFederationRestoreSucceeded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestFederationRestoreSucceeded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestFederationRestoreSucceeded& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestFederationRestoreSucceeded& from) {
    RequestFederationRestoreSucceeded::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestFederationRestoreSucceeded* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.RequestFederationRestoreSucceeded";
  }
  protected:
  explicit RequestFederationRestoreSucceeded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.RequestFederationRestoreSucceeded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class RequestFederationRestoreFailed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.RequestFederationRestoreFailed) */ {
 public:
  inline RequestFederationRestoreFailed() : RequestFederationRestoreFailed(nullptr) {}
  ~RequestFederationRestoreFailed() override;
  explicit PROTOBUF_CONSTEXPR RequestFederationRestoreFailed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestFederationRestoreFailed(const RequestFederationRestoreFailed& from);
  RequestFederationRestoreFailed(RequestFederationRestoreFailed&& from) noexcept
    : RequestFederationRestoreFailed() {
    *this = ::std::move(from);
  }

  inline RequestFederationRestoreFailed& operator=(const RequestFederationRestoreFailed& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestFederationRestoreFailed& operator=(RequestFederationRestoreFailed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestFederationRestoreFailed& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestFederationRestoreFailed* internal_default_instance() {
    return reinterpret_cast<const RequestFederationRestoreFailed*>(
               &_RequestFederationRestoreFailed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RequestFederationRestoreFailed& a, RequestFederationRestoreFailed& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestFederationRestoreFailed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestFederationRestoreFailed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestFederationRestoreFailed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestFederationRestoreFailed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestFederationRestoreFailed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestFederationRestoreFailed& from) {
    RequestFederationRestoreFailed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestFederationRestoreFailed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.RequestFederationRestoreFailed";
  }
  protected:
  explicit RequestFederationRestoreFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.RequestFederationRestoreFailed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class FederationRestoreBegun final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederationRestoreBegun) */ {
 public:
  inline FederationRestoreBegun() : FederationRestoreBegun(nullptr) {}
  explicit PROTOBUF_CONSTEXPR FederationRestoreBegun(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederationRestoreBegun(const FederationRestoreBegun& from);
  FederationRestoreBegun(FederationRestoreBegun&& from) noexcept
    : FederationRestoreBegun() {
    *this = ::std::move(from);
  }

  inline FederationRestoreBegun& operator=(const FederationRestoreBegun& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederationRestoreBegun& operator=(FederationRestoreBegun&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederationRestoreBegun& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederationRestoreBegun* internal_default_instance() {
    return reinterpret_cast<const FederationRestoreBegun*>(
               &_FederationRestoreBegun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(FederationRestoreBegun& a, FederationRestoreBegun& b) {
    a.Swap(&b);
  }
  inline void Swap(FederationRestoreBegun* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederationRestoreBegun* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederationRestoreBegun* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederationRestoreBegun>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FederationRestoreBegun& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FederationRestoreBegun& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederationRestoreBegun";
  }
  protected:
  explicit FederationRestoreBegun(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederationRestoreBegun)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class InitiateFederateRestore final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.InitiateFederateRestore) */ {
 public:
  inline InitiateFederateRestore() : InitiateFederateRestore(nullptr) {}
  ~InitiateFederateRestore() override;
  explicit PROTOBUF_CONSTEXPR InitiateFederateRestore(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitiateFederateRestore(const InitiateFederateRestore& from);
  InitiateFederateRestore(InitiateFederateRestore&& from) noexcept
    : InitiateFederateRestore() {
    *this = ::std::move(from);
  }

  inline InitiateFederateRestore& operator=(const InitiateFederateRestore& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitiateFederateRestore& operator=(InitiateFederateRestore&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitiateFederateRestore& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitiateFederateRestore* internal_default_instance() {
    return reinterpret_cast<const InitiateFederateRestore*>(
               &_InitiateFederateRestore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(InitiateFederateRestore& a, InitiateFederateRestore& b) {
    a.Swap(&b);
  }
  inline void Swap(InitiateFederateRestore* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitiateFederateRestore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitiateFederateRestore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitiateFederateRestore>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitiateFederateRestore& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InitiateFederateRestore& from) {
    InitiateFederateRestore::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitiateFederateRestore* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.InitiateFederateRestore";
  }
  protected:
  explicit InitiateFederateRestore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
    kFederateNameFieldNumber = 2,
    kPostRestoreFederateHandleFieldNumber = 3,
  };
  // string label = 1;
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string federateName = 2;
  void clear_federatename();
  const std::string& federatename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_federatename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_federatename();
  PROTOBUF_NODISCARD std::string* release_federatename();
  void set_allocated_federatename(std::string* federatename);
  private:
  const std::string& _internal_federatename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_federatename(const std::string& value);
  std::string* _internal_mutable_federatename();
  public:

  // .rti1516_2025.fedpro.FederateHandle postRestoreFederateHandle = 3;
  bool has_postrestorefederatehandle() const;
  private:
  bool _internal_has_postrestorefederatehandle() const;
  public:
  void clear_postrestorefederatehandle();
  const ::rti1516_2025::fedpro::FederateHandle& postrestorefederatehandle() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandle* release_postrestorefederatehandle();
  ::rti1516_2025::fedpro::FederateHandle* mutable_postrestorefederatehandle();
  void set_allocated_postrestorefederatehandle(::rti1516_2025::fedpro::FederateHandle* postrestorefederatehandle);
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_postrestorefederatehandle() const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_mutable_postrestorefederatehandle();
  public:
  void unsafe_arena_set_allocated_postrestorefederatehandle(
      ::rti1516_2025::fedpro::FederateHandle* postrestorefederatehandle);
  ::rti1516_2025::fedpro::FederateHandle* unsafe_arena_release_postrestorefederatehandle();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.InitiateFederateRestore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr federatename_;
    ::rti1516_2025::fedpro::FederateHandle* postrestorefederatehandle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class FederationRestored final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederationRestored) */ {
 public:
  inline FederationRestored() : FederationRestored(nullptr) {}
  explicit PROTOBUF_CONSTEXPR FederationRestored(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederationRestored(const FederationRestored& from);
  FederationRestored(FederationRestored&& from) noexcept
    : FederationRestored() {
    *this = ::std::move(from);
  }

  inline FederationRestored& operator=(const FederationRestored& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederationRestored& operator=(FederationRestored&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederationRestored& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederationRestored* internal_default_instance() {
    return reinterpret_cast<const FederationRestored*>(
               &_FederationRestored_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(FederationRestored& a, FederationRestored& b) {
    a.Swap(&b);
  }
  inline void Swap(FederationRestored* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederationRestored* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederationRestored* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederationRestored>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FederationRestored& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FederationRestored& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederationRestored";
  }
  protected:
  explicit FederationRestored(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederationRestored)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class FederationNotRestored final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederationNotRestored) */ {
 public:
  inline FederationNotRestored() : FederationNotRestored(nullptr) {}
  ~FederationNotRestored() override;
  explicit PROTOBUF_CONSTEXPR FederationNotRestored(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederationNotRestored(const FederationNotRestored& from);
  FederationNotRestored(FederationNotRestored&& from) noexcept
    : FederationNotRestored() {
    *this = ::std::move(from);
  }

  inline FederationNotRestored& operator=(const FederationNotRestored& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederationNotRestored& operator=(FederationNotRestored&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederationNotRestored& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederationNotRestored* internal_default_instance() {
    return reinterpret_cast<const FederationNotRestored*>(
               &_FederationNotRestored_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(FederationNotRestored& a, FederationNotRestored& b) {
    a.Swap(&b);
  }
  inline void Swap(FederationNotRestored* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederationNotRestored* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederationNotRestored* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederationNotRestored>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FederationNotRestored& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FederationNotRestored& from) {
    FederationNotRestored::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederationNotRestored* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederationNotRestored";
  }
  protected:
  explicit FederationNotRestored(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // .rti1516_2025.fedpro.RestoreFailureReason reason = 1;
  void clear_reason();
  ::rti1516_2025::fedpro::RestoreFailureReason reason() const;
  void set_reason(::rti1516_2025::fedpro::RestoreFailureReason value);
  private:
  ::rti1516_2025::fedpro::RestoreFailureReason _internal_reason() const;
  void _internal_set_reason(::rti1516_2025::fedpro::RestoreFailureReason value);
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederationNotRestored)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int reason_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class FederationRestoreStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FederationRestoreStatusResponse) */ {
 public:
  inline FederationRestoreStatusResponse() : FederationRestoreStatusResponse(nullptr) {}
  ~FederationRestoreStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR FederationRestoreStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FederationRestoreStatusResponse(const FederationRestoreStatusResponse& from);
  FederationRestoreStatusResponse(FederationRestoreStatusResponse&& from) noexcept
    : FederationRestoreStatusResponse() {
    *this = ::std::move(from);
  }

  inline FederationRestoreStatusResponse& operator=(const FederationRestoreStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FederationRestoreStatusResponse& operator=(FederationRestoreStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FederationRestoreStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FederationRestoreStatusResponse* internal_default_instance() {
    return reinterpret_cast<const FederationRestoreStatusResponse*>(
               &_FederationRestoreStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(FederationRestoreStatusResponse& a, FederationRestoreStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FederationRestoreStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FederationRestoreStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FederationRestoreStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FederationRestoreStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FederationRestoreStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FederationRestoreStatusResponse& from) {
    FederationRestoreStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FederationRestoreStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FederationRestoreStatusResponse";
  }
  protected:
  explicit FederationRestoreStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // .rti1516_2025.fedpro.FederateRestoreStatusArray response = 1;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::rti1516_2025::fedpro::FederateRestoreStatusArray& response() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateRestoreStatusArray* release_response();
  ::rti1516_2025::fedpro::FederateRestoreStatusArray* mutable_response();
  void set_allocated_response(::rti1516_2025::fedpro::FederateRestoreStatusArray* response);
  private:
  const ::rti1516_2025::fedpro::FederateRestoreStatusArray& _internal_response() const;
  ::rti1516_2025::fedpro::FederateRestoreStatusArray* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::rti1516_2025::fedpro::FederateRestoreStatusArray* response);
  ::rti1516_2025::fedpro::FederateRestoreStatusArray* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FederationRestoreStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::FederateRestoreStatusArray* response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class StartRegistrationForObjectClass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.StartRegistrationForObjectClass) */ {
 public:
  inline StartRegistrationForObjectClass() : StartRegistrationForObjectClass(nullptr) {}
  ~StartRegistrationForObjectClass() override;
  explicit PROTOBUF_CONSTEXPR StartRegistrationForObjectClass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartRegistrationForObjectClass(const StartRegistrationForObjectClass& from);
  StartRegistrationForObjectClass(StartRegistrationForObjectClass&& from) noexcept
    : StartRegistrationForObjectClass() {
    *this = ::std::move(from);
  }

  inline StartRegistrationForObjectClass& operator=(const StartRegistrationForObjectClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartRegistrationForObjectClass& operator=(StartRegistrationForObjectClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartRegistrationForObjectClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartRegistrationForObjectClass* internal_default_instance() {
    return reinterpret_cast<const StartRegistrationForObjectClass*>(
               &_StartRegistrationForObjectClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(StartRegistrationForObjectClass& a, StartRegistrationForObjectClass& b) {
    a.Swap(&b);
  }
  inline void Swap(StartRegistrationForObjectClass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartRegistrationForObjectClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartRegistrationForObjectClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartRegistrationForObjectClass>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartRegistrationForObjectClass& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StartRegistrationForObjectClass& from) {
    StartRegistrationForObjectClass::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRegistrationForObjectClass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.StartRegistrationForObjectClass";
  }
  protected:
  explicit StartRegistrationForObjectClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectClassFieldNumber = 1,
  };
  // .rti1516_2025.fedpro.ObjectClassHandle objectClass = 1;
  bool has_objectclass() const;
  private:
  bool _internal_has_objectclass() const;
  public:
  void clear_objectclass();
  const ::rti1516_2025::fedpro::ObjectClassHandle& objectclass() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectClassHandle* release_objectclass();
  ::rti1516_2025::fedpro::ObjectClassHandle* mutable_objectclass();
  void set_allocated_objectclass(::rti1516_2025::fedpro::ObjectClassHandle* objectclass);
  private:
  const ::rti1516_2025::fedpro::ObjectClassHandle& _internal_objectclass() const;
  ::rti1516_2025::fedpro::ObjectClassHandle* _internal_mutable_objectclass();
  public:
  void unsafe_arena_set_allocated_objectclass(
      ::rti1516_2025::fedpro::ObjectClassHandle* objectclass);
  ::rti1516_2025::fedpro::ObjectClassHandle* unsafe_arena_release_objectclass();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.StartRegistrationForObjectClass)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::ObjectClassHandle* objectclass_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class StopRegistrationForObjectClass final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.StopRegistrationForObjectClass) */ {
 public:
  inline StopRegistrationForObjectClass() : StopRegistrationForObjectClass(nullptr) {}
  ~StopRegistrationForObjectClass() override;
  explicit PROTOBUF_CONSTEXPR StopRegistrationForObjectClass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRegistrationForObjectClass(const StopRegistrationForObjectClass& from);
  StopRegistrationForObjectClass(StopRegistrationForObjectClass&& from) noexcept
    : StopRegistrationForObjectClass() {
    *this = ::std::move(from);
  }

  inline StopRegistrationForObjectClass& operator=(const StopRegistrationForObjectClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRegistrationForObjectClass& operator=(StopRegistrationForObjectClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopRegistrationForObjectClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRegistrationForObjectClass* internal_default_instance() {
    return reinterpret_cast<const StopRegistrationForObjectClass*>(
               &_StopRegistrationForObjectClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(StopRegistrationForObjectClass& a, StopRegistrationForObjectClass& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRegistrationForObjectClass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRegistrationForObjectClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopRegistrationForObjectClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopRegistrationForObjectClass>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopRegistrationForObjectClass& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopRegistrationForObjectClass& from) {
    StopRegistrationForObjectClass::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRegistrationForObjectClass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.StopRegistrationForObjectClass";
  }
  protected:
  explicit StopRegistrationForObjectClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectClassFieldNumber = 1,
  };
  // .rti1516_2025.fedpro.ObjectClassHandle objectClass = 1;
  bool has_objectclass() const;
  private:
  bool _internal_has_objectclass() const;
  public:
  void clear_objectclass();
  const ::rti1516_2025::fedpro::ObjectClassHandle& objectclass() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectClassHandle* release_objectclass();
  ::rti1516_2025::fedpro::ObjectClassHandle* mutable_objectclass();
  void set_allocated_objectclass(::rti1516_2025::fedpro::ObjectClassHandle* objectclass);
  private:
  const ::rti1516_2025::fedpro::ObjectClassHandle& _internal_objectclass() const;
  ::rti1516_2025::fedpro::ObjectClassHandle* _internal_mutable_objectclass();
  public:
  void unsafe_arena_set_allocated_objectclass(
      ::rti1516_2025::fedpro::ObjectClassHandle* objectclass);
  ::rti1516_2025::fedpro::ObjectClassHandle* unsafe_arena_release_objectclass();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.StopRegistrationForObjectClass)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::ObjectClassHandle* objectclass_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class TurnInteractionsOn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.TurnInteractionsOn) */ {
 public:
  inline TurnInteractionsOn() : TurnInteractionsOn(nullptr) {}
  ~TurnInteractionsOn() override;
  explicit PROTOBUF_CONSTEXPR TurnInteractionsOn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TurnInteractionsOn(const TurnInteractionsOn& from);
  TurnInteractionsOn(TurnInteractionsOn&& from) noexcept
    : TurnInteractionsOn() {
    *this = ::std::move(from);
  }

  inline TurnInteractionsOn& operator=(const TurnInteractionsOn& from) {
    CopyFrom(from);
    return *this;
  }
  inline TurnInteractionsOn& operator=(TurnInteractionsOn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TurnInteractionsOn& default_instance() {
    return *internal_default_instance();
  }
  static inline const TurnInteractionsOn* internal_default_instance() {
    return reinterpret_cast<const TurnInteractionsOn*>(
               &_TurnInteractionsOn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TurnInteractionsOn& a, TurnInteractionsOn& b) {
    a.Swap(&b);
  }
  inline void Swap(TurnInteractionsOn* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TurnInteractionsOn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TurnInteractionsOn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TurnInteractionsOn>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TurnInteractionsOn& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TurnInteractionsOn& from) {
    TurnInteractionsOn::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TurnInteractionsOn* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.TurnInteractionsOn";
  }
  protected:
  explicit TurnInteractionsOn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInteractionClassFieldNumber = 1,
  };
  // .rti1516_2025.fedpro.InteractionClassHandle interactionClass = 1;
  bool has_interactionclass() const;
  private:
  bool _internal_has_interactionclass() const;
  public:
  void clear_interactionclass();
  const ::rti1516_2025::fedpro::InteractionClassHandle& interactionclass() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::InteractionClassHandle* release_interactionclass();
  ::rti1516_2025::fedpro::InteractionClassHandle* mutable_interactionclass();
  void set_allocated_interactionclass(::rti1516_2025::fedpro::InteractionClassHandle* interactionclass);
  private:
  const ::rti1516_2025::fedpro::InteractionClassHandle& _internal_interactionclass() const;
  ::rti1516_2025::fedpro::InteractionClassHandle* _internal_mutable_interactionclass();
  public:
  void unsafe_arena_set_allocated_interactionclass(
      ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass);
  ::rti1516_2025::fedpro::InteractionClassHandle* unsafe_arena_release_interactionclass();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.TurnInteractionsOn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class TurnInteractionsOff final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.TurnInteractionsOff) */ {
 public:
  inline TurnInteractionsOff() : TurnInteractionsOff(nullptr) {}
  ~TurnInteractionsOff() override;
  explicit PROTOBUF_CONSTEXPR TurnInteractionsOff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TurnInteractionsOff(const TurnInteractionsOff& from);
  TurnInteractionsOff(TurnInteractionsOff&& from) noexcept
    : TurnInteractionsOff() {
    *this = ::std::move(from);
  }

  inline TurnInteractionsOff& operator=(const TurnInteractionsOff& from) {
    CopyFrom(from);
    return *this;
  }
  inline TurnInteractionsOff& operator=(TurnInteractionsOff&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TurnInteractionsOff& default_instance() {
    return *internal_default_instance();
  }
  static inline const TurnInteractionsOff* internal_default_instance() {
    return reinterpret_cast<const TurnInteractionsOff*>(
               &_TurnInteractionsOff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(TurnInteractionsOff& a, TurnInteractionsOff& b) {
    a.Swap(&b);
  }
  inline void Swap(TurnInteractionsOff* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TurnInteractionsOff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TurnInteractionsOff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TurnInteractionsOff>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TurnInteractionsOff& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TurnInteractionsOff& from) {
    TurnInteractionsOff::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TurnInteractionsOff* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.TurnInteractionsOff";
  }
  protected:
  explicit TurnInteractionsOff(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInteractionClassFieldNumber = 1,
  };
  // .rti1516_2025.fedpro.InteractionClassHandle interactionClass = 1;
  bool has_interactionclass() const;
  private:
  bool _internal_has_interactionclass() const;
  public:
  void clear_interactionclass();
  const ::rti1516_2025::fedpro::InteractionClassHandle& interactionclass() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::InteractionClassHandle* release_interactionclass();
  ::rti1516_2025::fedpro::InteractionClassHandle* mutable_interactionclass();
  void set_allocated_interactionclass(::rti1516_2025::fedpro::InteractionClassHandle* interactionclass);
  private:
  const ::rti1516_2025::fedpro::InteractionClassHandle& _internal_interactionclass() const;
  ::rti1516_2025::fedpro::InteractionClassHandle* _internal_mutable_interactionclass();
  public:
  void unsafe_arena_set_allocated_interactionclass(
      ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass);
  ::rti1516_2025::fedpro::InteractionClassHandle* unsafe_arena_release_interactionclass();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.TurnInteractionsOff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class ObjectInstanceNameReservationSucceeded final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ObjectInstanceNameReservationSucceeded) */ {
 public:
  inline ObjectInstanceNameReservationSucceeded() : ObjectInstanceNameReservationSucceeded(nullptr) {}
  ~ObjectInstanceNameReservationSucceeded() override;
  explicit PROTOBUF_CONSTEXPR ObjectInstanceNameReservationSucceeded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInstanceNameReservationSucceeded(const ObjectInstanceNameReservationSucceeded& from);
  ObjectInstanceNameReservationSucceeded(ObjectInstanceNameReservationSucceeded&& from) noexcept
    : ObjectInstanceNameReservationSucceeded() {
    *this = ::std::move(from);
  }

  inline ObjectInstanceNameReservationSucceeded& operator=(const ObjectInstanceNameReservationSucceeded& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInstanceNameReservationSucceeded& operator=(ObjectInstanceNameReservationSucceeded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInstanceNameReservationSucceeded& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInstanceNameReservationSucceeded* internal_default_instance() {
    return reinterpret_cast<const ObjectInstanceNameReservationSucceeded*>(
               &_ObjectInstanceNameReservationSucceeded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ObjectInstanceNameReservationSucceeded& a, ObjectInstanceNameReservationSucceeded& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInstanceNameReservationSucceeded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInstanceNameReservationSucceeded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectInstanceNameReservationSucceeded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectInstanceNameReservationSucceeded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectInstanceNameReservationSucceeded& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectInstanceNameReservationSucceeded& from) {
    ObjectInstanceNameReservationSucceeded::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInstanceNameReservationSucceeded* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ObjectInstanceNameReservationSucceeded";
  }
  protected:
  explicit ObjectInstanceNameReservationSucceeded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInstanceNameFieldNumber = 1,
  };
  // string objectInstanceName = 1;
  void clear_objectinstancename();
  const std::string& objectinstancename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_objectinstancename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_objectinstancename();
  PROTOBUF_NODISCARD std::string* release_objectinstancename();
  void set_allocated_objectinstancename(std::string* objectinstancename);
  private:
  const std::string& _internal_objectinstancename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_objectinstancename(const std::string& value);
  std::string* _internal_mutable_objectinstancename();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ObjectInstanceNameReservationSucceeded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objectinstancename_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class ObjectInstanceNameReservationFailed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ObjectInstanceNameReservationFailed) */ {
 public:
  inline ObjectInstanceNameReservationFailed() : ObjectInstanceNameReservationFailed(nullptr) {}
  ~ObjectInstanceNameReservationFailed() override;
  explicit PROTOBUF_CONSTEXPR ObjectInstanceNameReservationFailed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInstanceNameReservationFailed(const ObjectInstanceNameReservationFailed& from);
  ObjectInstanceNameReservationFailed(ObjectInstanceNameReservationFailed&& from) noexcept
    : ObjectInstanceNameReservationFailed() {
    *this = ::std::move(from);
  }

  inline ObjectInstanceNameReservationFailed& operator=(const ObjectInstanceNameReservationFailed& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInstanceNameReservationFailed& operator=(ObjectInstanceNameReservationFailed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInstanceNameReservationFailed& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInstanceNameReservationFailed* internal_default_instance() {
    return reinterpret_cast<const ObjectInstanceNameReservationFailed*>(
               &_ObjectInstanceNameReservationFailed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ObjectInstanceNameReservationFailed& a, ObjectInstanceNameReservationFailed& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInstanceNameReservationFailed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInstanceNameReservationFailed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectInstanceNameReservationFailed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectInstanceNameReservationFailed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectInstanceNameReservationFailed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectInstanceNameReservationFailed& from) {
    ObjectInstanceNameReservationFailed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInstanceNameReservationFailed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ObjectInstanceNameReservationFailed";
  }
  protected:
  explicit ObjectInstanceNameReservationFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInstanceNameFieldNumber = 1,
  };
  // string objectInstanceName = 1;
  void clear_objectinstancename();
  const std::string& objectinstancename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_objectinstancename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_objectinstancename();
  PROTOBUF_NODISCARD std::string* release_objectinstancename();
  void set_allocated_objectinstancename(std::string* objectinstancename);
  private:
  const std::string& _internal_objectinstancename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_objectinstancename(const std::string& value);
  std::string* _internal_mutable_objectinstancename();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ObjectInstanceNameReservationFailed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objectinstancename_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class MultipleObjectInstanceNameReservationSucceeded final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationSucceeded) */ {
 public:
  inline MultipleObjectInstanceNameReservationSucceeded() : MultipleObjectInstanceNameReservationSucceeded(nullptr) {}
  ~MultipleObjectInstanceNameReservationSucceeded() override;
  explicit PROTOBUF_CONSTEXPR MultipleObjectInstanceNameReservationSucceeded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultipleObjectInstanceNameReservationSucceeded(const MultipleObjectInstanceNameReservationSucceeded& from);
  MultipleObjectInstanceNameReservationSucceeded(MultipleObjectInstanceNameReservationSucceeded&& from) noexcept
    : MultipleObjectInstanceNameReservationSucceeded() {
    *this = ::std::move(from);
  }

  inline MultipleObjectInstanceNameReservationSucceeded& operator=(const MultipleObjectInstanceNameReservationSucceeded& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultipleObjectInstanceNameReservationSucceeded& operator=(MultipleObjectInstanceNameReservationSucceeded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultipleObjectInstanceNameReservationSucceeded& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultipleObjectInstanceNameReservationSucceeded* internal_default_instance() {
    return reinterpret_cast<const MultipleObjectInstanceNameReservationSucceeded*>(
               &_MultipleObjectInstanceNameReservationSucceeded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(MultipleObjectInstanceNameReservationSucceeded& a, MultipleObjectInstanceNameReservationSucceeded& b) {
    a.Swap(&b);
  }
  inline void Swap(MultipleObjectInstanceNameReservationSucceeded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultipleObjectInstanceNameReservationSucceeded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultipleObjectInstanceNameReservationSucceeded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultipleObjectInstanceNameReservationSucceeded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultipleObjectInstanceNameReservationSucceeded& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MultipleObjectInstanceNameReservationSucceeded& from) {
    MultipleObjectInstanceNameReservationSucceeded::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultipleObjectInstanceNameReservationSucceeded* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.MultipleObjectInstanceNameReservationSucceeded";
  }
  protected:
  explicit MultipleObjectInstanceNameReservationSucceeded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInstanceNamesFieldNumber = 1,
  };
  // repeated string objectInstanceNames = 1;
  int objectinstancenames_size() const;
  private:
  int _internal_objectinstancenames_size() const;
  public:
  void clear_objectinstancenames();
  const std::string& objectinstancenames(int index) const;
  std::string* mutable_objectinstancenames(int index);
  void set_objectinstancenames(int index, const std::string& value);
  void set_objectinstancenames(int index, std::string&& value);
  void set_objectinstancenames(int index, const char* value);
  void set_objectinstancenames(int index, const char* value, size_t size);
  std::string* add_objectinstancenames();
  void add_objectinstancenames(const std::string& value);
  void add_objectinstancenames(std::string&& value);
  void add_objectinstancenames(const char* value);
  void add_objectinstancenames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& objectinstancenames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_objectinstancenames();
  private:
  const std::string& _internal_objectinstancenames(int index) const;
  std::string* _internal_add_objectinstancenames();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationSucceeded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> objectinstancenames_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class MultipleObjectInstanceNameReservationFailed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationFailed) */ {
 public:
  inline MultipleObjectInstanceNameReservationFailed() : MultipleObjectInstanceNameReservationFailed(nullptr) {}
  ~MultipleObjectInstanceNameReservationFailed() override;
  explicit PROTOBUF_CONSTEXPR MultipleObjectInstanceNameReservationFailed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultipleObjectInstanceNameReservationFailed(const MultipleObjectInstanceNameReservationFailed& from);
  MultipleObjectInstanceNameReservationFailed(MultipleObjectInstanceNameReservationFailed&& from) noexcept
    : MultipleObjectInstanceNameReservationFailed() {
    *this = ::std::move(from);
  }

  inline MultipleObjectInstanceNameReservationFailed& operator=(const MultipleObjectInstanceNameReservationFailed& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultipleObjectInstanceNameReservationFailed& operator=(MultipleObjectInstanceNameReservationFailed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultipleObjectInstanceNameReservationFailed& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultipleObjectInstanceNameReservationFailed* internal_default_instance() {
    return reinterpret_cast<const MultipleObjectInstanceNameReservationFailed*>(
               &_MultipleObjectInstanceNameReservationFailed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(MultipleObjectInstanceNameReservationFailed& a, MultipleObjectInstanceNameReservationFailed& b) {
    a.Swap(&b);
  }
  inline void Swap(MultipleObjectInstanceNameReservationFailed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultipleObjectInstanceNameReservationFailed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultipleObjectInstanceNameReservationFailed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultipleObjectInstanceNameReservationFailed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MultipleObjectInstanceNameReservationFailed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MultipleObjectInstanceNameReservationFailed& from) {
    MultipleObjectInstanceNameReservationFailed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultipleObjectInstanceNameReservationFailed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.MultipleObjectInstanceNameReservationFailed";
  }
  protected:
  explicit MultipleObjectInstanceNameReservationFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInstanceNamesFieldNumber = 1,
  };
  // repeated string objectInstanceNames = 1;
  int objectinstancenames_size() const;
  private:
  int _internal_objectinstancenames_size() const;
  public:
  void clear_objectinstancenames();
  const std::string& objectinstancenames(int index) const;
  std::string* mutable_objectinstancenames(int index);
  void set_objectinstancenames(int index, const std::string& value);
  void set_objectinstancenames(int index, std::string&& value);
  void set_objectinstancenames(int index, const char* value);
  void set_objectinstancenames(int index, const char* value, size_t size);
  std::string* add_objectinstancenames();
  void add_objectinstancenames(const std::string& value);
  void add_objectinstancenames(std::string&& value);
  void add_objectinstancenames(const char* value);
  void add_objectinstancenames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& objectinstancenames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_objectinstancenames();
  private:
  const std::string& _internal_objectinstancenames(int index) const;
  std::string* _internal_add_objectinstancenames();
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationFailed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> objectinstancenames_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class DiscoverObjectInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.DiscoverObjectInstance) */ {
 public:
  inline DiscoverObjectInstance() : DiscoverObjectInstance(nullptr) {}
  ~DiscoverObjectInstance() override;
  explicit PROTOBUF_CONSTEXPR DiscoverObjectInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoverObjectInstance(const DiscoverObjectInstance& from);
  DiscoverObjectInstance(DiscoverObjectInstance&& from) noexcept
    : DiscoverObjectInstance() {
    *this = ::std::move(from);
  }

  inline DiscoverObjectInstance& operator=(const DiscoverObjectInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoverObjectInstance& operator=(DiscoverObjectInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoverObjectInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoverObjectInstance* internal_default_instance() {
    return reinterpret_cast<const DiscoverObjectInstance*>(
               &_DiscoverObjectInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(DiscoverObjectInstance& a, DiscoverObjectInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoverObjectInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoverObjectInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoverObjectInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoverObjectInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscoverObjectInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DiscoverObjectInstance& from) {
    DiscoverObjectInstance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoverObjectInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.DiscoverObjectInstance";
  }
  protected:
  explicit DiscoverObjectInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInstanceNameFieldNumber = 3,
    kObjectInstanceFieldNumber = 1,
    kObjectClassFieldNumber = 2,
    kProducingFederateFieldNumber = 4,
  };
  // string objectInstanceName = 3;
  void clear_objectinstancename();
  const std::string& objectinstancename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_objectinstancename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_objectinstancename();
  PROTOBUF_NODISCARD std::string* release_objectinstancename();
  void set_allocated_objectinstancename(std::string* objectinstancename);
  private:
  const std::string& _internal_objectinstancename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_objectinstancename(const std::string& value);
  std::string* _internal_mutable_objectinstancename();
  public:

  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.ObjectClassHandle objectClass = 2;
  bool has_objectclass() const;
  private:
  bool _internal_has_objectclass() const;
  public:
  void clear_objectclass();
  const ::rti1516_2025::fedpro::ObjectClassHandle& objectclass() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectClassHandle* release_objectclass();
  ::rti1516_2025::fedpro::ObjectClassHandle* mutable_objectclass();
  void set_allocated_objectclass(::rti1516_2025::fedpro::ObjectClassHandle* objectclass);
  private:
  const ::rti1516_2025::fedpro::ObjectClassHandle& _internal_objectclass() const;
  ::rti1516_2025::fedpro::ObjectClassHandle* _internal_mutable_objectclass();
  public:
  void unsafe_arena_set_allocated_objectclass(
      ::rti1516_2025::fedpro::ObjectClassHandle* objectclass);
  ::rti1516_2025::fedpro::ObjectClassHandle* unsafe_arena_release_objectclass();

  // .rti1516_2025.fedpro.FederateHandle producingFederate = 4;
  bool has_producingfederate() const;
  private:
  bool _internal_has_producingfederate() const;
  public:
  void clear_producingfederate();
  const ::rti1516_2025::fedpro::FederateHandle& producingfederate() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandle* release_producingfederate();
  ::rti1516_2025::fedpro::FederateHandle* mutable_producingfederate();
  void set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate);
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_producingfederate() const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_mutable_producingfederate();
  public:
  void unsafe_arena_set_allocated_producingfederate(
      ::rti1516_2025::fedpro::FederateHandle* producingfederate);
  ::rti1516_2025::fedpro::FederateHandle* unsafe_arena_release_producingfederate();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.DiscoverObjectInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objectinstancename_;
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::ObjectClassHandle* objectclass_;
    ::rti1516_2025::fedpro::FederateHandle* producingfederate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class ReflectAttributeValues final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ReflectAttributeValues) */ {
 public:
  inline ReflectAttributeValues() : ReflectAttributeValues(nullptr) {}
  ~ReflectAttributeValues() override;
  explicit PROTOBUF_CONSTEXPR ReflectAttributeValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReflectAttributeValues(const ReflectAttributeValues& from);
  ReflectAttributeValues(ReflectAttributeValues&& from) noexcept
    : ReflectAttributeValues() {
    *this = ::std::move(from);
  }

  inline ReflectAttributeValues& operator=(const ReflectAttributeValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReflectAttributeValues& operator=(ReflectAttributeValues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReflectAttributeValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReflectAttributeValues* internal_default_instance() {
    return reinterpret_cast<const ReflectAttributeValues*>(
               &_ReflectAttributeValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ReflectAttributeValues& a, ReflectAttributeValues& b) {
    a.Swap(&b);
  }
  inline void Swap(ReflectAttributeValues* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReflectAttributeValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReflectAttributeValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReflectAttributeValues>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReflectAttributeValues& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReflectAttributeValues& from) {
    ReflectAttributeValues::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReflectAttributeValues* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ReflectAttributeValues";
  }
  protected:
  explicit ReflectAttributeValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSuppliedTagFieldNumber = 3,
    kObjectInstanceFieldNumber = 1,
    kAttributeValuesFieldNumber = 2,
    kTransportationTypeFieldNumber = 4,
    kProducingFederateFieldNumber = 5,
    kOptionalSentRegionsFieldNumber = 6,
  };
  // bytes userSuppliedTag = 3;
  void clear_usersuppliedtag();
  const std::string& usersuppliedtag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usersuppliedtag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usersuppliedtag();
  PROTOBUF_NODISCARD std::string* release_usersuppliedtag();
  void set_allocated_usersuppliedtag(std::string* usersuppliedtag);
  private:
  const std::string& _internal_usersuppliedtag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usersuppliedtag(const std::string& value);
  std::string* _internal_mutable_usersuppliedtag();
  public:

  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandleValueMap attributeValues = 2;
  bool has_attributevalues() const;
  private:
  bool _internal_has_attributevalues() const;
  public:
  void clear_attributevalues();
  const ::rti1516_2025::fedpro::AttributeHandleValueMap& attributevalues() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleValueMap* release_attributevalues();
  ::rti1516_2025::fedpro::AttributeHandleValueMap* mutable_attributevalues();
  void set_allocated_attributevalues(::rti1516_2025::fedpro::AttributeHandleValueMap* attributevalues);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleValueMap& _internal_attributevalues() const;
  ::rti1516_2025::fedpro::AttributeHandleValueMap* _internal_mutable_attributevalues();
  public:
  void unsafe_arena_set_allocated_attributevalues(
      ::rti1516_2025::fedpro::AttributeHandleValueMap* attributevalues);
  ::rti1516_2025::fedpro::AttributeHandleValueMap* unsafe_arena_release_attributevalues();

  // .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 4;
  bool has_transportationtype() const;
  private:
  bool _internal_has_transportationtype() const;
  public:
  void clear_transportationtype();
  const ::rti1516_2025::fedpro::TransportationTypeHandle& transportationtype() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::TransportationTypeHandle* release_transportationtype();
  ::rti1516_2025::fedpro::TransportationTypeHandle* mutable_transportationtype();
  void set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  private:
  const ::rti1516_2025::fedpro::TransportationTypeHandle& _internal_transportationtype() const;
  ::rti1516_2025::fedpro::TransportationTypeHandle* _internal_mutable_transportationtype();
  public:
  void unsafe_arena_set_allocated_transportationtype(
      ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  ::rti1516_2025::fedpro::TransportationTypeHandle* unsafe_arena_release_transportationtype();

  // .rti1516_2025.fedpro.FederateHandle producingFederate = 5;
  bool has_producingfederate() const;
  private:
  bool _internal_has_producingfederate() const;
  public:
  void clear_producingfederate();
  const ::rti1516_2025::fedpro::FederateHandle& producingfederate() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandle* release_producingfederate();
  ::rti1516_2025::fedpro::FederateHandle* mutable_producingfederate();
  void set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate);
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_producingfederate() const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_mutable_producingfederate();
  public:
  void unsafe_arena_set_allocated_producingfederate(
      ::rti1516_2025::fedpro::FederateHandle* producingfederate);
  ::rti1516_2025::fedpro::FederateHandle* unsafe_arena_release_producingfederate();

  // .rti1516_2025.fedpro.ConveyedRegionSet optionalSentRegions = 6;
  bool has_optionalsentregions() const;
  private:
  bool _internal_has_optionalsentregions() const;
  public:
  void clear_optionalsentregions();
  const ::rti1516_2025::fedpro::ConveyedRegionSet& optionalsentregions() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ConveyedRegionSet* release_optionalsentregions();
  ::rti1516_2025::fedpro::ConveyedRegionSet* mutable_optionalsentregions();
  void set_allocated_optionalsentregions(::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions);
  private:
  const ::rti1516_2025::fedpro::ConveyedRegionSet& _internal_optionalsentregions() const;
  ::rti1516_2025::fedpro::ConveyedRegionSet* _internal_mutable_optionalsentregions();
  public:
  void unsafe_arena_set_allocated_optionalsentregions(
      ::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions);
  ::rti1516_2025::fedpro::ConveyedRegionSet* unsafe_arena_release_optionalsentregions();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ReflectAttributeValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersuppliedtag_;
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandleValueMap* attributevalues_;
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype_;
    ::rti1516_2025::fedpro::FederateHandle* producingfederate_;
    ::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class ReflectAttributeValuesWithTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ReflectAttributeValuesWithTime) */ {
 public:
  inline ReflectAttributeValuesWithTime() : ReflectAttributeValuesWithTime(nullptr) {}
  ~ReflectAttributeValuesWithTime() override;
  explicit PROTOBUF_CONSTEXPR ReflectAttributeValuesWithTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReflectAttributeValuesWithTime(const ReflectAttributeValuesWithTime& from);
  ReflectAttributeValuesWithTime(ReflectAttributeValuesWithTime&& from) noexcept
    : ReflectAttributeValuesWithTime() {
    *this = ::std::move(from);
  }

  inline ReflectAttributeValuesWithTime& operator=(const ReflectAttributeValuesWithTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReflectAttributeValuesWithTime& operator=(ReflectAttributeValuesWithTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReflectAttributeValuesWithTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReflectAttributeValuesWithTime* internal_default_instance() {
    return reinterpret_cast<const ReflectAttributeValuesWithTime*>(
               &_ReflectAttributeValuesWithTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ReflectAttributeValuesWithTime& a, ReflectAttributeValuesWithTime& b) {
    a.Swap(&b);
  }
  inline void Swap(ReflectAttributeValuesWithTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReflectAttributeValuesWithTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReflectAttributeValuesWithTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReflectAttributeValuesWithTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReflectAttributeValuesWithTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReflectAttributeValuesWithTime& from) {
    ReflectAttributeValuesWithTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReflectAttributeValuesWithTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ReflectAttributeValuesWithTime";
  }
  protected:
  explicit ReflectAttributeValuesWithTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSuppliedTagFieldNumber = 3,
    kObjectInstanceFieldNumber = 1,
    kAttributeValuesFieldNumber = 2,
    kTransportationTypeFieldNumber = 4,
    kProducingFederateFieldNumber = 5,
    kOptionalSentRegionsFieldNumber = 6,
    kTimeFieldNumber = 7,
    kOptionalRetractionFieldNumber = 10,
    kSentOrderTypeFieldNumber = 8,
    kReceivedOrderTypeFieldNumber = 9,
  };
  // bytes userSuppliedTag = 3;
  void clear_usersuppliedtag();
  const std::string& usersuppliedtag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usersuppliedtag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usersuppliedtag();
  PROTOBUF_NODISCARD std::string* release_usersuppliedtag();
  void set_allocated_usersuppliedtag(std::string* usersuppliedtag);
  private:
  const std::string& _internal_usersuppliedtag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usersuppliedtag(const std::string& value);
  std::string* _internal_mutable_usersuppliedtag();
  public:

  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandleValueMap attributeValues = 2;
  bool has_attributevalues() const;
  private:
  bool _internal_has_attributevalues() const;
  public:
  void clear_attributevalues();
  const ::rti1516_2025::fedpro::AttributeHandleValueMap& attributevalues() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleValueMap* release_attributevalues();
  ::rti1516_2025::fedpro::AttributeHandleValueMap* mutable_attributevalues();
  void set_allocated_attributevalues(::rti1516_2025::fedpro::AttributeHandleValueMap* attributevalues);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleValueMap& _internal_attributevalues() const;
  ::rti1516_2025::fedpro::AttributeHandleValueMap* _internal_mutable_attributevalues();
  public:
  void unsafe_arena_set_allocated_attributevalues(
      ::rti1516_2025::fedpro::AttributeHandleValueMap* attributevalues);
  ::rti1516_2025::fedpro::AttributeHandleValueMap* unsafe_arena_release_attributevalues();

  // .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 4;
  bool has_transportationtype() const;
  private:
  bool _internal_has_transportationtype() const;
  public:
  void clear_transportationtype();
  const ::rti1516_2025::fedpro::TransportationTypeHandle& transportationtype() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::TransportationTypeHandle* release_transportationtype();
  ::rti1516_2025::fedpro::TransportationTypeHandle* mutable_transportationtype();
  void set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  private:
  const ::rti1516_2025::fedpro::TransportationTypeHandle& _internal_transportationtype() const;
  ::rti1516_2025::fedpro::TransportationTypeHandle* _internal_mutable_transportationtype();
  public:
  void unsafe_arena_set_allocated_transportationtype(
      ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  ::rti1516_2025::fedpro::TransportationTypeHandle* unsafe_arena_release_transportationtype();

  // .rti1516_2025.fedpro.FederateHandle producingFederate = 5;
  bool has_producingfederate() const;
  private:
  bool _internal_has_producingfederate() const;
  public:
  void clear_producingfederate();
  const ::rti1516_2025::fedpro::FederateHandle& producingfederate() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandle* release_producingfederate();
  ::rti1516_2025::fedpro::FederateHandle* mutable_producingfederate();
  void set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate);
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_producingfederate() const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_mutable_producingfederate();
  public:
  void unsafe_arena_set_allocated_producingfederate(
      ::rti1516_2025::fedpro::FederateHandle* producingfederate);
  ::rti1516_2025::fedpro::FederateHandle* unsafe_arena_release_producingfederate();

  // .rti1516_2025.fedpro.ConveyedRegionSet optionalSentRegions = 6;
  bool has_optionalsentregions() const;
  private:
  bool _internal_has_optionalsentregions() const;
  public:
  void clear_optionalsentregions();
  const ::rti1516_2025::fedpro::ConveyedRegionSet& optionalsentregions() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ConveyedRegionSet* release_optionalsentregions();
  ::rti1516_2025::fedpro::ConveyedRegionSet* mutable_optionalsentregions();
  void set_allocated_optionalsentregions(::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions);
  private:
  const ::rti1516_2025::fedpro::ConveyedRegionSet& _internal_optionalsentregions() const;
  ::rti1516_2025::fedpro::ConveyedRegionSet* _internal_mutable_optionalsentregions();
  public:
  void unsafe_arena_set_allocated_optionalsentregions(
      ::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions);
  ::rti1516_2025::fedpro::ConveyedRegionSet* unsafe_arena_release_optionalsentregions();

  // .rti1516_2025.fedpro.LogicalTime time = 7;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::rti1516_2025::fedpro::LogicalTime& time() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::LogicalTime* release_time();
  ::rti1516_2025::fedpro::LogicalTime* mutable_time();
  void set_allocated_time(::rti1516_2025::fedpro::LogicalTime* time);
  private:
  const ::rti1516_2025::fedpro::LogicalTime& _internal_time() const;
  ::rti1516_2025::fedpro::LogicalTime* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::rti1516_2025::fedpro::LogicalTime* time);
  ::rti1516_2025::fedpro::LogicalTime* unsafe_arena_release_time();

  // .rti1516_2025.fedpro.MessageRetractionHandle optionalRetraction = 10;
  bool has_optionalretraction() const;
  private:
  bool _internal_has_optionalretraction() const;
  public:
  void clear_optionalretraction();
  const ::rti1516_2025::fedpro::MessageRetractionHandle& optionalretraction() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::MessageRetractionHandle* release_optionalretraction();
  ::rti1516_2025::fedpro::MessageRetractionHandle* mutable_optionalretraction();
  void set_allocated_optionalretraction(::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction);
  private:
  const ::rti1516_2025::fedpro::MessageRetractionHandle& _internal_optionalretraction() const;
  ::rti1516_2025::fedpro::MessageRetractionHandle* _internal_mutable_optionalretraction();
  public:
  void unsafe_arena_set_allocated_optionalretraction(
      ::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction);
  ::rti1516_2025::fedpro::MessageRetractionHandle* unsafe_arena_release_optionalretraction();

  // .rti1516_2025.fedpro.OrderType sentOrderType = 8;
  void clear_sentordertype();
  ::rti1516_2025::fedpro::OrderType sentordertype() const;
  void set_sentordertype(::rti1516_2025::fedpro::OrderType value);
  private:
  ::rti1516_2025::fedpro::OrderType _internal_sentordertype() const;
  void _internal_set_sentordertype(::rti1516_2025::fedpro::OrderType value);
  public:

  // .rti1516_2025.fedpro.OrderType receivedOrderType = 9;
  void clear_receivedordertype();
  ::rti1516_2025::fedpro::OrderType receivedordertype() const;
  void set_receivedordertype(::rti1516_2025::fedpro::OrderType value);
  private:
  ::rti1516_2025::fedpro::OrderType _internal_receivedordertype() const;
  void _internal_set_receivedordertype(::rti1516_2025::fedpro::OrderType value);
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ReflectAttributeValuesWithTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersuppliedtag_;
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandleValueMap* attributevalues_;
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype_;
    ::rti1516_2025::fedpro::FederateHandle* producingfederate_;
    ::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions_;
    ::rti1516_2025::fedpro::LogicalTime* time_;
    ::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction_;
    int sentordertype_;
    int receivedordertype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class ReceiveInteraction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ReceiveInteraction) */ {
 public:
  inline ReceiveInteraction() : ReceiveInteraction(nullptr) {}
  ~ReceiveInteraction() override;
  explicit PROTOBUF_CONSTEXPR ReceiveInteraction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReceiveInteraction(const ReceiveInteraction& from);
  ReceiveInteraction(ReceiveInteraction&& from) noexcept
    : ReceiveInteraction() {
    *this = ::std::move(from);
  }

  inline ReceiveInteraction& operator=(const ReceiveInteraction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceiveInteraction& operator=(ReceiveInteraction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReceiveInteraction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReceiveInteraction* internal_default_instance() {
    return reinterpret_cast<const ReceiveInteraction*>(
               &_ReceiveInteraction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ReceiveInteraction& a, ReceiveInteraction& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceiveInteraction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceiveInteraction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReceiveInteraction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReceiveInteraction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReceiveInteraction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReceiveInteraction& from) {
    ReceiveInteraction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceiveInteraction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ReceiveInteraction";
  }
  protected:
  explicit ReceiveInteraction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSuppliedTagFieldNumber = 3,
    kInteractionClassFieldNumber = 1,
    kParameterValuesFieldNumber = 2,
    kTransportationTypeFieldNumber = 4,
    kProducingFederateFieldNumber = 5,
    kOptionalSentRegionsFieldNumber = 6,
  };
  // bytes userSuppliedTag = 3;
  void clear_usersuppliedtag();
  const std::string& usersuppliedtag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usersuppliedtag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usersuppliedtag();
  PROTOBUF_NODISCARD std::string* release_usersuppliedtag();
  void set_allocated_usersuppliedtag(std::string* usersuppliedtag);
  private:
  const std::string& _internal_usersuppliedtag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usersuppliedtag(const std::string& value);
  std::string* _internal_mutable_usersuppliedtag();
  public:

  // .rti1516_2025.fedpro.InteractionClassHandle interactionClass = 1;
  bool has_interactionclass() const;
  private:
  bool _internal_has_interactionclass() const;
  public:
  void clear_interactionclass();
  const ::rti1516_2025::fedpro::InteractionClassHandle& interactionclass() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::InteractionClassHandle* release_interactionclass();
  ::rti1516_2025::fedpro::InteractionClassHandle* mutable_interactionclass();
  void set_allocated_interactionclass(::rti1516_2025::fedpro::InteractionClassHandle* interactionclass);
  private:
  const ::rti1516_2025::fedpro::InteractionClassHandle& _internal_interactionclass() const;
  ::rti1516_2025::fedpro::InteractionClassHandle* _internal_mutable_interactionclass();
  public:
  void unsafe_arena_set_allocated_interactionclass(
      ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass);
  ::rti1516_2025::fedpro::InteractionClassHandle* unsafe_arena_release_interactionclass();

  // .rti1516_2025.fedpro.ParameterHandleValueMap parameterValues = 2;
  bool has_parametervalues() const;
  private:
  bool _internal_has_parametervalues() const;
  public:
  void clear_parametervalues();
  const ::rti1516_2025::fedpro::ParameterHandleValueMap& parametervalues() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ParameterHandleValueMap* release_parametervalues();
  ::rti1516_2025::fedpro::ParameterHandleValueMap* mutable_parametervalues();
  void set_allocated_parametervalues(::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues);
  private:
  const ::rti1516_2025::fedpro::ParameterHandleValueMap& _internal_parametervalues() const;
  ::rti1516_2025::fedpro::ParameterHandleValueMap* _internal_mutable_parametervalues();
  public:
  void unsafe_arena_set_allocated_parametervalues(
      ::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues);
  ::rti1516_2025::fedpro::ParameterHandleValueMap* unsafe_arena_release_parametervalues();

  // .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 4;
  bool has_transportationtype() const;
  private:
  bool _internal_has_transportationtype() const;
  public:
  void clear_transportationtype();
  const ::rti1516_2025::fedpro::TransportationTypeHandle& transportationtype() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::TransportationTypeHandle* release_transportationtype();
  ::rti1516_2025::fedpro::TransportationTypeHandle* mutable_transportationtype();
  void set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  private:
  const ::rti1516_2025::fedpro::TransportationTypeHandle& _internal_transportationtype() const;
  ::rti1516_2025::fedpro::TransportationTypeHandle* _internal_mutable_transportationtype();
  public:
  void unsafe_arena_set_allocated_transportationtype(
      ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  ::rti1516_2025::fedpro::TransportationTypeHandle* unsafe_arena_release_transportationtype();

  // .rti1516_2025.fedpro.FederateHandle producingFederate = 5;
  bool has_producingfederate() const;
  private:
  bool _internal_has_producingfederate() const;
  public:
  void clear_producingfederate();
  const ::rti1516_2025::fedpro::FederateHandle& producingfederate() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandle* release_producingfederate();
  ::rti1516_2025::fedpro::FederateHandle* mutable_producingfederate();
  void set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate);
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_producingfederate() const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_mutable_producingfederate();
  public:
  void unsafe_arena_set_allocated_producingfederate(
      ::rti1516_2025::fedpro::FederateHandle* producingfederate);
  ::rti1516_2025::fedpro::FederateHandle* unsafe_arena_release_producingfederate();

  // .rti1516_2025.fedpro.ConveyedRegionSet optionalSentRegions = 6;
  bool has_optionalsentregions() const;
  private:
  bool _internal_has_optionalsentregions() const;
  public:
  void clear_optionalsentregions();
  const ::rti1516_2025::fedpro::ConveyedRegionSet& optionalsentregions() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ConveyedRegionSet* release_optionalsentregions();
  ::rti1516_2025::fedpro::ConveyedRegionSet* mutable_optionalsentregions();
  void set_allocated_optionalsentregions(::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions);
  private:
  const ::rti1516_2025::fedpro::ConveyedRegionSet& _internal_optionalsentregions() const;
  ::rti1516_2025::fedpro::ConveyedRegionSet* _internal_mutable_optionalsentregions();
  public:
  void unsafe_arena_set_allocated_optionalsentregions(
      ::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions);
  ::rti1516_2025::fedpro::ConveyedRegionSet* unsafe_arena_release_optionalsentregions();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ReceiveInteraction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersuppliedtag_;
    ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass_;
    ::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues_;
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype_;
    ::rti1516_2025::fedpro::FederateHandle* producingfederate_;
    ::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class ReceiveInteractionWithTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ReceiveInteractionWithTime) */ {
 public:
  inline ReceiveInteractionWithTime() : ReceiveInteractionWithTime(nullptr) {}
  ~ReceiveInteractionWithTime() override;
  explicit PROTOBUF_CONSTEXPR ReceiveInteractionWithTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReceiveInteractionWithTime(const ReceiveInteractionWithTime& from);
  ReceiveInteractionWithTime(ReceiveInteractionWithTime&& from) noexcept
    : ReceiveInteractionWithTime() {
    *this = ::std::move(from);
  }

  inline ReceiveInteractionWithTime& operator=(const ReceiveInteractionWithTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceiveInteractionWithTime& operator=(ReceiveInteractionWithTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReceiveInteractionWithTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReceiveInteractionWithTime* internal_default_instance() {
    return reinterpret_cast<const ReceiveInteractionWithTime*>(
               &_ReceiveInteractionWithTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ReceiveInteractionWithTime& a, ReceiveInteractionWithTime& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceiveInteractionWithTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceiveInteractionWithTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReceiveInteractionWithTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReceiveInteractionWithTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReceiveInteractionWithTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReceiveInteractionWithTime& from) {
    ReceiveInteractionWithTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceiveInteractionWithTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ReceiveInteractionWithTime";
  }
  protected:
  explicit ReceiveInteractionWithTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSuppliedTagFieldNumber = 3,
    kInteractionClassFieldNumber = 1,
    kParameterValuesFieldNumber = 2,
    kTransportationTypeFieldNumber = 4,
    kProducingFederateFieldNumber = 5,
    kOptionalSentRegionsFieldNumber = 6,
    kTimeFieldNumber = 7,
    kOptionalRetractionFieldNumber = 10,
    kSentOrderTypeFieldNumber = 8,
    kReceivedOrderTypeFieldNumber = 9,
  };
  // bytes userSuppliedTag = 3;
  void clear_usersuppliedtag();
  const std::string& usersuppliedtag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usersuppliedtag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usersuppliedtag();
  PROTOBUF_NODISCARD std::string* release_usersuppliedtag();
  void set_allocated_usersuppliedtag(std::string* usersuppliedtag);
  private:
  const std::string& _internal_usersuppliedtag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usersuppliedtag(const std::string& value);
  std::string* _internal_mutable_usersuppliedtag();
  public:

  // .rti1516_2025.fedpro.InteractionClassHandle interactionClass = 1;
  bool has_interactionclass() const;
  private:
  bool _internal_has_interactionclass() const;
  public:
  void clear_interactionclass();
  const ::rti1516_2025::fedpro::InteractionClassHandle& interactionclass() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::InteractionClassHandle* release_interactionclass();
  ::rti1516_2025::fedpro::InteractionClassHandle* mutable_interactionclass();
  void set_allocated_interactionclass(::rti1516_2025::fedpro::InteractionClassHandle* interactionclass);
  private:
  const ::rti1516_2025::fedpro::InteractionClassHandle& _internal_interactionclass() const;
  ::rti1516_2025::fedpro::InteractionClassHandle* _internal_mutable_interactionclass();
  public:
  void unsafe_arena_set_allocated_interactionclass(
      ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass);
  ::rti1516_2025::fedpro::InteractionClassHandle* unsafe_arena_release_interactionclass();

  // .rti1516_2025.fedpro.ParameterHandleValueMap parameterValues = 2;
  bool has_parametervalues() const;
  private:
  bool _internal_has_parametervalues() const;
  public:
  void clear_parametervalues();
  const ::rti1516_2025::fedpro::ParameterHandleValueMap& parametervalues() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ParameterHandleValueMap* release_parametervalues();
  ::rti1516_2025::fedpro::ParameterHandleValueMap* mutable_parametervalues();
  void set_allocated_parametervalues(::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues);
  private:
  const ::rti1516_2025::fedpro::ParameterHandleValueMap& _internal_parametervalues() const;
  ::rti1516_2025::fedpro::ParameterHandleValueMap* _internal_mutable_parametervalues();
  public:
  void unsafe_arena_set_allocated_parametervalues(
      ::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues);
  ::rti1516_2025::fedpro::ParameterHandleValueMap* unsafe_arena_release_parametervalues();

  // .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 4;
  bool has_transportationtype() const;
  private:
  bool _internal_has_transportationtype() const;
  public:
  void clear_transportationtype();
  const ::rti1516_2025::fedpro::TransportationTypeHandle& transportationtype() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::TransportationTypeHandle* release_transportationtype();
  ::rti1516_2025::fedpro::TransportationTypeHandle* mutable_transportationtype();
  void set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  private:
  const ::rti1516_2025::fedpro::TransportationTypeHandle& _internal_transportationtype() const;
  ::rti1516_2025::fedpro::TransportationTypeHandle* _internal_mutable_transportationtype();
  public:
  void unsafe_arena_set_allocated_transportationtype(
      ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  ::rti1516_2025::fedpro::TransportationTypeHandle* unsafe_arena_release_transportationtype();

  // .rti1516_2025.fedpro.FederateHandle producingFederate = 5;
  bool has_producingfederate() const;
  private:
  bool _internal_has_producingfederate() const;
  public:
  void clear_producingfederate();
  const ::rti1516_2025::fedpro::FederateHandle& producingfederate() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandle* release_producingfederate();
  ::rti1516_2025::fedpro::FederateHandle* mutable_producingfederate();
  void set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate);
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_producingfederate() const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_mutable_producingfederate();
  public:
  void unsafe_arena_set_allocated_producingfederate(
      ::rti1516_2025::fedpro::FederateHandle* producingfederate);
  ::rti1516_2025::fedpro::FederateHandle* unsafe_arena_release_producingfederate();

  // .rti1516_2025.fedpro.ConveyedRegionSet optionalSentRegions = 6;
  bool has_optionalsentregions() const;
  private:
  bool _internal_has_optionalsentregions() const;
  public:
  void clear_optionalsentregions();
  const ::rti1516_2025::fedpro::ConveyedRegionSet& optionalsentregions() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ConveyedRegionSet* release_optionalsentregions();
  ::rti1516_2025::fedpro::ConveyedRegionSet* mutable_optionalsentregions();
  void set_allocated_optionalsentregions(::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions);
  private:
  const ::rti1516_2025::fedpro::ConveyedRegionSet& _internal_optionalsentregions() const;
  ::rti1516_2025::fedpro::ConveyedRegionSet* _internal_mutable_optionalsentregions();
  public:
  void unsafe_arena_set_allocated_optionalsentregions(
      ::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions);
  ::rti1516_2025::fedpro::ConveyedRegionSet* unsafe_arena_release_optionalsentregions();

  // .rti1516_2025.fedpro.LogicalTime time = 7;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::rti1516_2025::fedpro::LogicalTime& time() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::LogicalTime* release_time();
  ::rti1516_2025::fedpro::LogicalTime* mutable_time();
  void set_allocated_time(::rti1516_2025::fedpro::LogicalTime* time);
  private:
  const ::rti1516_2025::fedpro::LogicalTime& _internal_time() const;
  ::rti1516_2025::fedpro::LogicalTime* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::rti1516_2025::fedpro::LogicalTime* time);
  ::rti1516_2025::fedpro::LogicalTime* unsafe_arena_release_time();

  // .rti1516_2025.fedpro.MessageRetractionHandle optionalRetraction = 10;
  bool has_optionalretraction() const;
  private:
  bool _internal_has_optionalretraction() const;
  public:
  void clear_optionalretraction();
  const ::rti1516_2025::fedpro::MessageRetractionHandle& optionalretraction() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::MessageRetractionHandle* release_optionalretraction();
  ::rti1516_2025::fedpro::MessageRetractionHandle* mutable_optionalretraction();
  void set_allocated_optionalretraction(::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction);
  private:
  const ::rti1516_2025::fedpro::MessageRetractionHandle& _internal_optionalretraction() const;
  ::rti1516_2025::fedpro::MessageRetractionHandle* _internal_mutable_optionalretraction();
  public:
  void unsafe_arena_set_allocated_optionalretraction(
      ::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction);
  ::rti1516_2025::fedpro::MessageRetractionHandle* unsafe_arena_release_optionalretraction();

  // .rti1516_2025.fedpro.OrderType sentOrderType = 8;
  void clear_sentordertype();
  ::rti1516_2025::fedpro::OrderType sentordertype() const;
  void set_sentordertype(::rti1516_2025::fedpro::OrderType value);
  private:
  ::rti1516_2025::fedpro::OrderType _internal_sentordertype() const;
  void _internal_set_sentordertype(::rti1516_2025::fedpro::OrderType value);
  public:

  // .rti1516_2025.fedpro.OrderType receivedOrderType = 9;
  void clear_receivedordertype();
  ::rti1516_2025::fedpro::OrderType receivedordertype() const;
  void set_receivedordertype(::rti1516_2025::fedpro::OrderType value);
  private:
  ::rti1516_2025::fedpro::OrderType _internal_receivedordertype() const;
  void _internal_set_receivedordertype(::rti1516_2025::fedpro::OrderType value);
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ReceiveInteractionWithTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersuppliedtag_;
    ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass_;
    ::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues_;
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype_;
    ::rti1516_2025::fedpro::FederateHandle* producingfederate_;
    ::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions_;
    ::rti1516_2025::fedpro::LogicalTime* time_;
    ::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction_;
    int sentordertype_;
    int receivedordertype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class ReceiveDirectedInteraction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ReceiveDirectedInteraction) */ {
 public:
  inline ReceiveDirectedInteraction() : ReceiveDirectedInteraction(nullptr) {}
  ~ReceiveDirectedInteraction() override;
  explicit PROTOBUF_CONSTEXPR ReceiveDirectedInteraction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReceiveDirectedInteraction(const ReceiveDirectedInteraction& from);
  ReceiveDirectedInteraction(ReceiveDirectedInteraction&& from) noexcept
    : ReceiveDirectedInteraction() {
    *this = ::std::move(from);
  }

  inline ReceiveDirectedInteraction& operator=(const ReceiveDirectedInteraction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceiveDirectedInteraction& operator=(ReceiveDirectedInteraction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReceiveDirectedInteraction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReceiveDirectedInteraction* internal_default_instance() {
    return reinterpret_cast<const ReceiveDirectedInteraction*>(
               &_ReceiveDirectedInteraction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ReceiveDirectedInteraction& a, ReceiveDirectedInteraction& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceiveDirectedInteraction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceiveDirectedInteraction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReceiveDirectedInteraction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReceiveDirectedInteraction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReceiveDirectedInteraction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReceiveDirectedInteraction& from) {
    ReceiveDirectedInteraction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceiveDirectedInteraction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ReceiveDirectedInteraction";
  }
  protected:
  explicit ReceiveDirectedInteraction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSuppliedTagFieldNumber = 4,
    kInteractionClassFieldNumber = 1,
    kObjectInstanceFieldNumber = 2,
    kParameterValuesFieldNumber = 3,
    kTransportationTypeFieldNumber = 5,
    kProducingFederateFieldNumber = 6,
  };
  // bytes userSuppliedTag = 4;
  void clear_usersuppliedtag();
  const std::string& usersuppliedtag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usersuppliedtag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usersuppliedtag();
  PROTOBUF_NODISCARD std::string* release_usersuppliedtag();
  void set_allocated_usersuppliedtag(std::string* usersuppliedtag);
  private:
  const std::string& _internal_usersuppliedtag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usersuppliedtag(const std::string& value);
  std::string* _internal_mutable_usersuppliedtag();
  public:

  // .rti1516_2025.fedpro.InteractionClassHandle interactionClass = 1;
  bool has_interactionclass() const;
  private:
  bool _internal_has_interactionclass() const;
  public:
  void clear_interactionclass();
  const ::rti1516_2025::fedpro::InteractionClassHandle& interactionclass() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::InteractionClassHandle* release_interactionclass();
  ::rti1516_2025::fedpro::InteractionClassHandle* mutable_interactionclass();
  void set_allocated_interactionclass(::rti1516_2025::fedpro::InteractionClassHandle* interactionclass);
  private:
  const ::rti1516_2025::fedpro::InteractionClassHandle& _internal_interactionclass() const;
  ::rti1516_2025::fedpro::InteractionClassHandle* _internal_mutable_interactionclass();
  public:
  void unsafe_arena_set_allocated_interactionclass(
      ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass);
  ::rti1516_2025::fedpro::InteractionClassHandle* unsafe_arena_release_interactionclass();

  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 2;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.ParameterHandleValueMap parameterValues = 3;
  bool has_parametervalues() const;
  private:
  bool _internal_has_parametervalues() const;
  public:
  void clear_parametervalues();
  const ::rti1516_2025::fedpro::ParameterHandleValueMap& parametervalues() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ParameterHandleValueMap* release_parametervalues();
  ::rti1516_2025::fedpro::ParameterHandleValueMap* mutable_parametervalues();
  void set_allocated_parametervalues(::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues);
  private:
  const ::rti1516_2025::fedpro::ParameterHandleValueMap& _internal_parametervalues() const;
  ::rti1516_2025::fedpro::ParameterHandleValueMap* _internal_mutable_parametervalues();
  public:
  void unsafe_arena_set_allocated_parametervalues(
      ::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues);
  ::rti1516_2025::fedpro::ParameterHandleValueMap* unsafe_arena_release_parametervalues();

  // .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 5;
  bool has_transportationtype() const;
  private:
  bool _internal_has_transportationtype() const;
  public:
  void clear_transportationtype();
  const ::rti1516_2025::fedpro::TransportationTypeHandle& transportationtype() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::TransportationTypeHandle* release_transportationtype();
  ::rti1516_2025::fedpro::TransportationTypeHandle* mutable_transportationtype();
  void set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  private:
  const ::rti1516_2025::fedpro::TransportationTypeHandle& _internal_transportationtype() const;
  ::rti1516_2025::fedpro::TransportationTypeHandle* _internal_mutable_transportationtype();
  public:
  void unsafe_arena_set_allocated_transportationtype(
      ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  ::rti1516_2025::fedpro::TransportationTypeHandle* unsafe_arena_release_transportationtype();

  // .rti1516_2025.fedpro.FederateHandle producingFederate = 6;
  bool has_producingfederate() const;
  private:
  bool _internal_has_producingfederate() const;
  public:
  void clear_producingfederate();
  const ::rti1516_2025::fedpro::FederateHandle& producingfederate() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandle* release_producingfederate();
  ::rti1516_2025::fedpro::FederateHandle* mutable_producingfederate();
  void set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate);
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_producingfederate() const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_mutable_producingfederate();
  public:
  void unsafe_arena_set_allocated_producingfederate(
      ::rti1516_2025::fedpro::FederateHandle* producingfederate);
  ::rti1516_2025::fedpro::FederateHandle* unsafe_arena_release_producingfederate();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ReceiveDirectedInteraction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersuppliedtag_;
    ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass_;
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues_;
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype_;
    ::rti1516_2025::fedpro::FederateHandle* producingfederate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class ReceiveDirectedInteractionWithTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime) */ {
 public:
  inline ReceiveDirectedInteractionWithTime() : ReceiveDirectedInteractionWithTime(nullptr) {}
  ~ReceiveDirectedInteractionWithTime() override;
  explicit PROTOBUF_CONSTEXPR ReceiveDirectedInteractionWithTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReceiveDirectedInteractionWithTime(const ReceiveDirectedInteractionWithTime& from);
  ReceiveDirectedInteractionWithTime(ReceiveDirectedInteractionWithTime&& from) noexcept
    : ReceiveDirectedInteractionWithTime() {
    *this = ::std::move(from);
  }

  inline ReceiveDirectedInteractionWithTime& operator=(const ReceiveDirectedInteractionWithTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceiveDirectedInteractionWithTime& operator=(ReceiveDirectedInteractionWithTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReceiveDirectedInteractionWithTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReceiveDirectedInteractionWithTime* internal_default_instance() {
    return reinterpret_cast<const ReceiveDirectedInteractionWithTime*>(
               &_ReceiveDirectedInteractionWithTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ReceiveDirectedInteractionWithTime& a, ReceiveDirectedInteractionWithTime& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceiveDirectedInteractionWithTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceiveDirectedInteractionWithTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReceiveDirectedInteractionWithTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReceiveDirectedInteractionWithTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReceiveDirectedInteractionWithTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReceiveDirectedInteractionWithTime& from) {
    ReceiveDirectedInteractionWithTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceiveDirectedInteractionWithTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime";
  }
  protected:
  explicit ReceiveDirectedInteractionWithTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSuppliedTagFieldNumber = 4,
    kInteractionClassFieldNumber = 1,
    kObjectInstanceFieldNumber = 2,
    kParameterValuesFieldNumber = 3,
    kTransportationTypeFieldNumber = 5,
    kProducingFederateFieldNumber = 6,
    kTimeFieldNumber = 7,
    kOptionalRetractionFieldNumber = 10,
    kSentOrderTypeFieldNumber = 8,
    kReceivedOrderTypeFieldNumber = 9,
  };
  // bytes userSuppliedTag = 4;
  void clear_usersuppliedtag();
  const std::string& usersuppliedtag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usersuppliedtag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usersuppliedtag();
  PROTOBUF_NODISCARD std::string* release_usersuppliedtag();
  void set_allocated_usersuppliedtag(std::string* usersuppliedtag);
  private:
  const std::string& _internal_usersuppliedtag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usersuppliedtag(const std::string& value);
  std::string* _internal_mutable_usersuppliedtag();
  public:

  // .rti1516_2025.fedpro.InteractionClassHandle interactionClass = 1;
  bool has_interactionclass() const;
  private:
  bool _internal_has_interactionclass() const;
  public:
  void clear_interactionclass();
  const ::rti1516_2025::fedpro::InteractionClassHandle& interactionclass() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::InteractionClassHandle* release_interactionclass();
  ::rti1516_2025::fedpro::InteractionClassHandle* mutable_interactionclass();
  void set_allocated_interactionclass(::rti1516_2025::fedpro::InteractionClassHandle* interactionclass);
  private:
  const ::rti1516_2025::fedpro::InteractionClassHandle& _internal_interactionclass() const;
  ::rti1516_2025::fedpro::InteractionClassHandle* _internal_mutable_interactionclass();
  public:
  void unsafe_arena_set_allocated_interactionclass(
      ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass);
  ::rti1516_2025::fedpro::InteractionClassHandle* unsafe_arena_release_interactionclass();

  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 2;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.ParameterHandleValueMap parameterValues = 3;
  bool has_parametervalues() const;
  private:
  bool _internal_has_parametervalues() const;
  public:
  void clear_parametervalues();
  const ::rti1516_2025::fedpro::ParameterHandleValueMap& parametervalues() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ParameterHandleValueMap* release_parametervalues();
  ::rti1516_2025::fedpro::ParameterHandleValueMap* mutable_parametervalues();
  void set_allocated_parametervalues(::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues);
  private:
  const ::rti1516_2025::fedpro::ParameterHandleValueMap& _internal_parametervalues() const;
  ::rti1516_2025::fedpro::ParameterHandleValueMap* _internal_mutable_parametervalues();
  public:
  void unsafe_arena_set_allocated_parametervalues(
      ::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues);
  ::rti1516_2025::fedpro::ParameterHandleValueMap* unsafe_arena_release_parametervalues();

  // .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 5;
  bool has_transportationtype() const;
  private:
  bool _internal_has_transportationtype() const;
  public:
  void clear_transportationtype();
  const ::rti1516_2025::fedpro::TransportationTypeHandle& transportationtype() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::TransportationTypeHandle* release_transportationtype();
  ::rti1516_2025::fedpro::TransportationTypeHandle* mutable_transportationtype();
  void set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  private:
  const ::rti1516_2025::fedpro::TransportationTypeHandle& _internal_transportationtype() const;
  ::rti1516_2025::fedpro::TransportationTypeHandle* _internal_mutable_transportationtype();
  public:
  void unsafe_arena_set_allocated_transportationtype(
      ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  ::rti1516_2025::fedpro::TransportationTypeHandle* unsafe_arena_release_transportationtype();

  // .rti1516_2025.fedpro.FederateHandle producingFederate = 6;
  bool has_producingfederate() const;
  private:
  bool _internal_has_producingfederate() const;
  public:
  void clear_producingfederate();
  const ::rti1516_2025::fedpro::FederateHandle& producingfederate() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandle* release_producingfederate();
  ::rti1516_2025::fedpro::FederateHandle* mutable_producingfederate();
  void set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate);
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_producingfederate() const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_mutable_producingfederate();
  public:
  void unsafe_arena_set_allocated_producingfederate(
      ::rti1516_2025::fedpro::FederateHandle* producingfederate);
  ::rti1516_2025::fedpro::FederateHandle* unsafe_arena_release_producingfederate();

  // .rti1516_2025.fedpro.LogicalTime time = 7;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::rti1516_2025::fedpro::LogicalTime& time() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::LogicalTime* release_time();
  ::rti1516_2025::fedpro::LogicalTime* mutable_time();
  void set_allocated_time(::rti1516_2025::fedpro::LogicalTime* time);
  private:
  const ::rti1516_2025::fedpro::LogicalTime& _internal_time() const;
  ::rti1516_2025::fedpro::LogicalTime* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::rti1516_2025::fedpro::LogicalTime* time);
  ::rti1516_2025::fedpro::LogicalTime* unsafe_arena_release_time();

  // .rti1516_2025.fedpro.MessageRetractionHandle optionalRetraction = 10;
  bool has_optionalretraction() const;
  private:
  bool _internal_has_optionalretraction() const;
  public:
  void clear_optionalretraction();
  const ::rti1516_2025::fedpro::MessageRetractionHandle& optionalretraction() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::MessageRetractionHandle* release_optionalretraction();
  ::rti1516_2025::fedpro::MessageRetractionHandle* mutable_optionalretraction();
  void set_allocated_optionalretraction(::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction);
  private:
  const ::rti1516_2025::fedpro::MessageRetractionHandle& _internal_optionalretraction() const;
  ::rti1516_2025::fedpro::MessageRetractionHandle* _internal_mutable_optionalretraction();
  public:
  void unsafe_arena_set_allocated_optionalretraction(
      ::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction);
  ::rti1516_2025::fedpro::MessageRetractionHandle* unsafe_arena_release_optionalretraction();

  // .rti1516_2025.fedpro.OrderType sentOrderType = 8;
  void clear_sentordertype();
  ::rti1516_2025::fedpro::OrderType sentordertype() const;
  void set_sentordertype(::rti1516_2025::fedpro::OrderType value);
  private:
  ::rti1516_2025::fedpro::OrderType _internal_sentordertype() const;
  void _internal_set_sentordertype(::rti1516_2025::fedpro::OrderType value);
  public:

  // .rti1516_2025.fedpro.OrderType receivedOrderType = 9;
  void clear_receivedordertype();
  ::rti1516_2025::fedpro::OrderType receivedordertype() const;
  void set_receivedordertype(::rti1516_2025::fedpro::OrderType value);
  private:
  ::rti1516_2025::fedpro::OrderType _internal_receivedordertype() const;
  void _internal_set_receivedordertype(::rti1516_2025::fedpro::OrderType value);
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersuppliedtag_;
    ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass_;
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues_;
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype_;
    ::rti1516_2025::fedpro::FederateHandle* producingfederate_;
    ::rti1516_2025::fedpro::LogicalTime* time_;
    ::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction_;
    int sentordertype_;
    int receivedordertype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class RemoveObjectInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.RemoveObjectInstance) */ {
 public:
  inline RemoveObjectInstance() : RemoveObjectInstance(nullptr) {}
  ~RemoveObjectInstance() override;
  explicit PROTOBUF_CONSTEXPR RemoveObjectInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveObjectInstance(const RemoveObjectInstance& from);
  RemoveObjectInstance(RemoveObjectInstance&& from) noexcept
    : RemoveObjectInstance() {
    *this = ::std::move(from);
  }

  inline RemoveObjectInstance& operator=(const RemoveObjectInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveObjectInstance& operator=(RemoveObjectInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveObjectInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveObjectInstance* internal_default_instance() {
    return reinterpret_cast<const RemoveObjectInstance*>(
               &_RemoveObjectInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(RemoveObjectInstance& a, RemoveObjectInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveObjectInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveObjectInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveObjectInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveObjectInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveObjectInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveObjectInstance& from) {
    RemoveObjectInstance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveObjectInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.RemoveObjectInstance";
  }
  protected:
  explicit RemoveObjectInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSuppliedTagFieldNumber = 2,
    kObjectInstanceFieldNumber = 1,
    kProducingFederateFieldNumber = 3,
  };
  // bytes userSuppliedTag = 2;
  void clear_usersuppliedtag();
  const std::string& usersuppliedtag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usersuppliedtag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usersuppliedtag();
  PROTOBUF_NODISCARD std::string* release_usersuppliedtag();
  void set_allocated_usersuppliedtag(std::string* usersuppliedtag);
  private:
  const std::string& _internal_usersuppliedtag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usersuppliedtag(const std::string& value);
  std::string* _internal_mutable_usersuppliedtag();
  public:

  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.FederateHandle producingFederate = 3;
  bool has_producingfederate() const;
  private:
  bool _internal_has_producingfederate() const;
  public:
  void clear_producingfederate();
  const ::rti1516_2025::fedpro::FederateHandle& producingfederate() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandle* release_producingfederate();
  ::rti1516_2025::fedpro::FederateHandle* mutable_producingfederate();
  void set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate);
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_producingfederate() const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_mutable_producingfederate();
  public:
  void unsafe_arena_set_allocated_producingfederate(
      ::rti1516_2025::fedpro::FederateHandle* producingfederate);
  ::rti1516_2025::fedpro::FederateHandle* unsafe_arena_release_producingfederate();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.RemoveObjectInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersuppliedtag_;
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::FederateHandle* producingfederate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class RemoveObjectInstanceWithTime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.RemoveObjectInstanceWithTime) */ {
 public:
  inline RemoveObjectInstanceWithTime() : RemoveObjectInstanceWithTime(nullptr) {}
  ~RemoveObjectInstanceWithTime() override;
  explicit PROTOBUF_CONSTEXPR RemoveObjectInstanceWithTime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveObjectInstanceWithTime(const RemoveObjectInstanceWithTime& from);
  RemoveObjectInstanceWithTime(RemoveObjectInstanceWithTime&& from) noexcept
    : RemoveObjectInstanceWithTime() {
    *this = ::std::move(from);
  }

  inline RemoveObjectInstanceWithTime& operator=(const RemoveObjectInstanceWithTime& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveObjectInstanceWithTime& operator=(RemoveObjectInstanceWithTime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveObjectInstanceWithTime& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveObjectInstanceWithTime* internal_default_instance() {
    return reinterpret_cast<const RemoveObjectInstanceWithTime*>(
               &_RemoveObjectInstanceWithTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(RemoveObjectInstanceWithTime& a, RemoveObjectInstanceWithTime& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveObjectInstanceWithTime* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveObjectInstanceWithTime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveObjectInstanceWithTime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveObjectInstanceWithTime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveObjectInstanceWithTime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoveObjectInstanceWithTime& from) {
    RemoveObjectInstanceWithTime::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveObjectInstanceWithTime* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.RemoveObjectInstanceWithTime";
  }
  protected:
  explicit RemoveObjectInstanceWithTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSuppliedTagFieldNumber = 2,
    kObjectInstanceFieldNumber = 1,
    kProducingFederateFieldNumber = 3,
    kTimeFieldNumber = 4,
    kOptionalRetractionFieldNumber = 7,
    kSentOrderTypeFieldNumber = 5,
    kReceivedOrderTypeFieldNumber = 6,
  };
  // bytes userSuppliedTag = 2;
  void clear_usersuppliedtag();
  const std::string& usersuppliedtag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usersuppliedtag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usersuppliedtag();
  PROTOBUF_NODISCARD std::string* release_usersuppliedtag();
  void set_allocated_usersuppliedtag(std::string* usersuppliedtag);
  private:
  const std::string& _internal_usersuppliedtag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usersuppliedtag(const std::string& value);
  std::string* _internal_mutable_usersuppliedtag();
  public:

  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.FederateHandle producingFederate = 3;
  bool has_producingfederate() const;
  private:
  bool _internal_has_producingfederate() const;
  public:
  void clear_producingfederate();
  const ::rti1516_2025::fedpro::FederateHandle& producingfederate() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandle* release_producingfederate();
  ::rti1516_2025::fedpro::FederateHandle* mutable_producingfederate();
  void set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate);
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_producingfederate() const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_mutable_producingfederate();
  public:
  void unsafe_arena_set_allocated_producingfederate(
      ::rti1516_2025::fedpro::FederateHandle* producingfederate);
  ::rti1516_2025::fedpro::FederateHandle* unsafe_arena_release_producingfederate();

  // .rti1516_2025.fedpro.LogicalTime time = 4;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::rti1516_2025::fedpro::LogicalTime& time() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::LogicalTime* release_time();
  ::rti1516_2025::fedpro::LogicalTime* mutable_time();
  void set_allocated_time(::rti1516_2025::fedpro::LogicalTime* time);
  private:
  const ::rti1516_2025::fedpro::LogicalTime& _internal_time() const;
  ::rti1516_2025::fedpro::LogicalTime* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::rti1516_2025::fedpro::LogicalTime* time);
  ::rti1516_2025::fedpro::LogicalTime* unsafe_arena_release_time();

  // .rti1516_2025.fedpro.MessageRetractionHandle optionalRetraction = 7;
  bool has_optionalretraction() const;
  private:
  bool _internal_has_optionalretraction() const;
  public:
  void clear_optionalretraction();
  const ::rti1516_2025::fedpro::MessageRetractionHandle& optionalretraction() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::MessageRetractionHandle* release_optionalretraction();
  ::rti1516_2025::fedpro::MessageRetractionHandle* mutable_optionalretraction();
  void set_allocated_optionalretraction(::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction);
  private:
  const ::rti1516_2025::fedpro::MessageRetractionHandle& _internal_optionalretraction() const;
  ::rti1516_2025::fedpro::MessageRetractionHandle* _internal_mutable_optionalretraction();
  public:
  void unsafe_arena_set_allocated_optionalretraction(
      ::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction);
  ::rti1516_2025::fedpro::MessageRetractionHandle* unsafe_arena_release_optionalretraction();

  // .rti1516_2025.fedpro.OrderType sentOrderType = 5;
  void clear_sentordertype();
  ::rti1516_2025::fedpro::OrderType sentordertype() const;
  void set_sentordertype(::rti1516_2025::fedpro::OrderType value);
  private:
  ::rti1516_2025::fedpro::OrderType _internal_sentordertype() const;
  void _internal_set_sentordertype(::rti1516_2025::fedpro::OrderType value);
  public:

  // .rti1516_2025.fedpro.OrderType receivedOrderType = 6;
  void clear_receivedordertype();
  ::rti1516_2025::fedpro::OrderType receivedordertype() const;
  void set_receivedordertype(::rti1516_2025::fedpro::OrderType value);
  private:
  ::rti1516_2025::fedpro::OrderType _internal_receivedordertype() const;
  void _internal_set_receivedordertype(::rti1516_2025::fedpro::OrderType value);
  public:

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.RemoveObjectInstanceWithTime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersuppliedtag_;
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::FederateHandle* producingfederate_;
    ::rti1516_2025::fedpro::LogicalTime* time_;
    ::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction_;
    int sentordertype_;
    int receivedordertype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class AttributesInScope final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.AttributesInScope) */ {
 public:
  inline AttributesInScope() : AttributesInScope(nullptr) {}
  ~AttributesInScope() override;
  explicit PROTOBUF_CONSTEXPR AttributesInScope(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributesInScope(const AttributesInScope& from);
  AttributesInScope(AttributesInScope&& from) noexcept
    : AttributesInScope() {
    *this = ::std::move(from);
  }

  inline AttributesInScope& operator=(const AttributesInScope& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributesInScope& operator=(AttributesInScope&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributesInScope& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributesInScope* internal_default_instance() {
    return reinterpret_cast<const AttributesInScope*>(
               &_AttributesInScope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(AttributesInScope& a, AttributesInScope& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributesInScope* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributesInScope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributesInScope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributesInScope>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttributesInScope& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttributesInScope& from) {
    AttributesInScope::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributesInScope* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.AttributesInScope";
  }
  protected:
  explicit AttributesInScope(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInstanceFieldNumber = 1,
    kAttributesFieldNumber = 2,
  };
  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::rti1516_2025::fedpro::AttributeHandleSet& attributes() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleSet* release_attributes();
  ::rti1516_2025::fedpro::AttributeHandleSet* mutable_attributes();
  void set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleSet& _internal_attributes() const;
  ::rti1516_2025::fedpro::AttributeHandleSet* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  ::rti1516_2025::fedpro::AttributeHandleSet* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.AttributesInScope)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class AttributesOutOfScope final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.AttributesOutOfScope) */ {
 public:
  inline AttributesOutOfScope() : AttributesOutOfScope(nullptr) {}
  ~AttributesOutOfScope() override;
  explicit PROTOBUF_CONSTEXPR AttributesOutOfScope(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributesOutOfScope(const AttributesOutOfScope& from);
  AttributesOutOfScope(AttributesOutOfScope&& from) noexcept
    : AttributesOutOfScope() {
    *this = ::std::move(from);
  }

  inline AttributesOutOfScope& operator=(const AttributesOutOfScope& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributesOutOfScope& operator=(AttributesOutOfScope&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributesOutOfScope& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributesOutOfScope* internal_default_instance() {
    return reinterpret_cast<const AttributesOutOfScope*>(
               &_AttributesOutOfScope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(AttributesOutOfScope& a, AttributesOutOfScope& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributesOutOfScope* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributesOutOfScope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributesOutOfScope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributesOutOfScope>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttributesOutOfScope& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttributesOutOfScope& from) {
    AttributesOutOfScope::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributesOutOfScope* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.AttributesOutOfScope";
  }
  protected:
  explicit AttributesOutOfScope(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInstanceFieldNumber = 1,
    kAttributesFieldNumber = 2,
  };
  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::rti1516_2025::fedpro::AttributeHandleSet& attributes() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleSet* release_attributes();
  ::rti1516_2025::fedpro::AttributeHandleSet* mutable_attributes();
  void set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleSet& _internal_attributes() const;
  ::rti1516_2025::fedpro::AttributeHandleSet* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  ::rti1516_2025::fedpro::AttributeHandleSet* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.AttributesOutOfScope)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class ProvideAttributeValueUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ProvideAttributeValueUpdate) */ {
 public:
  inline ProvideAttributeValueUpdate() : ProvideAttributeValueUpdate(nullptr) {}
  ~ProvideAttributeValueUpdate() override;
  explicit PROTOBUF_CONSTEXPR ProvideAttributeValueUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProvideAttributeValueUpdate(const ProvideAttributeValueUpdate& from);
  ProvideAttributeValueUpdate(ProvideAttributeValueUpdate&& from) noexcept
    : ProvideAttributeValueUpdate() {
    *this = ::std::move(from);
  }

  inline ProvideAttributeValueUpdate& operator=(const ProvideAttributeValueUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProvideAttributeValueUpdate& operator=(ProvideAttributeValueUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProvideAttributeValueUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProvideAttributeValueUpdate* internal_default_instance() {
    return reinterpret_cast<const ProvideAttributeValueUpdate*>(
               &_ProvideAttributeValueUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ProvideAttributeValueUpdate& a, ProvideAttributeValueUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ProvideAttributeValueUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProvideAttributeValueUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProvideAttributeValueUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProvideAttributeValueUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProvideAttributeValueUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProvideAttributeValueUpdate& from) {
    ProvideAttributeValueUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProvideAttributeValueUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ProvideAttributeValueUpdate";
  }
  protected:
  explicit ProvideAttributeValueUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSuppliedTagFieldNumber = 3,
    kObjectInstanceFieldNumber = 1,
    kAttributesFieldNumber = 2,
  };
  // bytes userSuppliedTag = 3;
  void clear_usersuppliedtag();
  const std::string& usersuppliedtag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usersuppliedtag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usersuppliedtag();
  PROTOBUF_NODISCARD std::string* release_usersuppliedtag();
  void set_allocated_usersuppliedtag(std::string* usersuppliedtag);
  private:
  const std::string& _internal_usersuppliedtag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usersuppliedtag(const std::string& value);
  std::string* _internal_mutable_usersuppliedtag();
  public:

  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::rti1516_2025::fedpro::AttributeHandleSet& attributes() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleSet* release_attributes();
  ::rti1516_2025::fedpro::AttributeHandleSet* mutable_attributes();
  void set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleSet& _internal_attributes() const;
  ::rti1516_2025::fedpro::AttributeHandleSet* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  ::rti1516_2025::fedpro::AttributeHandleSet* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ProvideAttributeValueUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersuppliedtag_;
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class TurnUpdatesOnForObjectInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstance) */ {
 public:
  inline TurnUpdatesOnForObjectInstance() : TurnUpdatesOnForObjectInstance(nullptr) {}
  ~TurnUpdatesOnForObjectInstance() override;
  explicit PROTOBUF_CONSTEXPR TurnUpdatesOnForObjectInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TurnUpdatesOnForObjectInstance(const TurnUpdatesOnForObjectInstance& from);
  TurnUpdatesOnForObjectInstance(TurnUpdatesOnForObjectInstance&& from) noexcept
    : TurnUpdatesOnForObjectInstance() {
    *this = ::std::move(from);
  }

  inline TurnUpdatesOnForObjectInstance& operator=(const TurnUpdatesOnForObjectInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline TurnUpdatesOnForObjectInstance& operator=(TurnUpdatesOnForObjectInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TurnUpdatesOnForObjectInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const TurnUpdatesOnForObjectInstance* internal_default_instance() {
    return reinterpret_cast<const TurnUpdatesOnForObjectInstance*>(
               &_TurnUpdatesOnForObjectInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(TurnUpdatesOnForObjectInstance& a, TurnUpdatesOnForObjectInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(TurnUpdatesOnForObjectInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TurnUpdatesOnForObjectInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TurnUpdatesOnForObjectInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TurnUpdatesOnForObjectInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TurnUpdatesOnForObjectInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TurnUpdatesOnForObjectInstance& from) {
    TurnUpdatesOnForObjectInstance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TurnUpdatesOnForObjectInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.TurnUpdatesOnForObjectInstance";
  }
  protected:
  explicit TurnUpdatesOnForObjectInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInstanceFieldNumber = 1,
    kAttributesFieldNumber = 2,
  };
  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::rti1516_2025::fedpro::AttributeHandleSet& attributes() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleSet* release_attributes();
  ::rti1516_2025::fedpro::AttributeHandleSet* mutable_attributes();
  void set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleSet& _internal_attributes() const;
  ::rti1516_2025::fedpro::AttributeHandleSet* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  ::rti1516_2025::fedpro::AttributeHandleSet* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class TurnUpdatesOnForObjectInstanceWithRate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate) */ {
 public:
  inline TurnUpdatesOnForObjectInstanceWithRate() : TurnUpdatesOnForObjectInstanceWithRate(nullptr) {}
  ~TurnUpdatesOnForObjectInstanceWithRate() override;
  explicit PROTOBUF_CONSTEXPR TurnUpdatesOnForObjectInstanceWithRate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TurnUpdatesOnForObjectInstanceWithRate(const TurnUpdatesOnForObjectInstanceWithRate& from);
  TurnUpdatesOnForObjectInstanceWithRate(TurnUpdatesOnForObjectInstanceWithRate&& from) noexcept
    : TurnUpdatesOnForObjectInstanceWithRate() {
    *this = ::std::move(from);
  }

  inline TurnUpdatesOnForObjectInstanceWithRate& operator=(const TurnUpdatesOnForObjectInstanceWithRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TurnUpdatesOnForObjectInstanceWithRate& operator=(TurnUpdatesOnForObjectInstanceWithRate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TurnUpdatesOnForObjectInstanceWithRate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TurnUpdatesOnForObjectInstanceWithRate* internal_default_instance() {
    return reinterpret_cast<const TurnUpdatesOnForObjectInstanceWithRate*>(
               &_TurnUpdatesOnForObjectInstanceWithRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(TurnUpdatesOnForObjectInstanceWithRate& a, TurnUpdatesOnForObjectInstanceWithRate& b) {
    a.Swap(&b);
  }
  inline void Swap(TurnUpdatesOnForObjectInstanceWithRate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TurnUpdatesOnForObjectInstanceWithRate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TurnUpdatesOnForObjectInstanceWithRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TurnUpdatesOnForObjectInstanceWithRate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TurnUpdatesOnForObjectInstanceWithRate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TurnUpdatesOnForObjectInstanceWithRate& from) {
    TurnUpdatesOnForObjectInstanceWithRate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TurnUpdatesOnForObjectInstanceWithRate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate";
  }
  protected:
  explicit TurnUpdatesOnForObjectInstanceWithRate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateRateDesignatorFieldNumber = 3,
    kObjectInstanceFieldNumber = 1,
    kAttributesFieldNumber = 2,
  };
  // string updateRateDesignator = 3;
  void clear_updateratedesignator();
  const std::string& updateratedesignator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updateratedesignator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updateratedesignator();
  PROTOBUF_NODISCARD std::string* release_updateratedesignator();
  void set_allocated_updateratedesignator(std::string* updateratedesignator);
  private:
  const std::string& _internal_updateratedesignator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updateratedesignator(const std::string& value);
  std::string* _internal_mutable_updateratedesignator();
  public:

  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::rti1516_2025::fedpro::AttributeHandleSet& attributes() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleSet* release_attributes();
  ::rti1516_2025::fedpro::AttributeHandleSet* mutable_attributes();
  void set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleSet& _internal_attributes() const;
  ::rti1516_2025::fedpro::AttributeHandleSet* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  ::rti1516_2025::fedpro::AttributeHandleSet* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updateratedesignator_;
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class TurnUpdatesOffForObjectInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.TurnUpdatesOffForObjectInstance) */ {
 public:
  inline TurnUpdatesOffForObjectInstance() : TurnUpdatesOffForObjectInstance(nullptr) {}
  ~TurnUpdatesOffForObjectInstance() override;
  explicit PROTOBUF_CONSTEXPR TurnUpdatesOffForObjectInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TurnUpdatesOffForObjectInstance(const TurnUpdatesOffForObjectInstance& from);
  TurnUpdatesOffForObjectInstance(TurnUpdatesOffForObjectInstance&& from) noexcept
    : TurnUpdatesOffForObjectInstance() {
    *this = ::std::move(from);
  }

  inline TurnUpdatesOffForObjectInstance& operator=(const TurnUpdatesOffForObjectInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline TurnUpdatesOffForObjectInstance& operator=(TurnUpdatesOffForObjectInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TurnUpdatesOffForObjectInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const TurnUpdatesOffForObjectInstance* internal_default_instance() {
    return reinterpret_cast<const TurnUpdatesOffForObjectInstance*>(
               &_TurnUpdatesOffForObjectInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(TurnUpdatesOffForObjectInstance& a, TurnUpdatesOffForObjectInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(TurnUpdatesOffForObjectInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TurnUpdatesOffForObjectInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TurnUpdatesOffForObjectInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TurnUpdatesOffForObjectInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TurnUpdatesOffForObjectInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TurnUpdatesOffForObjectInstance& from) {
    TurnUpdatesOffForObjectInstance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TurnUpdatesOffForObjectInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.TurnUpdatesOffForObjectInstance";
  }
  protected:
  explicit TurnUpdatesOffForObjectInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInstanceFieldNumber = 1,
    kAttributesFieldNumber = 2,
  };
  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::rti1516_2025::fedpro::AttributeHandleSet& attributes() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleSet* release_attributes();
  ::rti1516_2025::fedpro::AttributeHandleSet* mutable_attributes();
  void set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleSet& _internal_attributes() const;
  ::rti1516_2025::fedpro::AttributeHandleSet* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  ::rti1516_2025::fedpro::AttributeHandleSet* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.TurnUpdatesOffForObjectInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class ConfirmAttributeTransportationTypeChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange) */ {
 public:
  inline ConfirmAttributeTransportationTypeChange() : ConfirmAttributeTransportationTypeChange(nullptr) {}
  ~ConfirmAttributeTransportationTypeChange() override;
  explicit PROTOBUF_CONSTEXPR ConfirmAttributeTransportationTypeChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfirmAttributeTransportationTypeChange(const ConfirmAttributeTransportationTypeChange& from);
  ConfirmAttributeTransportationTypeChange(ConfirmAttributeTransportationTypeChange&& from) noexcept
    : ConfirmAttributeTransportationTypeChange() {
    *this = ::std::move(from);
  }

  inline ConfirmAttributeTransportationTypeChange& operator=(const ConfirmAttributeTransportationTypeChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfirmAttributeTransportationTypeChange& operator=(ConfirmAttributeTransportationTypeChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfirmAttributeTransportationTypeChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfirmAttributeTransportationTypeChange* internal_default_instance() {
    return reinterpret_cast<const ConfirmAttributeTransportationTypeChange*>(
               &_ConfirmAttributeTransportationTypeChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(ConfirmAttributeTransportationTypeChange& a, ConfirmAttributeTransportationTypeChange& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfirmAttributeTransportationTypeChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfirmAttributeTransportationTypeChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfirmAttributeTransportationTypeChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfirmAttributeTransportationTypeChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfirmAttributeTransportationTypeChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfirmAttributeTransportationTypeChange& from) {
    ConfirmAttributeTransportationTypeChange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfirmAttributeTransportationTypeChange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange";
  }
  protected:
  explicit ConfirmAttributeTransportationTypeChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInstanceFieldNumber = 1,
    kAttributesFieldNumber = 2,
    kTransportationTypeFieldNumber = 3,
  };
  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::rti1516_2025::fedpro::AttributeHandleSet& attributes() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleSet* release_attributes();
  ::rti1516_2025::fedpro::AttributeHandleSet* mutable_attributes();
  void set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleSet& _internal_attributes() const;
  ::rti1516_2025::fedpro::AttributeHandleSet* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  ::rti1516_2025::fedpro::AttributeHandleSet* unsafe_arena_release_attributes();

  // .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 3;
  bool has_transportationtype() const;
  private:
  bool _internal_has_transportationtype() const;
  public:
  void clear_transportationtype();
  const ::rti1516_2025::fedpro::TransportationTypeHandle& transportationtype() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::TransportationTypeHandle* release_transportationtype();
  ::rti1516_2025::fedpro::TransportationTypeHandle* mutable_transportationtype();
  void set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  private:
  const ::rti1516_2025::fedpro::TransportationTypeHandle& _internal_transportationtype() const;
  ::rti1516_2025::fedpro::TransportationTypeHandle* _internal_mutable_transportationtype();
  public:
  void unsafe_arena_set_allocated_transportationtype(
      ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  ::rti1516_2025::fedpro::TransportationTypeHandle* unsafe_arena_release_transportationtype();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes_;
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class ReportAttributeTransportationType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ReportAttributeTransportationType) */ {
 public:
  inline ReportAttributeTransportationType() : ReportAttributeTransportationType(nullptr) {}
  ~ReportAttributeTransportationType() override;
  explicit PROTOBUF_CONSTEXPR ReportAttributeTransportationType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportAttributeTransportationType(const ReportAttributeTransportationType& from);
  ReportAttributeTransportationType(ReportAttributeTransportationType&& from) noexcept
    : ReportAttributeTransportationType() {
    *this = ::std::move(from);
  }

  inline ReportAttributeTransportationType& operator=(const ReportAttributeTransportationType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportAttributeTransportationType& operator=(ReportAttributeTransportationType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportAttributeTransportationType& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportAttributeTransportationType* internal_default_instance() {
    return reinterpret_cast<const ReportAttributeTransportationType*>(
               &_ReportAttributeTransportationType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(ReportAttributeTransportationType& a, ReportAttributeTransportationType& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportAttributeTransportationType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportAttributeTransportationType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportAttributeTransportationType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportAttributeTransportationType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportAttributeTransportationType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReportAttributeTransportationType& from) {
    ReportAttributeTransportationType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportAttributeTransportationType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ReportAttributeTransportationType";
  }
  protected:
  explicit ReportAttributeTransportationType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInstanceFieldNumber = 1,
    kAttributeFieldNumber = 2,
    kTransportationTypeFieldNumber = 3,
  };
  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandle attribute = 2;
  bool has_attribute() const;
  private:
  bool _internal_has_attribute() const;
  public:
  void clear_attribute();
  const ::rti1516_2025::fedpro::AttributeHandle& attribute() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandle* release_attribute();
  ::rti1516_2025::fedpro::AttributeHandle* mutable_attribute();
  void set_allocated_attribute(::rti1516_2025::fedpro::AttributeHandle* attribute);
  private:
  const ::rti1516_2025::fedpro::AttributeHandle& _internal_attribute() const;
  ::rti1516_2025::fedpro::AttributeHandle* _internal_mutable_attribute();
  public:
  void unsafe_arena_set_allocated_attribute(
      ::rti1516_2025::fedpro::AttributeHandle* attribute);
  ::rti1516_2025::fedpro::AttributeHandle* unsafe_arena_release_attribute();

  // .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 3;
  bool has_transportationtype() const;
  private:
  bool _internal_has_transportationtype() const;
  public:
  void clear_transportationtype();
  const ::rti1516_2025::fedpro::TransportationTypeHandle& transportationtype() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::TransportationTypeHandle* release_transportationtype();
  ::rti1516_2025::fedpro::TransportationTypeHandle* mutable_transportationtype();
  void set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  private:
  const ::rti1516_2025::fedpro::TransportationTypeHandle& _internal_transportationtype() const;
  ::rti1516_2025::fedpro::TransportationTypeHandle* _internal_mutable_transportationtype();
  public:
  void unsafe_arena_set_allocated_transportationtype(
      ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  ::rti1516_2025::fedpro::TransportationTypeHandle* unsafe_arena_release_transportationtype();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ReportAttributeTransportationType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandle* attribute_;
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class ConfirmInteractionTransportationTypeChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ConfirmInteractionTransportationTypeChange) */ {
 public:
  inline ConfirmInteractionTransportationTypeChange() : ConfirmInteractionTransportationTypeChange(nullptr) {}
  ~ConfirmInteractionTransportationTypeChange() override;
  explicit PROTOBUF_CONSTEXPR ConfirmInteractionTransportationTypeChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfirmInteractionTransportationTypeChange(const ConfirmInteractionTransportationTypeChange& from);
  ConfirmInteractionTransportationTypeChange(ConfirmInteractionTransportationTypeChange&& from) noexcept
    : ConfirmInteractionTransportationTypeChange() {
    *this = ::std::move(from);
  }

  inline ConfirmInteractionTransportationTypeChange& operator=(const ConfirmInteractionTransportationTypeChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfirmInteractionTransportationTypeChange& operator=(ConfirmInteractionTransportationTypeChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfirmInteractionTransportationTypeChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfirmInteractionTransportationTypeChange* internal_default_instance() {
    return reinterpret_cast<const ConfirmInteractionTransportationTypeChange*>(
               &_ConfirmInteractionTransportationTypeChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ConfirmInteractionTransportationTypeChange& a, ConfirmInteractionTransportationTypeChange& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfirmInteractionTransportationTypeChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfirmInteractionTransportationTypeChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfirmInteractionTransportationTypeChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfirmInteractionTransportationTypeChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfirmInteractionTransportationTypeChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfirmInteractionTransportationTypeChange& from) {
    ConfirmInteractionTransportationTypeChange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfirmInteractionTransportationTypeChange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ConfirmInteractionTransportationTypeChange";
  }
  protected:
  explicit ConfirmInteractionTransportationTypeChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInteractionClassFieldNumber = 1,
    kTransportationTypeFieldNumber = 2,
  };
  // .rti1516_2025.fedpro.InteractionClassHandle interactionClass = 1;
  bool has_interactionclass() const;
  private:
  bool _internal_has_interactionclass() const;
  public:
  void clear_interactionclass();
  const ::rti1516_2025::fedpro::InteractionClassHandle& interactionclass() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::InteractionClassHandle* release_interactionclass();
  ::rti1516_2025::fedpro::InteractionClassHandle* mutable_interactionclass();
  void set_allocated_interactionclass(::rti1516_2025::fedpro::InteractionClassHandle* interactionclass);
  private:
  const ::rti1516_2025::fedpro::InteractionClassHandle& _internal_interactionclass() const;
  ::rti1516_2025::fedpro::InteractionClassHandle* _internal_mutable_interactionclass();
  public:
  void unsafe_arena_set_allocated_interactionclass(
      ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass);
  ::rti1516_2025::fedpro::InteractionClassHandle* unsafe_arena_release_interactionclass();

  // .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 2;
  bool has_transportationtype() const;
  private:
  bool _internal_has_transportationtype() const;
  public:
  void clear_transportationtype();
  const ::rti1516_2025::fedpro::TransportationTypeHandle& transportationtype() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::TransportationTypeHandle* release_transportationtype();
  ::rti1516_2025::fedpro::TransportationTypeHandle* mutable_transportationtype();
  void set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  private:
  const ::rti1516_2025::fedpro::TransportationTypeHandle& _internal_transportationtype() const;
  ::rti1516_2025::fedpro::TransportationTypeHandle* _internal_mutable_transportationtype();
  public:
  void unsafe_arena_set_allocated_transportationtype(
      ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  ::rti1516_2025::fedpro::TransportationTypeHandle* unsafe_arena_release_transportationtype();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ConfirmInteractionTransportationTypeChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass_;
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class ReportInteractionTransportationType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ReportInteractionTransportationType) */ {
 public:
  inline ReportInteractionTransportationType() : ReportInteractionTransportationType(nullptr) {}
  ~ReportInteractionTransportationType() override;
  explicit PROTOBUF_CONSTEXPR ReportInteractionTransportationType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReportInteractionTransportationType(const ReportInteractionTransportationType& from);
  ReportInteractionTransportationType(ReportInteractionTransportationType&& from) noexcept
    : ReportInteractionTransportationType() {
    *this = ::std::move(from);
  }

  inline ReportInteractionTransportationType& operator=(const ReportInteractionTransportationType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportInteractionTransportationType& operator=(ReportInteractionTransportationType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReportInteractionTransportationType& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReportInteractionTransportationType* internal_default_instance() {
    return reinterpret_cast<const ReportInteractionTransportationType*>(
               &_ReportInteractionTransportationType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ReportInteractionTransportationType& a, ReportInteractionTransportationType& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportInteractionTransportationType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportInteractionTransportationType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReportInteractionTransportationType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReportInteractionTransportationType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReportInteractionTransportationType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReportInteractionTransportationType& from) {
    ReportInteractionTransportationType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportInteractionTransportationType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ReportInteractionTransportationType";
  }
  protected:
  explicit ReportInteractionTransportationType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFederateFieldNumber = 1,
    kInteractionClassFieldNumber = 2,
    kTransportationTypeFieldNumber = 3,
  };
  // .rti1516_2025.fedpro.FederateHandle federate = 1;
  bool has_federate() const;
  private:
  bool _internal_has_federate() const;
  public:
  void clear_federate();
  const ::rti1516_2025::fedpro::FederateHandle& federate() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandle* release_federate();
  ::rti1516_2025::fedpro::FederateHandle* mutable_federate();
  void set_allocated_federate(::rti1516_2025::fedpro::FederateHandle* federate);
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_federate() const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_mutable_federate();
  public:
  void unsafe_arena_set_allocated_federate(
      ::rti1516_2025::fedpro::FederateHandle* federate);
  ::rti1516_2025::fedpro::FederateHandle* unsafe_arena_release_federate();

  // .rti1516_2025.fedpro.InteractionClassHandle interactionClass = 2;
  bool has_interactionclass() const;
  private:
  bool _internal_has_interactionclass() const;
  public:
  void clear_interactionclass();
  const ::rti1516_2025::fedpro::InteractionClassHandle& interactionclass() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::InteractionClassHandle* release_interactionclass();
  ::rti1516_2025::fedpro::InteractionClassHandle* mutable_interactionclass();
  void set_allocated_interactionclass(::rti1516_2025::fedpro::InteractionClassHandle* interactionclass);
  private:
  const ::rti1516_2025::fedpro::InteractionClassHandle& _internal_interactionclass() const;
  ::rti1516_2025::fedpro::InteractionClassHandle* _internal_mutable_interactionclass();
  public:
  void unsafe_arena_set_allocated_interactionclass(
      ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass);
  ::rti1516_2025::fedpro::InteractionClassHandle* unsafe_arena_release_interactionclass();

  // .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 3;
  bool has_transportationtype() const;
  private:
  bool _internal_has_transportationtype() const;
  public:
  void clear_transportationtype();
  const ::rti1516_2025::fedpro::TransportationTypeHandle& transportationtype() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::TransportationTypeHandle* release_transportationtype();
  ::rti1516_2025::fedpro::TransportationTypeHandle* mutable_transportationtype();
  void set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  private:
  const ::rti1516_2025::fedpro::TransportationTypeHandle& _internal_transportationtype() const;
  ::rti1516_2025::fedpro::TransportationTypeHandle* _internal_mutable_transportationtype();
  public:
  void unsafe_arena_set_allocated_transportationtype(
      ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype);
  ::rti1516_2025::fedpro::TransportationTypeHandle* unsafe_arena_release_transportationtype();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ReportInteractionTransportationType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::FederateHandle* federate_;
    ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass_;
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class RequestAttributeOwnershipAssumption final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.RequestAttributeOwnershipAssumption) */ {
 public:
  inline RequestAttributeOwnershipAssumption() : RequestAttributeOwnershipAssumption(nullptr) {}
  ~RequestAttributeOwnershipAssumption() override;
  explicit PROTOBUF_CONSTEXPR RequestAttributeOwnershipAssumption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestAttributeOwnershipAssumption(const RequestAttributeOwnershipAssumption& from);
  RequestAttributeOwnershipAssumption(RequestAttributeOwnershipAssumption&& from) noexcept
    : RequestAttributeOwnershipAssumption() {
    *this = ::std::move(from);
  }

  inline RequestAttributeOwnershipAssumption& operator=(const RequestAttributeOwnershipAssumption& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestAttributeOwnershipAssumption& operator=(RequestAttributeOwnershipAssumption&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestAttributeOwnershipAssumption& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestAttributeOwnershipAssumption* internal_default_instance() {
    return reinterpret_cast<const RequestAttributeOwnershipAssumption*>(
               &_RequestAttributeOwnershipAssumption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(RequestAttributeOwnershipAssumption& a, RequestAttributeOwnershipAssumption& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestAttributeOwnershipAssumption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestAttributeOwnershipAssumption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestAttributeOwnershipAssumption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestAttributeOwnershipAssumption>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestAttributeOwnershipAssumption& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestAttributeOwnershipAssumption& from) {
    RequestAttributeOwnershipAssumption::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestAttributeOwnershipAssumption* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.RequestAttributeOwnershipAssumption";
  }
  protected:
  explicit RequestAttributeOwnershipAssumption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSuppliedTagFieldNumber = 3,
    kObjectInstanceFieldNumber = 1,
    kOfferedAttributesFieldNumber = 2,
  };
  // bytes userSuppliedTag = 3;
  void clear_usersuppliedtag();
  const std::string& usersuppliedtag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usersuppliedtag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usersuppliedtag();
  PROTOBUF_NODISCARD std::string* release_usersuppliedtag();
  void set_allocated_usersuppliedtag(std::string* usersuppliedtag);
  private:
  const std::string& _internal_usersuppliedtag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usersuppliedtag(const std::string& value);
  std::string* _internal_mutable_usersuppliedtag();
  public:

  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandleSet offeredAttributes = 2;
  bool has_offeredattributes() const;
  private:
  bool _internal_has_offeredattributes() const;
  public:
  void clear_offeredattributes();
  const ::rti1516_2025::fedpro::AttributeHandleSet& offeredattributes() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleSet* release_offeredattributes();
  ::rti1516_2025::fedpro::AttributeHandleSet* mutable_offeredattributes();
  void set_allocated_offeredattributes(::rti1516_2025::fedpro::AttributeHandleSet* offeredattributes);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleSet& _internal_offeredattributes() const;
  ::rti1516_2025::fedpro::AttributeHandleSet* _internal_mutable_offeredattributes();
  public:
  void unsafe_arena_set_allocated_offeredattributes(
      ::rti1516_2025::fedpro::AttributeHandleSet* offeredattributes);
  ::rti1516_2025::fedpro::AttributeHandleSet* unsafe_arena_release_offeredattributes();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.RequestAttributeOwnershipAssumption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersuppliedtag_;
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandleSet* offeredattributes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class RequestDivestitureConfirmation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.RequestDivestitureConfirmation) */ {
 public:
  inline RequestDivestitureConfirmation() : RequestDivestitureConfirmation(nullptr) {}
  ~RequestDivestitureConfirmation() override;
  explicit PROTOBUF_CONSTEXPR RequestDivestitureConfirmation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestDivestitureConfirmation(const RequestDivestitureConfirmation& from);
  RequestDivestitureConfirmation(RequestDivestitureConfirmation&& from) noexcept
    : RequestDivestitureConfirmation() {
    *this = ::std::move(from);
  }

  inline RequestDivestitureConfirmation& operator=(const RequestDivestitureConfirmation& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestDivestitureConfirmation& operator=(RequestDivestitureConfirmation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestDivestitureConfirmation& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestDivestitureConfirmation* internal_default_instance() {
    return reinterpret_cast<const RequestDivestitureConfirmation*>(
               &_RequestDivestitureConfirmation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(RequestDivestitureConfirmation& a, RequestDivestitureConfirmation& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestDivestitureConfirmation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestDivestitureConfirmation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestDivestitureConfirmation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestDivestitureConfirmation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestDivestitureConfirmation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestDivestitureConfirmation& from) {
    RequestDivestitureConfirmation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestDivestitureConfirmation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.RequestDivestitureConfirmation";
  }
  protected:
  explicit RequestDivestitureConfirmation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSuppliedTagFieldNumber = 3,
    kObjectInstanceFieldNumber = 1,
    kReleasedAttributesFieldNumber = 2,
  };
  // bytes userSuppliedTag = 3;
  void clear_usersuppliedtag();
  const std::string& usersuppliedtag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usersuppliedtag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usersuppliedtag();
  PROTOBUF_NODISCARD std::string* release_usersuppliedtag();
  void set_allocated_usersuppliedtag(std::string* usersuppliedtag);
  private:
  const std::string& _internal_usersuppliedtag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usersuppliedtag(const std::string& value);
  std::string* _internal_mutable_usersuppliedtag();
  public:

  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandleSet releasedAttributes = 2;
  bool has_releasedattributes() const;
  private:
  bool _internal_has_releasedattributes() const;
  public:
  void clear_releasedattributes();
  const ::rti1516_2025::fedpro::AttributeHandleSet& releasedattributes() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleSet* release_releasedattributes();
  ::rti1516_2025::fedpro::AttributeHandleSet* mutable_releasedattributes();
  void set_allocated_releasedattributes(::rti1516_2025::fedpro::AttributeHandleSet* releasedattributes);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleSet& _internal_releasedattributes() const;
  ::rti1516_2025::fedpro::AttributeHandleSet* _internal_mutable_releasedattributes();
  public:
  void unsafe_arena_set_allocated_releasedattributes(
      ::rti1516_2025::fedpro::AttributeHandleSet* releasedattributes);
  ::rti1516_2025::fedpro::AttributeHandleSet* unsafe_arena_release_releasedattributes();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.RequestDivestitureConfirmation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersuppliedtag_;
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandleSet* releasedattributes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class AttributeOwnershipAcquisitionNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification) */ {
 public:
  inline AttributeOwnershipAcquisitionNotification() : AttributeOwnershipAcquisitionNotification(nullptr) {}
  ~AttributeOwnershipAcquisitionNotification() override;
  explicit PROTOBUF_CONSTEXPR AttributeOwnershipAcquisitionNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeOwnershipAcquisitionNotification(const AttributeOwnershipAcquisitionNotification& from);
  AttributeOwnershipAcquisitionNotification(AttributeOwnershipAcquisitionNotification&& from) noexcept
    : AttributeOwnershipAcquisitionNotification() {
    *this = ::std::move(from);
  }

  inline AttributeOwnershipAcquisitionNotification& operator=(const AttributeOwnershipAcquisitionNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeOwnershipAcquisitionNotification& operator=(AttributeOwnershipAcquisitionNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeOwnershipAcquisitionNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeOwnershipAcquisitionNotification* internal_default_instance() {
    return reinterpret_cast<const AttributeOwnershipAcquisitionNotification*>(
               &_AttributeOwnershipAcquisitionNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(AttributeOwnershipAcquisitionNotification& a, AttributeOwnershipAcquisitionNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeOwnershipAcquisitionNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeOwnershipAcquisitionNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeOwnershipAcquisitionNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeOwnershipAcquisitionNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttributeOwnershipAcquisitionNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttributeOwnershipAcquisitionNotification& from) {
    AttributeOwnershipAcquisitionNotification::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeOwnershipAcquisitionNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification";
  }
  protected:
  explicit AttributeOwnershipAcquisitionNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSuppliedTagFieldNumber = 3,
    kObjectInstanceFieldNumber = 1,
    kSecuredAttributesFieldNumber = 2,
  };
  // bytes userSuppliedTag = 3;
  void clear_usersuppliedtag();
  const std::string& usersuppliedtag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usersuppliedtag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usersuppliedtag();
  PROTOBUF_NODISCARD std::string* release_usersuppliedtag();
  void set_allocated_usersuppliedtag(std::string* usersuppliedtag);
  private:
  const std::string& _internal_usersuppliedtag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usersuppliedtag(const std::string& value);
  std::string* _internal_mutable_usersuppliedtag();
  public:

  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandleSet securedAttributes = 2;
  bool has_securedattributes() const;
  private:
  bool _internal_has_securedattributes() const;
  public:
  void clear_securedattributes();
  const ::rti1516_2025::fedpro::AttributeHandleSet& securedattributes() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleSet* release_securedattributes();
  ::rti1516_2025::fedpro::AttributeHandleSet* mutable_securedattributes();
  void set_allocated_securedattributes(::rti1516_2025::fedpro::AttributeHandleSet* securedattributes);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleSet& _internal_securedattributes() const;
  ::rti1516_2025::fedpro::AttributeHandleSet* _internal_mutable_securedattributes();
  public:
  void unsafe_arena_set_allocated_securedattributes(
      ::rti1516_2025::fedpro::AttributeHandleSet* securedattributes);
  ::rti1516_2025::fedpro::AttributeHandleSet* unsafe_arena_release_securedattributes();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersuppliedtag_;
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandleSet* securedattributes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class AttributeOwnershipUnavailable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.AttributeOwnershipUnavailable) */ {
 public:
  inline AttributeOwnershipUnavailable() : AttributeOwnershipUnavailable(nullptr) {}
  ~AttributeOwnershipUnavailable() override;
  explicit PROTOBUF_CONSTEXPR AttributeOwnershipUnavailable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeOwnershipUnavailable(const AttributeOwnershipUnavailable& from);
  AttributeOwnershipUnavailable(AttributeOwnershipUnavailable&& from) noexcept
    : AttributeOwnershipUnavailable() {
    *this = ::std::move(from);
  }

  inline AttributeOwnershipUnavailable& operator=(const AttributeOwnershipUnavailable& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeOwnershipUnavailable& operator=(AttributeOwnershipUnavailable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeOwnershipUnavailable& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeOwnershipUnavailable* internal_default_instance() {
    return reinterpret_cast<const AttributeOwnershipUnavailable*>(
               &_AttributeOwnershipUnavailable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(AttributeOwnershipUnavailable& a, AttributeOwnershipUnavailable& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeOwnershipUnavailable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeOwnershipUnavailable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeOwnershipUnavailable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeOwnershipUnavailable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttributeOwnershipUnavailable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttributeOwnershipUnavailable& from) {
    AttributeOwnershipUnavailable::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeOwnershipUnavailable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.AttributeOwnershipUnavailable";
  }
  protected:
  explicit AttributeOwnershipUnavailable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSuppliedTagFieldNumber = 3,
    kObjectInstanceFieldNumber = 1,
    kAttributesFieldNumber = 2,
  };
  // bytes userSuppliedTag = 3;
  void clear_usersuppliedtag();
  const std::string& usersuppliedtag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usersuppliedtag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usersuppliedtag();
  PROTOBUF_NODISCARD std::string* release_usersuppliedtag();
  void set_allocated_usersuppliedtag(std::string* usersuppliedtag);
  private:
  const std::string& _internal_usersuppliedtag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usersuppliedtag(const std::string& value);
  std::string* _internal_mutable_usersuppliedtag();
  public:

  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::rti1516_2025::fedpro::AttributeHandleSet& attributes() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleSet* release_attributes();
  ::rti1516_2025::fedpro::AttributeHandleSet* mutable_attributes();
  void set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleSet& _internal_attributes() const;
  ::rti1516_2025::fedpro::AttributeHandleSet* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  ::rti1516_2025::fedpro::AttributeHandleSet* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.AttributeOwnershipUnavailable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersuppliedtag_;
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class RequestAttributeOwnershipRelease final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.RequestAttributeOwnershipRelease) */ {
 public:
  inline RequestAttributeOwnershipRelease() : RequestAttributeOwnershipRelease(nullptr) {}
  ~RequestAttributeOwnershipRelease() override;
  explicit PROTOBUF_CONSTEXPR RequestAttributeOwnershipRelease(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestAttributeOwnershipRelease(const RequestAttributeOwnershipRelease& from);
  RequestAttributeOwnershipRelease(RequestAttributeOwnershipRelease&& from) noexcept
    : RequestAttributeOwnershipRelease() {
    *this = ::std::move(from);
  }

  inline RequestAttributeOwnershipRelease& operator=(const RequestAttributeOwnershipRelease& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestAttributeOwnershipRelease& operator=(RequestAttributeOwnershipRelease&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestAttributeOwnershipRelease& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestAttributeOwnershipRelease* internal_default_instance() {
    return reinterpret_cast<const RequestAttributeOwnershipRelease*>(
               &_RequestAttributeOwnershipRelease_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(RequestAttributeOwnershipRelease& a, RequestAttributeOwnershipRelease& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestAttributeOwnershipRelease* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestAttributeOwnershipRelease* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestAttributeOwnershipRelease* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestAttributeOwnershipRelease>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestAttributeOwnershipRelease& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestAttributeOwnershipRelease& from) {
    RequestAttributeOwnershipRelease::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestAttributeOwnershipRelease* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.RequestAttributeOwnershipRelease";
  }
  protected:
  explicit RequestAttributeOwnershipRelease(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserSuppliedTagFieldNumber = 3,
    kObjectInstanceFieldNumber = 1,
    kCandidateAttributesFieldNumber = 2,
  };
  // bytes userSuppliedTag = 3;
  void clear_usersuppliedtag();
  const std::string& usersuppliedtag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usersuppliedtag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usersuppliedtag();
  PROTOBUF_NODISCARD std::string* release_usersuppliedtag();
  void set_allocated_usersuppliedtag(std::string* usersuppliedtag);
  private:
  const std::string& _internal_usersuppliedtag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usersuppliedtag(const std::string& value);
  std::string* _internal_mutable_usersuppliedtag();
  public:

  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandleSet candidateAttributes = 2;
  bool has_candidateattributes() const;
  private:
  bool _internal_has_candidateattributes() const;
  public:
  void clear_candidateattributes();
  const ::rti1516_2025::fedpro::AttributeHandleSet& candidateattributes() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleSet* release_candidateattributes();
  ::rti1516_2025::fedpro::AttributeHandleSet* mutable_candidateattributes();
  void set_allocated_candidateattributes(::rti1516_2025::fedpro::AttributeHandleSet* candidateattributes);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleSet& _internal_candidateattributes() const;
  ::rti1516_2025::fedpro::AttributeHandleSet* _internal_mutable_candidateattributes();
  public:
  void unsafe_arena_set_allocated_candidateattributes(
      ::rti1516_2025::fedpro::AttributeHandleSet* candidateattributes);
  ::rti1516_2025::fedpro::AttributeHandleSet* unsafe_arena_release_candidateattributes();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.RequestAttributeOwnershipRelease)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersuppliedtag_;
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandleSet* candidateattributes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class ConfirmAttributeOwnershipAcquisitionCancellation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.ConfirmAttributeOwnershipAcquisitionCancellation) */ {
 public:
  inline ConfirmAttributeOwnershipAcquisitionCancellation() : ConfirmAttributeOwnershipAcquisitionCancellation(nullptr) {}
  ~ConfirmAttributeOwnershipAcquisitionCancellation() override;
  explicit PROTOBUF_CONSTEXPR ConfirmAttributeOwnershipAcquisitionCancellation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfirmAttributeOwnershipAcquisitionCancellation(const ConfirmAttributeOwnershipAcquisitionCancellation& from);
  ConfirmAttributeOwnershipAcquisitionCancellation(ConfirmAttributeOwnershipAcquisitionCancellation&& from) noexcept
    : ConfirmAttributeOwnershipAcquisitionCancellation() {
    *this = ::std::move(from);
  }

  inline ConfirmAttributeOwnershipAcquisitionCancellation& operator=(const ConfirmAttributeOwnershipAcquisitionCancellation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfirmAttributeOwnershipAcquisitionCancellation& operator=(ConfirmAttributeOwnershipAcquisitionCancellation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfirmAttributeOwnershipAcquisitionCancellation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfirmAttributeOwnershipAcquisitionCancellation* internal_default_instance() {
    return reinterpret_cast<const ConfirmAttributeOwnershipAcquisitionCancellation*>(
               &_ConfirmAttributeOwnershipAcquisitionCancellation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ConfirmAttributeOwnershipAcquisitionCancellation& a, ConfirmAttributeOwnershipAcquisitionCancellation& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfirmAttributeOwnershipAcquisitionCancellation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfirmAttributeOwnershipAcquisitionCancellation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfirmAttributeOwnershipAcquisitionCancellation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfirmAttributeOwnershipAcquisitionCancellation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfirmAttributeOwnershipAcquisitionCancellation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfirmAttributeOwnershipAcquisitionCancellation& from) {
    ConfirmAttributeOwnershipAcquisitionCancellation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfirmAttributeOwnershipAcquisitionCancellation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.ConfirmAttributeOwnershipAcquisitionCancellation";
  }
  protected:
  explicit ConfirmAttributeOwnershipAcquisitionCancellation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInstanceFieldNumber = 1,
    kAttributesFieldNumber = 2,
  };
  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::rti1516_2025::fedpro::AttributeHandleSet& attributes() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleSet* release_attributes();
  ::rti1516_2025::fedpro::AttributeHandleSet* mutable_attributes();
  void set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleSet& _internal_attributes() const;
  ::rti1516_2025::fedpro::AttributeHandleSet* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  ::rti1516_2025::fedpro::AttributeHandleSet* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.ConfirmAttributeOwnershipAcquisitionCancellation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class InformAttributeOwnership final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.InformAttributeOwnership) */ {
 public:
  inline InformAttributeOwnership() : InformAttributeOwnership(nullptr) {}
  ~InformAttributeOwnership() override;
  explicit PROTOBUF_CONSTEXPR InformAttributeOwnership(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InformAttributeOwnership(const InformAttributeOwnership& from);
  InformAttributeOwnership(InformAttributeOwnership&& from) noexcept
    : InformAttributeOwnership() {
    *this = ::std::move(from);
  }

  inline InformAttributeOwnership& operator=(const InformAttributeOwnership& from) {
    CopyFrom(from);
    return *this;
  }
  inline InformAttributeOwnership& operator=(InformAttributeOwnership&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InformAttributeOwnership& default_instance() {
    return *internal_default_instance();
  }
  static inline const InformAttributeOwnership* internal_default_instance() {
    return reinterpret_cast<const InformAttributeOwnership*>(
               &_InformAttributeOwnership_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(InformAttributeOwnership& a, InformAttributeOwnership& b) {
    a.Swap(&b);
  }
  inline void Swap(InformAttributeOwnership* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InformAttributeOwnership* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InformAttributeOwnership* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InformAttributeOwnership>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InformAttributeOwnership& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InformAttributeOwnership& from) {
    InformAttributeOwnership::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InformAttributeOwnership* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.InformAttributeOwnership";
  }
  protected:
  explicit InformAttributeOwnership(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInstanceFieldNumber = 1,
    kAttributesFieldNumber = 2,
    kFederateFieldNumber = 3,
  };
  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::rti1516_2025::fedpro::AttributeHandleSet& attributes() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleSet* release_attributes();
  ::rti1516_2025::fedpro::AttributeHandleSet* mutable_attributes();
  void set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleSet& _internal_attributes() const;
  ::rti1516_2025::fedpro::AttributeHandleSet* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  ::rti1516_2025::fedpro::AttributeHandleSet* unsafe_arena_release_attributes();

  // .rti1516_2025.fedpro.FederateHandle federate = 3;
  bool has_federate() const;
  private:
  bool _internal_has_federate() const;
  public:
  void clear_federate();
  const ::rti1516_2025::fedpro::FederateHandle& federate() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateHandle* release_federate();
  ::rti1516_2025::fedpro::FederateHandle* mutable_federate();
  void set_allocated_federate(::rti1516_2025::fedpro::FederateHandle* federate);
  private:
  const ::rti1516_2025::fedpro::FederateHandle& _internal_federate() const;
  ::rti1516_2025::fedpro::FederateHandle* _internal_mutable_federate();
  public:
  void unsafe_arena_set_allocated_federate(
      ::rti1516_2025::fedpro::FederateHandle* federate);
  ::rti1516_2025::fedpro::FederateHandle* unsafe_arena_release_federate();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.InformAttributeOwnership)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes_;
    ::rti1516_2025::fedpro::FederateHandle* federate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class AttributeIsNotOwned final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.AttributeIsNotOwned) */ {
 public:
  inline AttributeIsNotOwned() : AttributeIsNotOwned(nullptr) {}
  ~AttributeIsNotOwned() override;
  explicit PROTOBUF_CONSTEXPR AttributeIsNotOwned(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeIsNotOwned(const AttributeIsNotOwned& from);
  AttributeIsNotOwned(AttributeIsNotOwned&& from) noexcept
    : AttributeIsNotOwned() {
    *this = ::std::move(from);
  }

  inline AttributeIsNotOwned& operator=(const AttributeIsNotOwned& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeIsNotOwned& operator=(AttributeIsNotOwned&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeIsNotOwned& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeIsNotOwned* internal_default_instance() {
    return reinterpret_cast<const AttributeIsNotOwned*>(
               &_AttributeIsNotOwned_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(AttributeIsNotOwned& a, AttributeIsNotOwned& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeIsNotOwned* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeIsNotOwned* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeIsNotOwned* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeIsNotOwned>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttributeIsNotOwned& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttributeIsNotOwned& from) {
    AttributeIsNotOwned::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeIsNotOwned* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.AttributeIsNotOwned";
  }
  protected:
  explicit AttributeIsNotOwned(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInstanceFieldNumber = 1,
    kAttributesFieldNumber = 2,
  };
  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::rti1516_2025::fedpro::AttributeHandleSet& attributes() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleSet* release_attributes();
  ::rti1516_2025::fedpro::AttributeHandleSet* mutable_attributes();
  void set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleSet& _internal_attributes() const;
  ::rti1516_2025::fedpro::AttributeHandleSet* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  ::rti1516_2025::fedpro::AttributeHandleSet* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.AttributeIsNotOwned)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class AttributeIsOwnedByRTI final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.AttributeIsOwnedByRTI) */ {
 public:
  inline AttributeIsOwnedByRTI() : AttributeIsOwnedByRTI(nullptr) {}
  ~AttributeIsOwnedByRTI() override;
  explicit PROTOBUF_CONSTEXPR AttributeIsOwnedByRTI(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AttributeIsOwnedByRTI(const AttributeIsOwnedByRTI& from);
  AttributeIsOwnedByRTI(AttributeIsOwnedByRTI&& from) noexcept
    : AttributeIsOwnedByRTI() {
    *this = ::std::move(from);
  }

  inline AttributeIsOwnedByRTI& operator=(const AttributeIsOwnedByRTI& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeIsOwnedByRTI& operator=(AttributeIsOwnedByRTI&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeIsOwnedByRTI& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeIsOwnedByRTI* internal_default_instance() {
    return reinterpret_cast<const AttributeIsOwnedByRTI*>(
               &_AttributeIsOwnedByRTI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(AttributeIsOwnedByRTI& a, AttributeIsOwnedByRTI& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeIsOwnedByRTI* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeIsOwnedByRTI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeIsOwnedByRTI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeIsOwnedByRTI>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AttributeIsOwnedByRTI& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AttributeIsOwnedByRTI& from) {
    AttributeIsOwnedByRTI::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttributeIsOwnedByRTI* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.AttributeIsOwnedByRTI";
  }
  protected:
  explicit AttributeIsOwnedByRTI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectInstanceFieldNumber = 1,
    kAttributesFieldNumber = 2,
  };
  // .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
  bool has_objectinstance() const;
  private:
  bool _internal_has_objectinstance() const;
  public:
  void clear_objectinstance();
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& objectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceHandle* release_objectinstance();
  ::rti1516_2025::fedpro::ObjectInstanceHandle* mutable_objectinstance();
  void set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceHandle& _internal_objectinstance() const;
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _internal_mutable_objectinstance();
  public:
  void unsafe_arena_set_allocated_objectinstance(
      ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance);
  ::rti1516_2025::fedpro::ObjectInstanceHandle* unsafe_arena_release_objectinstance();

  // .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::rti1516_2025::fedpro::AttributeHandleSet& attributes() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeHandleSet* release_attributes();
  ::rti1516_2025::fedpro::AttributeHandleSet* mutable_attributes();
  void set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  private:
  const ::rti1516_2025::fedpro::AttributeHandleSet& _internal_attributes() const;
  ::rti1516_2025::fedpro::AttributeHandleSet* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::rti1516_2025::fedpro::AttributeHandleSet* attributes);
  ::rti1516_2025::fedpro::AttributeHandleSet* unsafe_arena_release_attributes();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.AttributeIsOwnedByRTI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance_;
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class TimeRegulationEnabled final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.TimeRegulationEnabled) */ {
 public:
  inline TimeRegulationEnabled() : TimeRegulationEnabled(nullptr) {}
  ~TimeRegulationEnabled() override;
  explicit PROTOBUF_CONSTEXPR TimeRegulationEnabled(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeRegulationEnabled(const TimeRegulationEnabled& from);
  TimeRegulationEnabled(TimeRegulationEnabled&& from) noexcept
    : TimeRegulationEnabled() {
    *this = ::std::move(from);
  }

  inline TimeRegulationEnabled& operator=(const TimeRegulationEnabled& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeRegulationEnabled& operator=(TimeRegulationEnabled&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeRegulationEnabled& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeRegulationEnabled* internal_default_instance() {
    return reinterpret_cast<const TimeRegulationEnabled*>(
               &_TimeRegulationEnabled_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(TimeRegulationEnabled& a, TimeRegulationEnabled& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeRegulationEnabled* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeRegulationEnabled* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeRegulationEnabled* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeRegulationEnabled>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeRegulationEnabled& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeRegulationEnabled& from) {
    TimeRegulationEnabled::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeRegulationEnabled* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.TimeRegulationEnabled";
  }
  protected:
  explicit TimeRegulationEnabled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // .rti1516_2025.fedpro.LogicalTime time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::rti1516_2025::fedpro::LogicalTime& time() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::LogicalTime* release_time();
  ::rti1516_2025::fedpro::LogicalTime* mutable_time();
  void set_allocated_time(::rti1516_2025::fedpro::LogicalTime* time);
  private:
  const ::rti1516_2025::fedpro::LogicalTime& _internal_time() const;
  ::rti1516_2025::fedpro::LogicalTime* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::rti1516_2025::fedpro::LogicalTime* time);
  ::rti1516_2025::fedpro::LogicalTime* unsafe_arena_release_time();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.TimeRegulationEnabled)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::LogicalTime* time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class TimeConstrainedEnabled final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.TimeConstrainedEnabled) */ {
 public:
  inline TimeConstrainedEnabled() : TimeConstrainedEnabled(nullptr) {}
  ~TimeConstrainedEnabled() override;
  explicit PROTOBUF_CONSTEXPR TimeConstrainedEnabled(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeConstrainedEnabled(const TimeConstrainedEnabled& from);
  TimeConstrainedEnabled(TimeConstrainedEnabled&& from) noexcept
    : TimeConstrainedEnabled() {
    *this = ::std::move(from);
  }

  inline TimeConstrainedEnabled& operator=(const TimeConstrainedEnabled& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeConstrainedEnabled& operator=(TimeConstrainedEnabled&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeConstrainedEnabled& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeConstrainedEnabled* internal_default_instance() {
    return reinterpret_cast<const TimeConstrainedEnabled*>(
               &_TimeConstrainedEnabled_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(TimeConstrainedEnabled& a, TimeConstrainedEnabled& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeConstrainedEnabled* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeConstrainedEnabled* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeConstrainedEnabled* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeConstrainedEnabled>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeConstrainedEnabled& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeConstrainedEnabled& from) {
    TimeConstrainedEnabled::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeConstrainedEnabled* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.TimeConstrainedEnabled";
  }
  protected:
  explicit TimeConstrainedEnabled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // .rti1516_2025.fedpro.LogicalTime time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::rti1516_2025::fedpro::LogicalTime& time() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::LogicalTime* release_time();
  ::rti1516_2025::fedpro::LogicalTime* mutable_time();
  void set_allocated_time(::rti1516_2025::fedpro::LogicalTime* time);
  private:
  const ::rti1516_2025::fedpro::LogicalTime& _internal_time() const;
  ::rti1516_2025::fedpro::LogicalTime* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::rti1516_2025::fedpro::LogicalTime* time);
  ::rti1516_2025::fedpro::LogicalTime* unsafe_arena_release_time();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.TimeConstrainedEnabled)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::LogicalTime* time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class FlushQueueGrant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.FlushQueueGrant) */ {
 public:
  inline FlushQueueGrant() : FlushQueueGrant(nullptr) {}
  ~FlushQueueGrant() override;
  explicit PROTOBUF_CONSTEXPR FlushQueueGrant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlushQueueGrant(const FlushQueueGrant& from);
  FlushQueueGrant(FlushQueueGrant&& from) noexcept
    : FlushQueueGrant() {
    *this = ::std::move(from);
  }

  inline FlushQueueGrant& operator=(const FlushQueueGrant& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlushQueueGrant& operator=(FlushQueueGrant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlushQueueGrant& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlushQueueGrant* internal_default_instance() {
    return reinterpret_cast<const FlushQueueGrant*>(
               &_FlushQueueGrant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(FlushQueueGrant& a, FlushQueueGrant& b) {
    a.Swap(&b);
  }
  inline void Swap(FlushQueueGrant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlushQueueGrant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlushQueueGrant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlushQueueGrant>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FlushQueueGrant& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FlushQueueGrant& from) {
    FlushQueueGrant::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlushQueueGrant* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.FlushQueueGrant";
  }
  protected:
  explicit FlushQueueGrant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kOptimisticTimeFieldNumber = 2,
  };
  // .rti1516_2025.fedpro.LogicalTime time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::rti1516_2025::fedpro::LogicalTime& time() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::LogicalTime* release_time();
  ::rti1516_2025::fedpro::LogicalTime* mutable_time();
  void set_allocated_time(::rti1516_2025::fedpro::LogicalTime* time);
  private:
  const ::rti1516_2025::fedpro::LogicalTime& _internal_time() const;
  ::rti1516_2025::fedpro::LogicalTime* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::rti1516_2025::fedpro::LogicalTime* time);
  ::rti1516_2025::fedpro::LogicalTime* unsafe_arena_release_time();

  // .rti1516_2025.fedpro.LogicalTime optimisticTime = 2;
  bool has_optimistictime() const;
  private:
  bool _internal_has_optimistictime() const;
  public:
  void clear_optimistictime();
  const ::rti1516_2025::fedpro::LogicalTime& optimistictime() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::LogicalTime* release_optimistictime();
  ::rti1516_2025::fedpro::LogicalTime* mutable_optimistictime();
  void set_allocated_optimistictime(::rti1516_2025::fedpro::LogicalTime* optimistictime);
  private:
  const ::rti1516_2025::fedpro::LogicalTime& _internal_optimistictime() const;
  ::rti1516_2025::fedpro::LogicalTime* _internal_mutable_optimistictime();
  public:
  void unsafe_arena_set_allocated_optimistictime(
      ::rti1516_2025::fedpro::LogicalTime* optimistictime);
  ::rti1516_2025::fedpro::LogicalTime* unsafe_arena_release_optimistictime();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.FlushQueueGrant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::LogicalTime* time_;
    ::rti1516_2025::fedpro::LogicalTime* optimistictime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class TimeAdvanceGrant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.TimeAdvanceGrant) */ {
 public:
  inline TimeAdvanceGrant() : TimeAdvanceGrant(nullptr) {}
  ~TimeAdvanceGrant() override;
  explicit PROTOBUF_CONSTEXPR TimeAdvanceGrant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeAdvanceGrant(const TimeAdvanceGrant& from);
  TimeAdvanceGrant(TimeAdvanceGrant&& from) noexcept
    : TimeAdvanceGrant() {
    *this = ::std::move(from);
  }

  inline TimeAdvanceGrant& operator=(const TimeAdvanceGrant& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeAdvanceGrant& operator=(TimeAdvanceGrant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeAdvanceGrant& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeAdvanceGrant* internal_default_instance() {
    return reinterpret_cast<const TimeAdvanceGrant*>(
               &_TimeAdvanceGrant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(TimeAdvanceGrant& a, TimeAdvanceGrant& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeAdvanceGrant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeAdvanceGrant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeAdvanceGrant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeAdvanceGrant>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeAdvanceGrant& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeAdvanceGrant& from) {
    TimeAdvanceGrant::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeAdvanceGrant* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.TimeAdvanceGrant";
  }
  protected:
  explicit TimeAdvanceGrant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // .rti1516_2025.fedpro.LogicalTime time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::rti1516_2025::fedpro::LogicalTime& time() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::LogicalTime* release_time();
  ::rti1516_2025::fedpro::LogicalTime* mutable_time();
  void set_allocated_time(::rti1516_2025::fedpro::LogicalTime* time);
  private:
  const ::rti1516_2025::fedpro::LogicalTime& _internal_time() const;
  ::rti1516_2025::fedpro::LogicalTime* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::rti1516_2025::fedpro::LogicalTime* time);
  ::rti1516_2025::fedpro::LogicalTime* unsafe_arena_release_time();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.TimeAdvanceGrant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::LogicalTime* time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class RequestRetraction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.RequestRetraction) */ {
 public:
  inline RequestRetraction() : RequestRetraction(nullptr) {}
  ~RequestRetraction() override;
  explicit PROTOBUF_CONSTEXPR RequestRetraction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestRetraction(const RequestRetraction& from);
  RequestRetraction(RequestRetraction&& from) noexcept
    : RequestRetraction() {
    *this = ::std::move(from);
  }

  inline RequestRetraction& operator=(const RequestRetraction& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestRetraction& operator=(RequestRetraction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestRetraction& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestRetraction* internal_default_instance() {
    return reinterpret_cast<const RequestRetraction*>(
               &_RequestRetraction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(RequestRetraction& a, RequestRetraction& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestRetraction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestRetraction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestRetraction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestRetraction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestRetraction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestRetraction& from) {
    RequestRetraction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestRetraction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.RequestRetraction";
  }
  protected:
  explicit RequestRetraction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetractionFieldNumber = 1,
  };
  // .rti1516_2025.fedpro.MessageRetractionHandle retraction = 1;
  bool has_retraction() const;
  private:
  bool _internal_has_retraction() const;
  public:
  void clear_retraction();
  const ::rti1516_2025::fedpro::MessageRetractionHandle& retraction() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::MessageRetractionHandle* release_retraction();
  ::rti1516_2025::fedpro::MessageRetractionHandle* mutable_retraction();
  void set_allocated_retraction(::rti1516_2025::fedpro::MessageRetractionHandle* retraction);
  private:
  const ::rti1516_2025::fedpro::MessageRetractionHandle& _internal_retraction() const;
  ::rti1516_2025::fedpro::MessageRetractionHandle* _internal_mutable_retraction();
  public:
  void unsafe_arena_set_allocated_retraction(
      ::rti1516_2025::fedpro::MessageRetractionHandle* retraction);
  ::rti1516_2025::fedpro::MessageRetractionHandle* unsafe_arena_release_retraction();

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.RequestRetraction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::rti1516_2025::fedpro::MessageRetractionHandle* retraction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class CallbackSucceeded final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.CallbackSucceeded) */ {
 public:
  inline CallbackSucceeded() : CallbackSucceeded(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CallbackSucceeded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackSucceeded(const CallbackSucceeded& from);
  CallbackSucceeded(CallbackSucceeded&& from) noexcept
    : CallbackSucceeded() {
    *this = ::std::move(from);
  }

  inline CallbackSucceeded& operator=(const CallbackSucceeded& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackSucceeded& operator=(CallbackSucceeded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CallbackSucceeded& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackSucceeded* internal_default_instance() {
    return reinterpret_cast<const CallbackSucceeded*>(
               &_CallbackSucceeded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CallbackSucceeded& a, CallbackSucceeded& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackSucceeded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackSucceeded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackSucceeded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackSucceeded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CallbackSucceeded& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CallbackSucceeded& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.CallbackSucceeded";
  }
  protected:
  explicit CallbackSucceeded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.CallbackSucceeded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class CallbackRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.CallbackRequest) */ {
 public:
  inline CallbackRequest() : CallbackRequest(nullptr) {}
  ~CallbackRequest() override;
  explicit PROTOBUF_CONSTEXPR CallbackRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackRequest(const CallbackRequest& from);
  CallbackRequest(CallbackRequest&& from) noexcept
    : CallbackRequest() {
    *this = ::std::move(from);
  }

  inline CallbackRequest& operator=(const CallbackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackRequest& operator=(CallbackRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CallbackRequest& default_instance() {
    return *internal_default_instance();
  }
  enum CallbackRequestCase {
    kConnectionLost = 1,
    kReportFederationExecutions = 2,
    kReportFederationExecutionMembers = 3,
    kReportFederationExecutionDoesNotExist = 4,
    kFederateResigned = 5,
    kSynchronizationPointRegistrationSucceeded = 6,
    kSynchronizationPointRegistrationFailed = 7,
    kAnnounceSynchronizationPoint = 8,
    kFederationSynchronized = 9,
    kInitiateFederateSave = 10,
    kInitiateFederateSaveWithTime = 11,
    kFederationSaved = 12,
    kFederationNotSaved = 13,
    kFederationSaveStatusResponse = 14,
    kRequestFederationRestoreSucceeded = 15,
    kRequestFederationRestoreFailed = 16,
    kFederationRestoreBegun = 17,
    kInitiateFederateRestore = 18,
    kFederationRestored = 19,
    kFederationNotRestored = 20,
    kFederationRestoreStatusResponse = 21,
    kStartRegistrationForObjectClass = 22,
    kStopRegistrationForObjectClass = 23,
    kTurnInteractionsOn = 24,
    kTurnInteractionsOff = 25,
    kObjectInstanceNameReservationSucceeded = 26,
    kObjectInstanceNameReservationFailed = 27,
    kMultipleObjectInstanceNameReservationSucceeded = 28,
    kMultipleObjectInstanceNameReservationFailed = 29,
    kDiscoverObjectInstance = 30,
    kReflectAttributeValues = 31,
    kReflectAttributeValuesWithTime = 32,
    kReceiveInteraction = 33,
    kReceiveInteractionWithTime = 34,
    kReceiveDirectedInteraction = 35,
    kReceiveDirectedInteractionWithTime = 36,
    kRemoveObjectInstance = 37,
    kRemoveObjectInstanceWithTime = 38,
    kAttributesInScope = 39,
    kAttributesOutOfScope = 40,
    kProvideAttributeValueUpdate = 41,
    kTurnUpdatesOnForObjectInstance = 42,
    kTurnUpdatesOnForObjectInstanceWithRate = 43,
    kTurnUpdatesOffForObjectInstance = 44,
    kConfirmAttributeTransportationTypeChange = 45,
    kReportAttributeTransportationType = 46,
    kConfirmInteractionTransportationTypeChange = 47,
    kReportInteractionTransportationType = 48,
    kRequestAttributeOwnershipAssumption = 49,
    kRequestDivestitureConfirmation = 50,
    kAttributeOwnershipAcquisitionNotification = 51,
    kAttributeOwnershipUnavailable = 52,
    kRequestAttributeOwnershipRelease = 53,
    kConfirmAttributeOwnershipAcquisitionCancellation = 54,
    kInformAttributeOwnership = 55,
    kAttributeIsNotOwned = 56,
    kAttributeIsOwnedByRTI = 57,
    kTimeRegulationEnabled = 58,
    kTimeConstrainedEnabled = 59,
    kFlushQueueGrant = 60,
    kTimeAdvanceGrant = 61,
    kRequestRetraction = 62,
    CALLBACKREQUEST_NOT_SET = 0,
  };

  static inline const CallbackRequest* internal_default_instance() {
    return reinterpret_cast<const CallbackRequest*>(
               &_CallbackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CallbackRequest& a, CallbackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CallbackRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CallbackRequest& from) {
    CallbackRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallbackRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.CallbackRequest";
  }
  protected:
  explicit CallbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionLostFieldNumber = 1,
    kReportFederationExecutionsFieldNumber = 2,
    kReportFederationExecutionMembersFieldNumber = 3,
    kReportFederationExecutionDoesNotExistFieldNumber = 4,
    kFederateResignedFieldNumber = 5,
    kSynchronizationPointRegistrationSucceededFieldNumber = 6,
    kSynchronizationPointRegistrationFailedFieldNumber = 7,
    kAnnounceSynchronizationPointFieldNumber = 8,
    kFederationSynchronizedFieldNumber = 9,
    kInitiateFederateSaveFieldNumber = 10,
    kInitiateFederateSaveWithTimeFieldNumber = 11,
    kFederationSavedFieldNumber = 12,
    kFederationNotSavedFieldNumber = 13,
    kFederationSaveStatusResponseFieldNumber = 14,
    kRequestFederationRestoreSucceededFieldNumber = 15,
    kRequestFederationRestoreFailedFieldNumber = 16,
    kFederationRestoreBegunFieldNumber = 17,
    kInitiateFederateRestoreFieldNumber = 18,
    kFederationRestoredFieldNumber = 19,
    kFederationNotRestoredFieldNumber = 20,
    kFederationRestoreStatusResponseFieldNumber = 21,
    kStartRegistrationForObjectClassFieldNumber = 22,
    kStopRegistrationForObjectClassFieldNumber = 23,
    kTurnInteractionsOnFieldNumber = 24,
    kTurnInteractionsOffFieldNumber = 25,
    kObjectInstanceNameReservationSucceededFieldNumber = 26,
    kObjectInstanceNameReservationFailedFieldNumber = 27,
    kMultipleObjectInstanceNameReservationSucceededFieldNumber = 28,
    kMultipleObjectInstanceNameReservationFailedFieldNumber = 29,
    kDiscoverObjectInstanceFieldNumber = 30,
    kReflectAttributeValuesFieldNumber = 31,
    kReflectAttributeValuesWithTimeFieldNumber = 32,
    kReceiveInteractionFieldNumber = 33,
    kReceiveInteractionWithTimeFieldNumber = 34,
    kReceiveDirectedInteractionFieldNumber = 35,
    kReceiveDirectedInteractionWithTimeFieldNumber = 36,
    kRemoveObjectInstanceFieldNumber = 37,
    kRemoveObjectInstanceWithTimeFieldNumber = 38,
    kAttributesInScopeFieldNumber = 39,
    kAttributesOutOfScopeFieldNumber = 40,
    kProvideAttributeValueUpdateFieldNumber = 41,
    kTurnUpdatesOnForObjectInstanceFieldNumber = 42,
    kTurnUpdatesOnForObjectInstanceWithRateFieldNumber = 43,
    kTurnUpdatesOffForObjectInstanceFieldNumber = 44,
    kConfirmAttributeTransportationTypeChangeFieldNumber = 45,
    kReportAttributeTransportationTypeFieldNumber = 46,
    kConfirmInteractionTransportationTypeChangeFieldNumber = 47,
    kReportInteractionTransportationTypeFieldNumber = 48,
    kRequestAttributeOwnershipAssumptionFieldNumber = 49,
    kRequestDivestitureConfirmationFieldNumber = 50,
    kAttributeOwnershipAcquisitionNotificationFieldNumber = 51,
    kAttributeOwnershipUnavailableFieldNumber = 52,
    kRequestAttributeOwnershipReleaseFieldNumber = 53,
    kConfirmAttributeOwnershipAcquisitionCancellationFieldNumber = 54,
    kInformAttributeOwnershipFieldNumber = 55,
    kAttributeIsNotOwnedFieldNumber = 56,
    kAttributeIsOwnedByRTIFieldNumber = 57,
    kTimeRegulationEnabledFieldNumber = 58,
    kTimeConstrainedEnabledFieldNumber = 59,
    kFlushQueueGrantFieldNumber = 60,
    kTimeAdvanceGrantFieldNumber = 61,
    kRequestRetractionFieldNumber = 62,
  };
  // .rti1516_2025.fedpro.ConnectionLost connectionLost = 1;
  bool has_connectionlost() const;
  private:
  bool _internal_has_connectionlost() const;
  public:
  void clear_connectionlost();
  const ::rti1516_2025::fedpro::ConnectionLost& connectionlost() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ConnectionLost* release_connectionlost();
  ::rti1516_2025::fedpro::ConnectionLost* mutable_connectionlost();
  void set_allocated_connectionlost(::rti1516_2025::fedpro::ConnectionLost* connectionlost);
  private:
  const ::rti1516_2025::fedpro::ConnectionLost& _internal_connectionlost() const;
  ::rti1516_2025::fedpro::ConnectionLost* _internal_mutable_connectionlost();
  public:
  void unsafe_arena_set_allocated_connectionlost(
      ::rti1516_2025::fedpro::ConnectionLost* connectionlost);
  ::rti1516_2025::fedpro::ConnectionLost* unsafe_arena_release_connectionlost();

  // .rti1516_2025.fedpro.ReportFederationExecutions reportFederationExecutions = 2;
  bool has_reportfederationexecutions() const;
  private:
  bool _internal_has_reportfederationexecutions() const;
  public:
  void clear_reportfederationexecutions();
  const ::rti1516_2025::fedpro::ReportFederationExecutions& reportfederationexecutions() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ReportFederationExecutions* release_reportfederationexecutions();
  ::rti1516_2025::fedpro::ReportFederationExecutions* mutable_reportfederationexecutions();
  void set_allocated_reportfederationexecutions(::rti1516_2025::fedpro::ReportFederationExecutions* reportfederationexecutions);
  private:
  const ::rti1516_2025::fedpro::ReportFederationExecutions& _internal_reportfederationexecutions() const;
  ::rti1516_2025::fedpro::ReportFederationExecutions* _internal_mutable_reportfederationexecutions();
  public:
  void unsafe_arena_set_allocated_reportfederationexecutions(
      ::rti1516_2025::fedpro::ReportFederationExecutions* reportfederationexecutions);
  ::rti1516_2025::fedpro::ReportFederationExecutions* unsafe_arena_release_reportfederationexecutions();

  // .rti1516_2025.fedpro.ReportFederationExecutionMembers reportFederationExecutionMembers = 3;
  bool has_reportfederationexecutionmembers() const;
  private:
  bool _internal_has_reportfederationexecutionmembers() const;
  public:
  void clear_reportfederationexecutionmembers();
  const ::rti1516_2025::fedpro::ReportFederationExecutionMembers& reportfederationexecutionmembers() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ReportFederationExecutionMembers* release_reportfederationexecutionmembers();
  ::rti1516_2025::fedpro::ReportFederationExecutionMembers* mutable_reportfederationexecutionmembers();
  void set_allocated_reportfederationexecutionmembers(::rti1516_2025::fedpro::ReportFederationExecutionMembers* reportfederationexecutionmembers);
  private:
  const ::rti1516_2025::fedpro::ReportFederationExecutionMembers& _internal_reportfederationexecutionmembers() const;
  ::rti1516_2025::fedpro::ReportFederationExecutionMembers* _internal_mutable_reportfederationexecutionmembers();
  public:
  void unsafe_arena_set_allocated_reportfederationexecutionmembers(
      ::rti1516_2025::fedpro::ReportFederationExecutionMembers* reportfederationexecutionmembers);
  ::rti1516_2025::fedpro::ReportFederationExecutionMembers* unsafe_arena_release_reportfederationexecutionmembers();

  // .rti1516_2025.fedpro.ReportFederationExecutionDoesNotExist reportFederationExecutionDoesNotExist = 4;
  bool has_reportfederationexecutiondoesnotexist() const;
  private:
  bool _internal_has_reportfederationexecutiondoesnotexist() const;
  public:
  void clear_reportfederationexecutiondoesnotexist();
  const ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist& reportfederationexecutiondoesnotexist() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist* release_reportfederationexecutiondoesnotexist();
  ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist* mutable_reportfederationexecutiondoesnotexist();
  void set_allocated_reportfederationexecutiondoesnotexist(::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist* reportfederationexecutiondoesnotexist);
  private:
  const ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist& _internal_reportfederationexecutiondoesnotexist() const;
  ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist* _internal_mutable_reportfederationexecutiondoesnotexist();
  public:
  void unsafe_arena_set_allocated_reportfederationexecutiondoesnotexist(
      ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist* reportfederationexecutiondoesnotexist);
  ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist* unsafe_arena_release_reportfederationexecutiondoesnotexist();

  // .rti1516_2025.fedpro.FederateResigned federateResigned = 5;
  bool has_federateresigned() const;
  private:
  bool _internal_has_federateresigned() const;
  public:
  void clear_federateresigned();
  const ::rti1516_2025::fedpro::FederateResigned& federateresigned() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederateResigned* release_federateresigned();
  ::rti1516_2025::fedpro::FederateResigned* mutable_federateresigned();
  void set_allocated_federateresigned(::rti1516_2025::fedpro::FederateResigned* federateresigned);
  private:
  const ::rti1516_2025::fedpro::FederateResigned& _internal_federateresigned() const;
  ::rti1516_2025::fedpro::FederateResigned* _internal_mutable_federateresigned();
  public:
  void unsafe_arena_set_allocated_federateresigned(
      ::rti1516_2025::fedpro::FederateResigned* federateresigned);
  ::rti1516_2025::fedpro::FederateResigned* unsafe_arena_release_federateresigned();

  // .rti1516_2025.fedpro.SynchronizationPointRegistrationSucceeded synchronizationPointRegistrationSucceeded = 6;
  bool has_synchronizationpointregistrationsucceeded() const;
  private:
  bool _internal_has_synchronizationpointregistrationsucceeded() const;
  public:
  void clear_synchronizationpointregistrationsucceeded();
  const ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded& synchronizationpointregistrationsucceeded() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded* release_synchronizationpointregistrationsucceeded();
  ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded* mutable_synchronizationpointregistrationsucceeded();
  void set_allocated_synchronizationpointregistrationsucceeded(::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded* synchronizationpointregistrationsucceeded);
  private:
  const ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded& _internal_synchronizationpointregistrationsucceeded() const;
  ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded* _internal_mutable_synchronizationpointregistrationsucceeded();
  public:
  void unsafe_arena_set_allocated_synchronizationpointregistrationsucceeded(
      ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded* synchronizationpointregistrationsucceeded);
  ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded* unsafe_arena_release_synchronizationpointregistrationsucceeded();

  // .rti1516_2025.fedpro.SynchronizationPointRegistrationFailed synchronizationPointRegistrationFailed = 7;
  bool has_synchronizationpointregistrationfailed() const;
  private:
  bool _internal_has_synchronizationpointregistrationfailed() const;
  public:
  void clear_synchronizationpointregistrationfailed();
  const ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed& synchronizationpointregistrationfailed() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed* release_synchronizationpointregistrationfailed();
  ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed* mutable_synchronizationpointregistrationfailed();
  void set_allocated_synchronizationpointregistrationfailed(::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed* synchronizationpointregistrationfailed);
  private:
  const ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed& _internal_synchronizationpointregistrationfailed() const;
  ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed* _internal_mutable_synchronizationpointregistrationfailed();
  public:
  void unsafe_arena_set_allocated_synchronizationpointregistrationfailed(
      ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed* synchronizationpointregistrationfailed);
  ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed* unsafe_arena_release_synchronizationpointregistrationfailed();

  // .rti1516_2025.fedpro.AnnounceSynchronizationPoint announceSynchronizationPoint = 8;
  bool has_announcesynchronizationpoint() const;
  private:
  bool _internal_has_announcesynchronizationpoint() const;
  public:
  void clear_announcesynchronizationpoint();
  const ::rti1516_2025::fedpro::AnnounceSynchronizationPoint& announcesynchronizationpoint() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AnnounceSynchronizationPoint* release_announcesynchronizationpoint();
  ::rti1516_2025::fedpro::AnnounceSynchronizationPoint* mutable_announcesynchronizationpoint();
  void set_allocated_announcesynchronizationpoint(::rti1516_2025::fedpro::AnnounceSynchronizationPoint* announcesynchronizationpoint);
  private:
  const ::rti1516_2025::fedpro::AnnounceSynchronizationPoint& _internal_announcesynchronizationpoint() const;
  ::rti1516_2025::fedpro::AnnounceSynchronizationPoint* _internal_mutable_announcesynchronizationpoint();
  public:
  void unsafe_arena_set_allocated_announcesynchronizationpoint(
      ::rti1516_2025::fedpro::AnnounceSynchronizationPoint* announcesynchronizationpoint);
  ::rti1516_2025::fedpro::AnnounceSynchronizationPoint* unsafe_arena_release_announcesynchronizationpoint();

  // .rti1516_2025.fedpro.FederationSynchronized federationSynchronized = 9;
  bool has_federationsynchronized() const;
  private:
  bool _internal_has_federationsynchronized() const;
  public:
  void clear_federationsynchronized();
  const ::rti1516_2025::fedpro::FederationSynchronized& federationsynchronized() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederationSynchronized* release_federationsynchronized();
  ::rti1516_2025::fedpro::FederationSynchronized* mutable_federationsynchronized();
  void set_allocated_federationsynchronized(::rti1516_2025::fedpro::FederationSynchronized* federationsynchronized);
  private:
  const ::rti1516_2025::fedpro::FederationSynchronized& _internal_federationsynchronized() const;
  ::rti1516_2025::fedpro::FederationSynchronized* _internal_mutable_federationsynchronized();
  public:
  void unsafe_arena_set_allocated_federationsynchronized(
      ::rti1516_2025::fedpro::FederationSynchronized* federationsynchronized);
  ::rti1516_2025::fedpro::FederationSynchronized* unsafe_arena_release_federationsynchronized();

  // .rti1516_2025.fedpro.InitiateFederateSave initiateFederateSave = 10;
  bool has_initiatefederatesave() const;
  private:
  bool _internal_has_initiatefederatesave() const;
  public:
  void clear_initiatefederatesave();
  const ::rti1516_2025::fedpro::InitiateFederateSave& initiatefederatesave() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::InitiateFederateSave* release_initiatefederatesave();
  ::rti1516_2025::fedpro::InitiateFederateSave* mutable_initiatefederatesave();
  void set_allocated_initiatefederatesave(::rti1516_2025::fedpro::InitiateFederateSave* initiatefederatesave);
  private:
  const ::rti1516_2025::fedpro::InitiateFederateSave& _internal_initiatefederatesave() const;
  ::rti1516_2025::fedpro::InitiateFederateSave* _internal_mutable_initiatefederatesave();
  public:
  void unsafe_arena_set_allocated_initiatefederatesave(
      ::rti1516_2025::fedpro::InitiateFederateSave* initiatefederatesave);
  ::rti1516_2025::fedpro::InitiateFederateSave* unsafe_arena_release_initiatefederatesave();

  // .rti1516_2025.fedpro.InitiateFederateSaveWithTime initiateFederateSaveWithTime = 11;
  bool has_initiatefederatesavewithtime() const;
  private:
  bool _internal_has_initiatefederatesavewithtime() const;
  public:
  void clear_initiatefederatesavewithtime();
  const ::rti1516_2025::fedpro::InitiateFederateSaveWithTime& initiatefederatesavewithtime() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::InitiateFederateSaveWithTime* release_initiatefederatesavewithtime();
  ::rti1516_2025::fedpro::InitiateFederateSaveWithTime* mutable_initiatefederatesavewithtime();
  void set_allocated_initiatefederatesavewithtime(::rti1516_2025::fedpro::InitiateFederateSaveWithTime* initiatefederatesavewithtime);
  private:
  const ::rti1516_2025::fedpro::InitiateFederateSaveWithTime& _internal_initiatefederatesavewithtime() const;
  ::rti1516_2025::fedpro::InitiateFederateSaveWithTime* _internal_mutable_initiatefederatesavewithtime();
  public:
  void unsafe_arena_set_allocated_initiatefederatesavewithtime(
      ::rti1516_2025::fedpro::InitiateFederateSaveWithTime* initiatefederatesavewithtime);
  ::rti1516_2025::fedpro::InitiateFederateSaveWithTime* unsafe_arena_release_initiatefederatesavewithtime();

  // .rti1516_2025.fedpro.FederationSaved federationSaved = 12;
  bool has_federationsaved() const;
  private:
  bool _internal_has_federationsaved() const;
  public:
  void clear_federationsaved();
  const ::rti1516_2025::fedpro::FederationSaved& federationsaved() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederationSaved* release_federationsaved();
  ::rti1516_2025::fedpro::FederationSaved* mutable_federationsaved();
  void set_allocated_federationsaved(::rti1516_2025::fedpro::FederationSaved* federationsaved);
  private:
  const ::rti1516_2025::fedpro::FederationSaved& _internal_federationsaved() const;
  ::rti1516_2025::fedpro::FederationSaved* _internal_mutable_federationsaved();
  public:
  void unsafe_arena_set_allocated_federationsaved(
      ::rti1516_2025::fedpro::FederationSaved* federationsaved);
  ::rti1516_2025::fedpro::FederationSaved* unsafe_arena_release_federationsaved();

  // .rti1516_2025.fedpro.FederationNotSaved federationNotSaved = 13;
  bool has_federationnotsaved() const;
  private:
  bool _internal_has_federationnotsaved() const;
  public:
  void clear_federationnotsaved();
  const ::rti1516_2025::fedpro::FederationNotSaved& federationnotsaved() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederationNotSaved* release_federationnotsaved();
  ::rti1516_2025::fedpro::FederationNotSaved* mutable_federationnotsaved();
  void set_allocated_federationnotsaved(::rti1516_2025::fedpro::FederationNotSaved* federationnotsaved);
  private:
  const ::rti1516_2025::fedpro::FederationNotSaved& _internal_federationnotsaved() const;
  ::rti1516_2025::fedpro::FederationNotSaved* _internal_mutable_federationnotsaved();
  public:
  void unsafe_arena_set_allocated_federationnotsaved(
      ::rti1516_2025::fedpro::FederationNotSaved* federationnotsaved);
  ::rti1516_2025::fedpro::FederationNotSaved* unsafe_arena_release_federationnotsaved();

  // .rti1516_2025.fedpro.FederationSaveStatusResponse federationSaveStatusResponse = 14;
  bool has_federationsavestatusresponse() const;
  private:
  bool _internal_has_federationsavestatusresponse() const;
  public:
  void clear_federationsavestatusresponse();
  const ::rti1516_2025::fedpro::FederationSaveStatusResponse& federationsavestatusresponse() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederationSaveStatusResponse* release_federationsavestatusresponse();
  ::rti1516_2025::fedpro::FederationSaveStatusResponse* mutable_federationsavestatusresponse();
  void set_allocated_federationsavestatusresponse(::rti1516_2025::fedpro::FederationSaveStatusResponse* federationsavestatusresponse);
  private:
  const ::rti1516_2025::fedpro::FederationSaveStatusResponse& _internal_federationsavestatusresponse() const;
  ::rti1516_2025::fedpro::FederationSaveStatusResponse* _internal_mutable_federationsavestatusresponse();
  public:
  void unsafe_arena_set_allocated_federationsavestatusresponse(
      ::rti1516_2025::fedpro::FederationSaveStatusResponse* federationsavestatusresponse);
  ::rti1516_2025::fedpro::FederationSaveStatusResponse* unsafe_arena_release_federationsavestatusresponse();

  // .rti1516_2025.fedpro.RequestFederationRestoreSucceeded requestFederationRestoreSucceeded = 15;
  bool has_requestfederationrestoresucceeded() const;
  private:
  bool _internal_has_requestfederationrestoresucceeded() const;
  public:
  void clear_requestfederationrestoresucceeded();
  const ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded& requestfederationrestoresucceeded() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded* release_requestfederationrestoresucceeded();
  ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded* mutable_requestfederationrestoresucceeded();
  void set_allocated_requestfederationrestoresucceeded(::rti1516_2025::fedpro::RequestFederationRestoreSucceeded* requestfederationrestoresucceeded);
  private:
  const ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded& _internal_requestfederationrestoresucceeded() const;
  ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded* _internal_mutable_requestfederationrestoresucceeded();
  public:
  void unsafe_arena_set_allocated_requestfederationrestoresucceeded(
      ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded* requestfederationrestoresucceeded);
  ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded* unsafe_arena_release_requestfederationrestoresucceeded();

  // .rti1516_2025.fedpro.RequestFederationRestoreFailed requestFederationRestoreFailed = 16;
  bool has_requestfederationrestorefailed() const;
  private:
  bool _internal_has_requestfederationrestorefailed() const;
  public:
  void clear_requestfederationrestorefailed();
  const ::rti1516_2025::fedpro::RequestFederationRestoreFailed& requestfederationrestorefailed() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::RequestFederationRestoreFailed* release_requestfederationrestorefailed();
  ::rti1516_2025::fedpro::RequestFederationRestoreFailed* mutable_requestfederationrestorefailed();
  void set_allocated_requestfederationrestorefailed(::rti1516_2025::fedpro::RequestFederationRestoreFailed* requestfederationrestorefailed);
  private:
  const ::rti1516_2025::fedpro::RequestFederationRestoreFailed& _internal_requestfederationrestorefailed() const;
  ::rti1516_2025::fedpro::RequestFederationRestoreFailed* _internal_mutable_requestfederationrestorefailed();
  public:
  void unsafe_arena_set_allocated_requestfederationrestorefailed(
      ::rti1516_2025::fedpro::RequestFederationRestoreFailed* requestfederationrestorefailed);
  ::rti1516_2025::fedpro::RequestFederationRestoreFailed* unsafe_arena_release_requestfederationrestorefailed();

  // .rti1516_2025.fedpro.FederationRestoreBegun federationRestoreBegun = 17;
  bool has_federationrestorebegun() const;
  private:
  bool _internal_has_federationrestorebegun() const;
  public:
  void clear_federationrestorebegun();
  const ::rti1516_2025::fedpro::FederationRestoreBegun& federationrestorebegun() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederationRestoreBegun* release_federationrestorebegun();
  ::rti1516_2025::fedpro::FederationRestoreBegun* mutable_federationrestorebegun();
  void set_allocated_federationrestorebegun(::rti1516_2025::fedpro::FederationRestoreBegun* federationrestorebegun);
  private:
  const ::rti1516_2025::fedpro::FederationRestoreBegun& _internal_federationrestorebegun() const;
  ::rti1516_2025::fedpro::FederationRestoreBegun* _internal_mutable_federationrestorebegun();
  public:
  void unsafe_arena_set_allocated_federationrestorebegun(
      ::rti1516_2025::fedpro::FederationRestoreBegun* federationrestorebegun);
  ::rti1516_2025::fedpro::FederationRestoreBegun* unsafe_arena_release_federationrestorebegun();

  // .rti1516_2025.fedpro.InitiateFederateRestore initiateFederateRestore = 18;
  bool has_initiatefederaterestore() const;
  private:
  bool _internal_has_initiatefederaterestore() const;
  public:
  void clear_initiatefederaterestore();
  const ::rti1516_2025::fedpro::InitiateFederateRestore& initiatefederaterestore() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::InitiateFederateRestore* release_initiatefederaterestore();
  ::rti1516_2025::fedpro::InitiateFederateRestore* mutable_initiatefederaterestore();
  void set_allocated_initiatefederaterestore(::rti1516_2025::fedpro::InitiateFederateRestore* initiatefederaterestore);
  private:
  const ::rti1516_2025::fedpro::InitiateFederateRestore& _internal_initiatefederaterestore() const;
  ::rti1516_2025::fedpro::InitiateFederateRestore* _internal_mutable_initiatefederaterestore();
  public:
  void unsafe_arena_set_allocated_initiatefederaterestore(
      ::rti1516_2025::fedpro::InitiateFederateRestore* initiatefederaterestore);
  ::rti1516_2025::fedpro::InitiateFederateRestore* unsafe_arena_release_initiatefederaterestore();

  // .rti1516_2025.fedpro.FederationRestored federationRestored = 19;
  bool has_federationrestored() const;
  private:
  bool _internal_has_federationrestored() const;
  public:
  void clear_federationrestored();
  const ::rti1516_2025::fedpro::FederationRestored& federationrestored() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederationRestored* release_federationrestored();
  ::rti1516_2025::fedpro::FederationRestored* mutable_federationrestored();
  void set_allocated_federationrestored(::rti1516_2025::fedpro::FederationRestored* federationrestored);
  private:
  const ::rti1516_2025::fedpro::FederationRestored& _internal_federationrestored() const;
  ::rti1516_2025::fedpro::FederationRestored* _internal_mutable_federationrestored();
  public:
  void unsafe_arena_set_allocated_federationrestored(
      ::rti1516_2025::fedpro::FederationRestored* federationrestored);
  ::rti1516_2025::fedpro::FederationRestored* unsafe_arena_release_federationrestored();

  // .rti1516_2025.fedpro.FederationNotRestored federationNotRestored = 20;
  bool has_federationnotrestored() const;
  private:
  bool _internal_has_federationnotrestored() const;
  public:
  void clear_federationnotrestored();
  const ::rti1516_2025::fedpro::FederationNotRestored& federationnotrestored() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederationNotRestored* release_federationnotrestored();
  ::rti1516_2025::fedpro::FederationNotRestored* mutable_federationnotrestored();
  void set_allocated_federationnotrestored(::rti1516_2025::fedpro::FederationNotRestored* federationnotrestored);
  private:
  const ::rti1516_2025::fedpro::FederationNotRestored& _internal_federationnotrestored() const;
  ::rti1516_2025::fedpro::FederationNotRestored* _internal_mutable_federationnotrestored();
  public:
  void unsafe_arena_set_allocated_federationnotrestored(
      ::rti1516_2025::fedpro::FederationNotRestored* federationnotrestored);
  ::rti1516_2025::fedpro::FederationNotRestored* unsafe_arena_release_federationnotrestored();

  // .rti1516_2025.fedpro.FederationRestoreStatusResponse federationRestoreStatusResponse = 21;
  bool has_federationrestorestatusresponse() const;
  private:
  bool _internal_has_federationrestorestatusresponse() const;
  public:
  void clear_federationrestorestatusresponse();
  const ::rti1516_2025::fedpro::FederationRestoreStatusResponse& federationrestorestatusresponse() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FederationRestoreStatusResponse* release_federationrestorestatusresponse();
  ::rti1516_2025::fedpro::FederationRestoreStatusResponse* mutable_federationrestorestatusresponse();
  void set_allocated_federationrestorestatusresponse(::rti1516_2025::fedpro::FederationRestoreStatusResponse* federationrestorestatusresponse);
  private:
  const ::rti1516_2025::fedpro::FederationRestoreStatusResponse& _internal_federationrestorestatusresponse() const;
  ::rti1516_2025::fedpro::FederationRestoreStatusResponse* _internal_mutable_federationrestorestatusresponse();
  public:
  void unsafe_arena_set_allocated_federationrestorestatusresponse(
      ::rti1516_2025::fedpro::FederationRestoreStatusResponse* federationrestorestatusresponse);
  ::rti1516_2025::fedpro::FederationRestoreStatusResponse* unsafe_arena_release_federationrestorestatusresponse();

  // .rti1516_2025.fedpro.StartRegistrationForObjectClass startRegistrationForObjectClass = 22;
  bool has_startregistrationforobjectclass() const;
  private:
  bool _internal_has_startregistrationforobjectclass() const;
  public:
  void clear_startregistrationforobjectclass();
  const ::rti1516_2025::fedpro::StartRegistrationForObjectClass& startregistrationforobjectclass() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::StartRegistrationForObjectClass* release_startregistrationforobjectclass();
  ::rti1516_2025::fedpro::StartRegistrationForObjectClass* mutable_startregistrationforobjectclass();
  void set_allocated_startregistrationforobjectclass(::rti1516_2025::fedpro::StartRegistrationForObjectClass* startregistrationforobjectclass);
  private:
  const ::rti1516_2025::fedpro::StartRegistrationForObjectClass& _internal_startregistrationforobjectclass() const;
  ::rti1516_2025::fedpro::StartRegistrationForObjectClass* _internal_mutable_startregistrationforobjectclass();
  public:
  void unsafe_arena_set_allocated_startregistrationforobjectclass(
      ::rti1516_2025::fedpro::StartRegistrationForObjectClass* startregistrationforobjectclass);
  ::rti1516_2025::fedpro::StartRegistrationForObjectClass* unsafe_arena_release_startregistrationforobjectclass();

  // .rti1516_2025.fedpro.StopRegistrationForObjectClass stopRegistrationForObjectClass = 23;
  bool has_stopregistrationforobjectclass() const;
  private:
  bool _internal_has_stopregistrationforobjectclass() const;
  public:
  void clear_stopregistrationforobjectclass();
  const ::rti1516_2025::fedpro::StopRegistrationForObjectClass& stopregistrationforobjectclass() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::StopRegistrationForObjectClass* release_stopregistrationforobjectclass();
  ::rti1516_2025::fedpro::StopRegistrationForObjectClass* mutable_stopregistrationforobjectclass();
  void set_allocated_stopregistrationforobjectclass(::rti1516_2025::fedpro::StopRegistrationForObjectClass* stopregistrationforobjectclass);
  private:
  const ::rti1516_2025::fedpro::StopRegistrationForObjectClass& _internal_stopregistrationforobjectclass() const;
  ::rti1516_2025::fedpro::StopRegistrationForObjectClass* _internal_mutable_stopregistrationforobjectclass();
  public:
  void unsafe_arena_set_allocated_stopregistrationforobjectclass(
      ::rti1516_2025::fedpro::StopRegistrationForObjectClass* stopregistrationforobjectclass);
  ::rti1516_2025::fedpro::StopRegistrationForObjectClass* unsafe_arena_release_stopregistrationforobjectclass();

  // .rti1516_2025.fedpro.TurnInteractionsOn turnInteractionsOn = 24;
  bool has_turninteractionson() const;
  private:
  bool _internal_has_turninteractionson() const;
  public:
  void clear_turninteractionson();
  const ::rti1516_2025::fedpro::TurnInteractionsOn& turninteractionson() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::TurnInteractionsOn* release_turninteractionson();
  ::rti1516_2025::fedpro::TurnInteractionsOn* mutable_turninteractionson();
  void set_allocated_turninteractionson(::rti1516_2025::fedpro::TurnInteractionsOn* turninteractionson);
  private:
  const ::rti1516_2025::fedpro::TurnInteractionsOn& _internal_turninteractionson() const;
  ::rti1516_2025::fedpro::TurnInteractionsOn* _internal_mutable_turninteractionson();
  public:
  void unsafe_arena_set_allocated_turninteractionson(
      ::rti1516_2025::fedpro::TurnInteractionsOn* turninteractionson);
  ::rti1516_2025::fedpro::TurnInteractionsOn* unsafe_arena_release_turninteractionson();

  // .rti1516_2025.fedpro.TurnInteractionsOff turnInteractionsOff = 25;
  bool has_turninteractionsoff() const;
  private:
  bool _internal_has_turninteractionsoff() const;
  public:
  void clear_turninteractionsoff();
  const ::rti1516_2025::fedpro::TurnInteractionsOff& turninteractionsoff() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::TurnInteractionsOff* release_turninteractionsoff();
  ::rti1516_2025::fedpro::TurnInteractionsOff* mutable_turninteractionsoff();
  void set_allocated_turninteractionsoff(::rti1516_2025::fedpro::TurnInteractionsOff* turninteractionsoff);
  private:
  const ::rti1516_2025::fedpro::TurnInteractionsOff& _internal_turninteractionsoff() const;
  ::rti1516_2025::fedpro::TurnInteractionsOff* _internal_mutable_turninteractionsoff();
  public:
  void unsafe_arena_set_allocated_turninteractionsoff(
      ::rti1516_2025::fedpro::TurnInteractionsOff* turninteractionsoff);
  ::rti1516_2025::fedpro::TurnInteractionsOff* unsafe_arena_release_turninteractionsoff();

  // .rti1516_2025.fedpro.ObjectInstanceNameReservationSucceeded objectInstanceNameReservationSucceeded = 26;
  bool has_objectinstancenamereservationsucceeded() const;
  private:
  bool _internal_has_objectinstancenamereservationsucceeded() const;
  public:
  void clear_objectinstancenamereservationsucceeded();
  const ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded& objectinstancenamereservationsucceeded() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded* release_objectinstancenamereservationsucceeded();
  ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded* mutable_objectinstancenamereservationsucceeded();
  void set_allocated_objectinstancenamereservationsucceeded(::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded* objectinstancenamereservationsucceeded);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded& _internal_objectinstancenamereservationsucceeded() const;
  ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded* _internal_mutable_objectinstancenamereservationsucceeded();
  public:
  void unsafe_arena_set_allocated_objectinstancenamereservationsucceeded(
      ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded* objectinstancenamereservationsucceeded);
  ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded* unsafe_arena_release_objectinstancenamereservationsucceeded();

  // .rti1516_2025.fedpro.ObjectInstanceNameReservationFailed objectInstanceNameReservationFailed = 27;
  bool has_objectinstancenamereservationfailed() const;
  private:
  bool _internal_has_objectinstancenamereservationfailed() const;
  public:
  void clear_objectinstancenamereservationfailed();
  const ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed& objectinstancenamereservationfailed() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed* release_objectinstancenamereservationfailed();
  ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed* mutable_objectinstancenamereservationfailed();
  void set_allocated_objectinstancenamereservationfailed(::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed* objectinstancenamereservationfailed);
  private:
  const ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed& _internal_objectinstancenamereservationfailed() const;
  ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed* _internal_mutable_objectinstancenamereservationfailed();
  public:
  void unsafe_arena_set_allocated_objectinstancenamereservationfailed(
      ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed* objectinstancenamereservationfailed);
  ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed* unsafe_arena_release_objectinstancenamereservationfailed();

  // .rti1516_2025.fedpro.MultipleObjectInstanceNameReservationSucceeded multipleObjectInstanceNameReservationSucceeded = 28;
  bool has_multipleobjectinstancenamereservationsucceeded() const;
  private:
  bool _internal_has_multipleobjectinstancenamereservationsucceeded() const;
  public:
  void clear_multipleobjectinstancenamereservationsucceeded();
  const ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded& multipleobjectinstancenamereservationsucceeded() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded* release_multipleobjectinstancenamereservationsucceeded();
  ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded* mutable_multipleobjectinstancenamereservationsucceeded();
  void set_allocated_multipleobjectinstancenamereservationsucceeded(::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded* multipleobjectinstancenamereservationsucceeded);
  private:
  const ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded& _internal_multipleobjectinstancenamereservationsucceeded() const;
  ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded* _internal_mutable_multipleobjectinstancenamereservationsucceeded();
  public:
  void unsafe_arena_set_allocated_multipleobjectinstancenamereservationsucceeded(
      ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded* multipleobjectinstancenamereservationsucceeded);
  ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded* unsafe_arena_release_multipleobjectinstancenamereservationsucceeded();

  // .rti1516_2025.fedpro.MultipleObjectInstanceNameReservationFailed multipleObjectInstanceNameReservationFailed = 29;
  bool has_multipleobjectinstancenamereservationfailed() const;
  private:
  bool _internal_has_multipleobjectinstancenamereservationfailed() const;
  public:
  void clear_multipleobjectinstancenamereservationfailed();
  const ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed& multipleobjectinstancenamereservationfailed() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed* release_multipleobjectinstancenamereservationfailed();
  ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed* mutable_multipleobjectinstancenamereservationfailed();
  void set_allocated_multipleobjectinstancenamereservationfailed(::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed* multipleobjectinstancenamereservationfailed);
  private:
  const ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed& _internal_multipleobjectinstancenamereservationfailed() const;
  ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed* _internal_mutable_multipleobjectinstancenamereservationfailed();
  public:
  void unsafe_arena_set_allocated_multipleobjectinstancenamereservationfailed(
      ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed* multipleobjectinstancenamereservationfailed);
  ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed* unsafe_arena_release_multipleobjectinstancenamereservationfailed();

  // .rti1516_2025.fedpro.DiscoverObjectInstance discoverObjectInstance = 30;
  bool has_discoverobjectinstance() const;
  private:
  bool _internal_has_discoverobjectinstance() const;
  public:
  void clear_discoverobjectinstance();
  const ::rti1516_2025::fedpro::DiscoverObjectInstance& discoverobjectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::DiscoverObjectInstance* release_discoverobjectinstance();
  ::rti1516_2025::fedpro::DiscoverObjectInstance* mutable_discoverobjectinstance();
  void set_allocated_discoverobjectinstance(::rti1516_2025::fedpro::DiscoverObjectInstance* discoverobjectinstance);
  private:
  const ::rti1516_2025::fedpro::DiscoverObjectInstance& _internal_discoverobjectinstance() const;
  ::rti1516_2025::fedpro::DiscoverObjectInstance* _internal_mutable_discoverobjectinstance();
  public:
  void unsafe_arena_set_allocated_discoverobjectinstance(
      ::rti1516_2025::fedpro::DiscoverObjectInstance* discoverobjectinstance);
  ::rti1516_2025::fedpro::DiscoverObjectInstance* unsafe_arena_release_discoverobjectinstance();

  // .rti1516_2025.fedpro.ReflectAttributeValues reflectAttributeValues = 31;
  bool has_reflectattributevalues() const;
  private:
  bool _internal_has_reflectattributevalues() const;
  public:
  void clear_reflectattributevalues();
  const ::rti1516_2025::fedpro::ReflectAttributeValues& reflectattributevalues() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ReflectAttributeValues* release_reflectattributevalues();
  ::rti1516_2025::fedpro::ReflectAttributeValues* mutable_reflectattributevalues();
  void set_allocated_reflectattributevalues(::rti1516_2025::fedpro::ReflectAttributeValues* reflectattributevalues);
  private:
  const ::rti1516_2025::fedpro::ReflectAttributeValues& _internal_reflectattributevalues() const;
  ::rti1516_2025::fedpro::ReflectAttributeValues* _internal_mutable_reflectattributevalues();
  public:
  void unsafe_arena_set_allocated_reflectattributevalues(
      ::rti1516_2025::fedpro::ReflectAttributeValues* reflectattributevalues);
  ::rti1516_2025::fedpro::ReflectAttributeValues* unsafe_arena_release_reflectattributevalues();

  // .rti1516_2025.fedpro.ReflectAttributeValuesWithTime reflectAttributeValuesWithTime = 32;
  bool has_reflectattributevalueswithtime() const;
  private:
  bool _internal_has_reflectattributevalueswithtime() const;
  public:
  void clear_reflectattributevalueswithtime();
  const ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime& reflectattributevalueswithtime() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime* release_reflectattributevalueswithtime();
  ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime* mutable_reflectattributevalueswithtime();
  void set_allocated_reflectattributevalueswithtime(::rti1516_2025::fedpro::ReflectAttributeValuesWithTime* reflectattributevalueswithtime);
  private:
  const ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime& _internal_reflectattributevalueswithtime() const;
  ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime* _internal_mutable_reflectattributevalueswithtime();
  public:
  void unsafe_arena_set_allocated_reflectattributevalueswithtime(
      ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime* reflectattributevalueswithtime);
  ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime* unsafe_arena_release_reflectattributevalueswithtime();

  // .rti1516_2025.fedpro.ReceiveInteraction receiveInteraction = 33;
  bool has_receiveinteraction() const;
  private:
  bool _internal_has_receiveinteraction() const;
  public:
  void clear_receiveinteraction();
  const ::rti1516_2025::fedpro::ReceiveInteraction& receiveinteraction() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ReceiveInteraction* release_receiveinteraction();
  ::rti1516_2025::fedpro::ReceiveInteraction* mutable_receiveinteraction();
  void set_allocated_receiveinteraction(::rti1516_2025::fedpro::ReceiveInteraction* receiveinteraction);
  private:
  const ::rti1516_2025::fedpro::ReceiveInteraction& _internal_receiveinteraction() const;
  ::rti1516_2025::fedpro::ReceiveInteraction* _internal_mutable_receiveinteraction();
  public:
  void unsafe_arena_set_allocated_receiveinteraction(
      ::rti1516_2025::fedpro::ReceiveInteraction* receiveinteraction);
  ::rti1516_2025::fedpro::ReceiveInteraction* unsafe_arena_release_receiveinteraction();

  // .rti1516_2025.fedpro.ReceiveInteractionWithTime receiveInteractionWithTime = 34;
  bool has_receiveinteractionwithtime() const;
  private:
  bool _internal_has_receiveinteractionwithtime() const;
  public:
  void clear_receiveinteractionwithtime();
  const ::rti1516_2025::fedpro::ReceiveInteractionWithTime& receiveinteractionwithtime() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ReceiveInteractionWithTime* release_receiveinteractionwithtime();
  ::rti1516_2025::fedpro::ReceiveInteractionWithTime* mutable_receiveinteractionwithtime();
  void set_allocated_receiveinteractionwithtime(::rti1516_2025::fedpro::ReceiveInteractionWithTime* receiveinteractionwithtime);
  private:
  const ::rti1516_2025::fedpro::ReceiveInteractionWithTime& _internal_receiveinteractionwithtime() const;
  ::rti1516_2025::fedpro::ReceiveInteractionWithTime* _internal_mutable_receiveinteractionwithtime();
  public:
  void unsafe_arena_set_allocated_receiveinteractionwithtime(
      ::rti1516_2025::fedpro::ReceiveInteractionWithTime* receiveinteractionwithtime);
  ::rti1516_2025::fedpro::ReceiveInteractionWithTime* unsafe_arena_release_receiveinteractionwithtime();

  // .rti1516_2025.fedpro.ReceiveDirectedInteraction receiveDirectedInteraction = 35;
  bool has_receivedirectedinteraction() const;
  private:
  bool _internal_has_receivedirectedinteraction() const;
  public:
  void clear_receivedirectedinteraction();
  const ::rti1516_2025::fedpro::ReceiveDirectedInteraction& receivedirectedinteraction() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ReceiveDirectedInteraction* release_receivedirectedinteraction();
  ::rti1516_2025::fedpro::ReceiveDirectedInteraction* mutable_receivedirectedinteraction();
  void set_allocated_receivedirectedinteraction(::rti1516_2025::fedpro::ReceiveDirectedInteraction* receivedirectedinteraction);
  private:
  const ::rti1516_2025::fedpro::ReceiveDirectedInteraction& _internal_receivedirectedinteraction() const;
  ::rti1516_2025::fedpro::ReceiveDirectedInteraction* _internal_mutable_receivedirectedinteraction();
  public:
  void unsafe_arena_set_allocated_receivedirectedinteraction(
      ::rti1516_2025::fedpro::ReceiveDirectedInteraction* receivedirectedinteraction);
  ::rti1516_2025::fedpro::ReceiveDirectedInteraction* unsafe_arena_release_receivedirectedinteraction();

  // .rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime receiveDirectedInteractionWithTime = 36;
  bool has_receivedirectedinteractionwithtime() const;
  private:
  bool _internal_has_receivedirectedinteractionwithtime() const;
  public:
  void clear_receivedirectedinteractionwithtime();
  const ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime& receivedirectedinteractionwithtime() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime* release_receivedirectedinteractionwithtime();
  ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime* mutable_receivedirectedinteractionwithtime();
  void set_allocated_receivedirectedinteractionwithtime(::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime* receivedirectedinteractionwithtime);
  private:
  const ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime& _internal_receivedirectedinteractionwithtime() const;
  ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime* _internal_mutable_receivedirectedinteractionwithtime();
  public:
  void unsafe_arena_set_allocated_receivedirectedinteractionwithtime(
      ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime* receivedirectedinteractionwithtime);
  ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime* unsafe_arena_release_receivedirectedinteractionwithtime();

  // .rti1516_2025.fedpro.RemoveObjectInstance removeObjectInstance = 37;
  bool has_removeobjectinstance() const;
  private:
  bool _internal_has_removeobjectinstance() const;
  public:
  void clear_removeobjectinstance();
  const ::rti1516_2025::fedpro::RemoveObjectInstance& removeobjectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::RemoveObjectInstance* release_removeobjectinstance();
  ::rti1516_2025::fedpro::RemoveObjectInstance* mutable_removeobjectinstance();
  void set_allocated_removeobjectinstance(::rti1516_2025::fedpro::RemoveObjectInstance* removeobjectinstance);
  private:
  const ::rti1516_2025::fedpro::RemoveObjectInstance& _internal_removeobjectinstance() const;
  ::rti1516_2025::fedpro::RemoveObjectInstance* _internal_mutable_removeobjectinstance();
  public:
  void unsafe_arena_set_allocated_removeobjectinstance(
      ::rti1516_2025::fedpro::RemoveObjectInstance* removeobjectinstance);
  ::rti1516_2025::fedpro::RemoveObjectInstance* unsafe_arena_release_removeobjectinstance();

  // .rti1516_2025.fedpro.RemoveObjectInstanceWithTime removeObjectInstanceWithTime = 38;
  bool has_removeobjectinstancewithtime() const;
  private:
  bool _internal_has_removeobjectinstancewithtime() const;
  public:
  void clear_removeobjectinstancewithtime();
  const ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime& removeobjectinstancewithtime() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime* release_removeobjectinstancewithtime();
  ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime* mutable_removeobjectinstancewithtime();
  void set_allocated_removeobjectinstancewithtime(::rti1516_2025::fedpro::RemoveObjectInstanceWithTime* removeobjectinstancewithtime);
  private:
  const ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime& _internal_removeobjectinstancewithtime() const;
  ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime* _internal_mutable_removeobjectinstancewithtime();
  public:
  void unsafe_arena_set_allocated_removeobjectinstancewithtime(
      ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime* removeobjectinstancewithtime);
  ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime* unsafe_arena_release_removeobjectinstancewithtime();

  // .rti1516_2025.fedpro.AttributesInScope attributesInScope = 39;
  bool has_attributesinscope() const;
  private:
  bool _internal_has_attributesinscope() const;
  public:
  void clear_attributesinscope();
  const ::rti1516_2025::fedpro::AttributesInScope& attributesinscope() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributesInScope* release_attributesinscope();
  ::rti1516_2025::fedpro::AttributesInScope* mutable_attributesinscope();
  void set_allocated_attributesinscope(::rti1516_2025::fedpro::AttributesInScope* attributesinscope);
  private:
  const ::rti1516_2025::fedpro::AttributesInScope& _internal_attributesinscope() const;
  ::rti1516_2025::fedpro::AttributesInScope* _internal_mutable_attributesinscope();
  public:
  void unsafe_arena_set_allocated_attributesinscope(
      ::rti1516_2025::fedpro::AttributesInScope* attributesinscope);
  ::rti1516_2025::fedpro::AttributesInScope* unsafe_arena_release_attributesinscope();

  // .rti1516_2025.fedpro.AttributesOutOfScope attributesOutOfScope = 40;
  bool has_attributesoutofscope() const;
  private:
  bool _internal_has_attributesoutofscope() const;
  public:
  void clear_attributesoutofscope();
  const ::rti1516_2025::fedpro::AttributesOutOfScope& attributesoutofscope() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributesOutOfScope* release_attributesoutofscope();
  ::rti1516_2025::fedpro::AttributesOutOfScope* mutable_attributesoutofscope();
  void set_allocated_attributesoutofscope(::rti1516_2025::fedpro::AttributesOutOfScope* attributesoutofscope);
  private:
  const ::rti1516_2025::fedpro::AttributesOutOfScope& _internal_attributesoutofscope() const;
  ::rti1516_2025::fedpro::AttributesOutOfScope* _internal_mutable_attributesoutofscope();
  public:
  void unsafe_arena_set_allocated_attributesoutofscope(
      ::rti1516_2025::fedpro::AttributesOutOfScope* attributesoutofscope);
  ::rti1516_2025::fedpro::AttributesOutOfScope* unsafe_arena_release_attributesoutofscope();

  // .rti1516_2025.fedpro.ProvideAttributeValueUpdate provideAttributeValueUpdate = 41;
  bool has_provideattributevalueupdate() const;
  private:
  bool _internal_has_provideattributevalueupdate() const;
  public:
  void clear_provideattributevalueupdate();
  const ::rti1516_2025::fedpro::ProvideAttributeValueUpdate& provideattributevalueupdate() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ProvideAttributeValueUpdate* release_provideattributevalueupdate();
  ::rti1516_2025::fedpro::ProvideAttributeValueUpdate* mutable_provideattributevalueupdate();
  void set_allocated_provideattributevalueupdate(::rti1516_2025::fedpro::ProvideAttributeValueUpdate* provideattributevalueupdate);
  private:
  const ::rti1516_2025::fedpro::ProvideAttributeValueUpdate& _internal_provideattributevalueupdate() const;
  ::rti1516_2025::fedpro::ProvideAttributeValueUpdate* _internal_mutable_provideattributevalueupdate();
  public:
  void unsafe_arena_set_allocated_provideattributevalueupdate(
      ::rti1516_2025::fedpro::ProvideAttributeValueUpdate* provideattributevalueupdate);
  ::rti1516_2025::fedpro::ProvideAttributeValueUpdate* unsafe_arena_release_provideattributevalueupdate();

  // .rti1516_2025.fedpro.TurnUpdatesOnForObjectInstance turnUpdatesOnForObjectInstance = 42;
  bool has_turnupdatesonforobjectinstance() const;
  private:
  bool _internal_has_turnupdatesonforobjectinstance() const;
  public:
  void clear_turnupdatesonforobjectinstance();
  const ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance& turnupdatesonforobjectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance* release_turnupdatesonforobjectinstance();
  ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance* mutable_turnupdatesonforobjectinstance();
  void set_allocated_turnupdatesonforobjectinstance(::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance* turnupdatesonforobjectinstance);
  private:
  const ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance& _internal_turnupdatesonforobjectinstance() const;
  ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance* _internal_mutable_turnupdatesonforobjectinstance();
  public:
  void unsafe_arena_set_allocated_turnupdatesonforobjectinstance(
      ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance* turnupdatesonforobjectinstance);
  ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance* unsafe_arena_release_turnupdatesonforobjectinstance();

  // .rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate turnUpdatesOnForObjectInstanceWithRate = 43;
  bool has_turnupdatesonforobjectinstancewithrate() const;
  private:
  bool _internal_has_turnupdatesonforobjectinstancewithrate() const;
  public:
  void clear_turnupdatesonforobjectinstancewithrate();
  const ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate& turnupdatesonforobjectinstancewithrate() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate* release_turnupdatesonforobjectinstancewithrate();
  ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate* mutable_turnupdatesonforobjectinstancewithrate();
  void set_allocated_turnupdatesonforobjectinstancewithrate(::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate* turnupdatesonforobjectinstancewithrate);
  private:
  const ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate& _internal_turnupdatesonforobjectinstancewithrate() const;
  ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate* _internal_mutable_turnupdatesonforobjectinstancewithrate();
  public:
  void unsafe_arena_set_allocated_turnupdatesonforobjectinstancewithrate(
      ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate* turnupdatesonforobjectinstancewithrate);
  ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate* unsafe_arena_release_turnupdatesonforobjectinstancewithrate();

  // .rti1516_2025.fedpro.TurnUpdatesOffForObjectInstance turnUpdatesOffForObjectInstance = 44;
  bool has_turnupdatesoffforobjectinstance() const;
  private:
  bool _internal_has_turnupdatesoffforobjectinstance() const;
  public:
  void clear_turnupdatesoffforobjectinstance();
  const ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance& turnupdatesoffforobjectinstance() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance* release_turnupdatesoffforobjectinstance();
  ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance* mutable_turnupdatesoffforobjectinstance();
  void set_allocated_turnupdatesoffforobjectinstance(::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance* turnupdatesoffforobjectinstance);
  private:
  const ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance& _internal_turnupdatesoffforobjectinstance() const;
  ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance* _internal_mutable_turnupdatesoffforobjectinstance();
  public:
  void unsafe_arena_set_allocated_turnupdatesoffforobjectinstance(
      ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance* turnupdatesoffforobjectinstance);
  ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance* unsafe_arena_release_turnupdatesoffforobjectinstance();

  // .rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange confirmAttributeTransportationTypeChange = 45;
  bool has_confirmattributetransportationtypechange() const;
  private:
  bool _internal_has_confirmattributetransportationtypechange() const;
  public:
  void clear_confirmattributetransportationtypechange();
  const ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange& confirmattributetransportationtypechange() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange* release_confirmattributetransportationtypechange();
  ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange* mutable_confirmattributetransportationtypechange();
  void set_allocated_confirmattributetransportationtypechange(::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange* confirmattributetransportationtypechange);
  private:
  const ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange& _internal_confirmattributetransportationtypechange() const;
  ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange* _internal_mutable_confirmattributetransportationtypechange();
  public:
  void unsafe_arena_set_allocated_confirmattributetransportationtypechange(
      ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange* confirmattributetransportationtypechange);
  ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange* unsafe_arena_release_confirmattributetransportationtypechange();

  // .rti1516_2025.fedpro.ReportAttributeTransportationType reportAttributeTransportationType = 46;
  bool has_reportattributetransportationtype() const;
  private:
  bool _internal_has_reportattributetransportationtype() const;
  public:
  void clear_reportattributetransportationtype();
  const ::rti1516_2025::fedpro::ReportAttributeTransportationType& reportattributetransportationtype() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ReportAttributeTransportationType* release_reportattributetransportationtype();
  ::rti1516_2025::fedpro::ReportAttributeTransportationType* mutable_reportattributetransportationtype();
  void set_allocated_reportattributetransportationtype(::rti1516_2025::fedpro::ReportAttributeTransportationType* reportattributetransportationtype);
  private:
  const ::rti1516_2025::fedpro::ReportAttributeTransportationType& _internal_reportattributetransportationtype() const;
  ::rti1516_2025::fedpro::ReportAttributeTransportationType* _internal_mutable_reportattributetransportationtype();
  public:
  void unsafe_arena_set_allocated_reportattributetransportationtype(
      ::rti1516_2025::fedpro::ReportAttributeTransportationType* reportattributetransportationtype);
  ::rti1516_2025::fedpro::ReportAttributeTransportationType* unsafe_arena_release_reportattributetransportationtype();

  // .rti1516_2025.fedpro.ConfirmInteractionTransportationTypeChange confirmInteractionTransportationTypeChange = 47;
  bool has_confirminteractiontransportationtypechange() const;
  private:
  bool _internal_has_confirminteractiontransportationtypechange() const;
  public:
  void clear_confirminteractiontransportationtypechange();
  const ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange& confirminteractiontransportationtypechange() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange* release_confirminteractiontransportationtypechange();
  ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange* mutable_confirminteractiontransportationtypechange();
  void set_allocated_confirminteractiontransportationtypechange(::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange* confirminteractiontransportationtypechange);
  private:
  const ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange& _internal_confirminteractiontransportationtypechange() const;
  ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange* _internal_mutable_confirminteractiontransportationtypechange();
  public:
  void unsafe_arena_set_allocated_confirminteractiontransportationtypechange(
      ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange* confirminteractiontransportationtypechange);
  ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange* unsafe_arena_release_confirminteractiontransportationtypechange();

  // .rti1516_2025.fedpro.ReportInteractionTransportationType reportInteractionTransportationType = 48;
  bool has_reportinteractiontransportationtype() const;
  private:
  bool _internal_has_reportinteractiontransportationtype() const;
  public:
  void clear_reportinteractiontransportationtype();
  const ::rti1516_2025::fedpro::ReportInteractionTransportationType& reportinteractiontransportationtype() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ReportInteractionTransportationType* release_reportinteractiontransportationtype();
  ::rti1516_2025::fedpro::ReportInteractionTransportationType* mutable_reportinteractiontransportationtype();
  void set_allocated_reportinteractiontransportationtype(::rti1516_2025::fedpro::ReportInteractionTransportationType* reportinteractiontransportationtype);
  private:
  const ::rti1516_2025::fedpro::ReportInteractionTransportationType& _internal_reportinteractiontransportationtype() const;
  ::rti1516_2025::fedpro::ReportInteractionTransportationType* _internal_mutable_reportinteractiontransportationtype();
  public:
  void unsafe_arena_set_allocated_reportinteractiontransportationtype(
      ::rti1516_2025::fedpro::ReportInteractionTransportationType* reportinteractiontransportationtype);
  ::rti1516_2025::fedpro::ReportInteractionTransportationType* unsafe_arena_release_reportinteractiontransportationtype();

  // .rti1516_2025.fedpro.RequestAttributeOwnershipAssumption requestAttributeOwnershipAssumption = 49;
  bool has_requestattributeownershipassumption() const;
  private:
  bool _internal_has_requestattributeownershipassumption() const;
  public:
  void clear_requestattributeownershipassumption();
  const ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption& requestattributeownershipassumption() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption* release_requestattributeownershipassumption();
  ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption* mutable_requestattributeownershipassumption();
  void set_allocated_requestattributeownershipassumption(::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption* requestattributeownershipassumption);
  private:
  const ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption& _internal_requestattributeownershipassumption() const;
  ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption* _internal_mutable_requestattributeownershipassumption();
  public:
  void unsafe_arena_set_allocated_requestattributeownershipassumption(
      ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption* requestattributeownershipassumption);
  ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption* unsafe_arena_release_requestattributeownershipassumption();

  // .rti1516_2025.fedpro.RequestDivestitureConfirmation requestDivestitureConfirmation = 50;
  bool has_requestdivestitureconfirmation() const;
  private:
  bool _internal_has_requestdivestitureconfirmation() const;
  public:
  void clear_requestdivestitureconfirmation();
  const ::rti1516_2025::fedpro::RequestDivestitureConfirmation& requestdivestitureconfirmation() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::RequestDivestitureConfirmation* release_requestdivestitureconfirmation();
  ::rti1516_2025::fedpro::RequestDivestitureConfirmation* mutable_requestdivestitureconfirmation();
  void set_allocated_requestdivestitureconfirmation(::rti1516_2025::fedpro::RequestDivestitureConfirmation* requestdivestitureconfirmation);
  private:
  const ::rti1516_2025::fedpro::RequestDivestitureConfirmation& _internal_requestdivestitureconfirmation() const;
  ::rti1516_2025::fedpro::RequestDivestitureConfirmation* _internal_mutable_requestdivestitureconfirmation();
  public:
  void unsafe_arena_set_allocated_requestdivestitureconfirmation(
      ::rti1516_2025::fedpro::RequestDivestitureConfirmation* requestdivestitureconfirmation);
  ::rti1516_2025::fedpro::RequestDivestitureConfirmation* unsafe_arena_release_requestdivestitureconfirmation();

  // .rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification attributeOwnershipAcquisitionNotification = 51;
  bool has_attributeownershipacquisitionnotification() const;
  private:
  bool _internal_has_attributeownershipacquisitionnotification() const;
  public:
  void clear_attributeownershipacquisitionnotification();
  const ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification& attributeownershipacquisitionnotification() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification* release_attributeownershipacquisitionnotification();
  ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification* mutable_attributeownershipacquisitionnotification();
  void set_allocated_attributeownershipacquisitionnotification(::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification* attributeownershipacquisitionnotification);
  private:
  const ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification& _internal_attributeownershipacquisitionnotification() const;
  ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification* _internal_mutable_attributeownershipacquisitionnotification();
  public:
  void unsafe_arena_set_allocated_attributeownershipacquisitionnotification(
      ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification* attributeownershipacquisitionnotification);
  ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification* unsafe_arena_release_attributeownershipacquisitionnotification();

  // .rti1516_2025.fedpro.AttributeOwnershipUnavailable attributeOwnershipUnavailable = 52;
  bool has_attributeownershipunavailable() const;
  private:
  bool _internal_has_attributeownershipunavailable() const;
  public:
  void clear_attributeownershipunavailable();
  const ::rti1516_2025::fedpro::AttributeOwnershipUnavailable& attributeownershipunavailable() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeOwnershipUnavailable* release_attributeownershipunavailable();
  ::rti1516_2025::fedpro::AttributeOwnershipUnavailable* mutable_attributeownershipunavailable();
  void set_allocated_attributeownershipunavailable(::rti1516_2025::fedpro::AttributeOwnershipUnavailable* attributeownershipunavailable);
  private:
  const ::rti1516_2025::fedpro::AttributeOwnershipUnavailable& _internal_attributeownershipunavailable() const;
  ::rti1516_2025::fedpro::AttributeOwnershipUnavailable* _internal_mutable_attributeownershipunavailable();
  public:
  void unsafe_arena_set_allocated_attributeownershipunavailable(
      ::rti1516_2025::fedpro::AttributeOwnershipUnavailable* attributeownershipunavailable);
  ::rti1516_2025::fedpro::AttributeOwnershipUnavailable* unsafe_arena_release_attributeownershipunavailable();

  // .rti1516_2025.fedpro.RequestAttributeOwnershipRelease requestAttributeOwnershipRelease = 53;
  bool has_requestattributeownershiprelease() const;
  private:
  bool _internal_has_requestattributeownershiprelease() const;
  public:
  void clear_requestattributeownershiprelease();
  const ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease& requestattributeownershiprelease() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease* release_requestattributeownershiprelease();
  ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease* mutable_requestattributeownershiprelease();
  void set_allocated_requestattributeownershiprelease(::rti1516_2025::fedpro::RequestAttributeOwnershipRelease* requestattributeownershiprelease);
  private:
  const ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease& _internal_requestattributeownershiprelease() const;
  ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease* _internal_mutable_requestattributeownershiprelease();
  public:
  void unsafe_arena_set_allocated_requestattributeownershiprelease(
      ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease* requestattributeownershiprelease);
  ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease* unsafe_arena_release_requestattributeownershiprelease();

  // .rti1516_2025.fedpro.ConfirmAttributeOwnershipAcquisitionCancellation confirmAttributeOwnershipAcquisitionCancellation = 54;
  bool has_confirmattributeownershipacquisitioncancellation() const;
  private:
  bool _internal_has_confirmattributeownershipacquisitioncancellation() const;
  public:
  void clear_confirmattributeownershipacquisitioncancellation();
  const ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation& confirmattributeownershipacquisitioncancellation() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation* release_confirmattributeownershipacquisitioncancellation();
  ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation* mutable_confirmattributeownershipacquisitioncancellation();
  void set_allocated_confirmattributeownershipacquisitioncancellation(::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation* confirmattributeownershipacquisitioncancellation);
  private:
  const ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation& _internal_confirmattributeownershipacquisitioncancellation() const;
  ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation* _internal_mutable_confirmattributeownershipacquisitioncancellation();
  public:
  void unsafe_arena_set_allocated_confirmattributeownershipacquisitioncancellation(
      ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation* confirmattributeownershipacquisitioncancellation);
  ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation* unsafe_arena_release_confirmattributeownershipacquisitioncancellation();

  // .rti1516_2025.fedpro.InformAttributeOwnership informAttributeOwnership = 55;
  bool has_informattributeownership() const;
  private:
  bool _internal_has_informattributeownership() const;
  public:
  void clear_informattributeownership();
  const ::rti1516_2025::fedpro::InformAttributeOwnership& informattributeownership() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::InformAttributeOwnership* release_informattributeownership();
  ::rti1516_2025::fedpro::InformAttributeOwnership* mutable_informattributeownership();
  void set_allocated_informattributeownership(::rti1516_2025::fedpro::InformAttributeOwnership* informattributeownership);
  private:
  const ::rti1516_2025::fedpro::InformAttributeOwnership& _internal_informattributeownership() const;
  ::rti1516_2025::fedpro::InformAttributeOwnership* _internal_mutable_informattributeownership();
  public:
  void unsafe_arena_set_allocated_informattributeownership(
      ::rti1516_2025::fedpro::InformAttributeOwnership* informattributeownership);
  ::rti1516_2025::fedpro::InformAttributeOwnership* unsafe_arena_release_informattributeownership();

  // .rti1516_2025.fedpro.AttributeIsNotOwned attributeIsNotOwned = 56;
  bool has_attributeisnotowned() const;
  private:
  bool _internal_has_attributeisnotowned() const;
  public:
  void clear_attributeisnotowned();
  const ::rti1516_2025::fedpro::AttributeIsNotOwned& attributeisnotowned() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeIsNotOwned* release_attributeisnotowned();
  ::rti1516_2025::fedpro::AttributeIsNotOwned* mutable_attributeisnotowned();
  void set_allocated_attributeisnotowned(::rti1516_2025::fedpro::AttributeIsNotOwned* attributeisnotowned);
  private:
  const ::rti1516_2025::fedpro::AttributeIsNotOwned& _internal_attributeisnotowned() const;
  ::rti1516_2025::fedpro::AttributeIsNotOwned* _internal_mutable_attributeisnotowned();
  public:
  void unsafe_arena_set_allocated_attributeisnotowned(
      ::rti1516_2025::fedpro::AttributeIsNotOwned* attributeisnotowned);
  ::rti1516_2025::fedpro::AttributeIsNotOwned* unsafe_arena_release_attributeisnotowned();

  // .rti1516_2025.fedpro.AttributeIsOwnedByRTI attributeIsOwnedByRTI = 57;
  bool has_attributeisownedbyrti() const;
  private:
  bool _internal_has_attributeisownedbyrti() const;
  public:
  void clear_attributeisownedbyrti();
  const ::rti1516_2025::fedpro::AttributeIsOwnedByRTI& attributeisownedbyrti() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::AttributeIsOwnedByRTI* release_attributeisownedbyrti();
  ::rti1516_2025::fedpro::AttributeIsOwnedByRTI* mutable_attributeisownedbyrti();
  void set_allocated_attributeisownedbyrti(::rti1516_2025::fedpro::AttributeIsOwnedByRTI* attributeisownedbyrti);
  private:
  const ::rti1516_2025::fedpro::AttributeIsOwnedByRTI& _internal_attributeisownedbyrti() const;
  ::rti1516_2025::fedpro::AttributeIsOwnedByRTI* _internal_mutable_attributeisownedbyrti();
  public:
  void unsafe_arena_set_allocated_attributeisownedbyrti(
      ::rti1516_2025::fedpro::AttributeIsOwnedByRTI* attributeisownedbyrti);
  ::rti1516_2025::fedpro::AttributeIsOwnedByRTI* unsafe_arena_release_attributeisownedbyrti();

  // .rti1516_2025.fedpro.TimeRegulationEnabled timeRegulationEnabled = 58;
  bool has_timeregulationenabled() const;
  private:
  bool _internal_has_timeregulationenabled() const;
  public:
  void clear_timeregulationenabled();
  const ::rti1516_2025::fedpro::TimeRegulationEnabled& timeregulationenabled() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::TimeRegulationEnabled* release_timeregulationenabled();
  ::rti1516_2025::fedpro::TimeRegulationEnabled* mutable_timeregulationenabled();
  void set_allocated_timeregulationenabled(::rti1516_2025::fedpro::TimeRegulationEnabled* timeregulationenabled);
  private:
  const ::rti1516_2025::fedpro::TimeRegulationEnabled& _internal_timeregulationenabled() const;
  ::rti1516_2025::fedpro::TimeRegulationEnabled* _internal_mutable_timeregulationenabled();
  public:
  void unsafe_arena_set_allocated_timeregulationenabled(
      ::rti1516_2025::fedpro::TimeRegulationEnabled* timeregulationenabled);
  ::rti1516_2025::fedpro::TimeRegulationEnabled* unsafe_arena_release_timeregulationenabled();

  // .rti1516_2025.fedpro.TimeConstrainedEnabled timeConstrainedEnabled = 59;
  bool has_timeconstrainedenabled() const;
  private:
  bool _internal_has_timeconstrainedenabled() const;
  public:
  void clear_timeconstrainedenabled();
  const ::rti1516_2025::fedpro::TimeConstrainedEnabled& timeconstrainedenabled() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::TimeConstrainedEnabled* release_timeconstrainedenabled();
  ::rti1516_2025::fedpro::TimeConstrainedEnabled* mutable_timeconstrainedenabled();
  void set_allocated_timeconstrainedenabled(::rti1516_2025::fedpro::TimeConstrainedEnabled* timeconstrainedenabled);
  private:
  const ::rti1516_2025::fedpro::TimeConstrainedEnabled& _internal_timeconstrainedenabled() const;
  ::rti1516_2025::fedpro::TimeConstrainedEnabled* _internal_mutable_timeconstrainedenabled();
  public:
  void unsafe_arena_set_allocated_timeconstrainedenabled(
      ::rti1516_2025::fedpro::TimeConstrainedEnabled* timeconstrainedenabled);
  ::rti1516_2025::fedpro::TimeConstrainedEnabled* unsafe_arena_release_timeconstrainedenabled();

  // .rti1516_2025.fedpro.FlushQueueGrant flushQueueGrant = 60;
  bool has_flushqueuegrant() const;
  private:
  bool _internal_has_flushqueuegrant() const;
  public:
  void clear_flushqueuegrant();
  const ::rti1516_2025::fedpro::FlushQueueGrant& flushqueuegrant() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::FlushQueueGrant* release_flushqueuegrant();
  ::rti1516_2025::fedpro::FlushQueueGrant* mutable_flushqueuegrant();
  void set_allocated_flushqueuegrant(::rti1516_2025::fedpro::FlushQueueGrant* flushqueuegrant);
  private:
  const ::rti1516_2025::fedpro::FlushQueueGrant& _internal_flushqueuegrant() const;
  ::rti1516_2025::fedpro::FlushQueueGrant* _internal_mutable_flushqueuegrant();
  public:
  void unsafe_arena_set_allocated_flushqueuegrant(
      ::rti1516_2025::fedpro::FlushQueueGrant* flushqueuegrant);
  ::rti1516_2025::fedpro::FlushQueueGrant* unsafe_arena_release_flushqueuegrant();

  // .rti1516_2025.fedpro.TimeAdvanceGrant timeAdvanceGrant = 61;
  bool has_timeadvancegrant() const;
  private:
  bool _internal_has_timeadvancegrant() const;
  public:
  void clear_timeadvancegrant();
  const ::rti1516_2025::fedpro::TimeAdvanceGrant& timeadvancegrant() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::TimeAdvanceGrant* release_timeadvancegrant();
  ::rti1516_2025::fedpro::TimeAdvanceGrant* mutable_timeadvancegrant();
  void set_allocated_timeadvancegrant(::rti1516_2025::fedpro::TimeAdvanceGrant* timeadvancegrant);
  private:
  const ::rti1516_2025::fedpro::TimeAdvanceGrant& _internal_timeadvancegrant() const;
  ::rti1516_2025::fedpro::TimeAdvanceGrant* _internal_mutable_timeadvancegrant();
  public:
  void unsafe_arena_set_allocated_timeadvancegrant(
      ::rti1516_2025::fedpro::TimeAdvanceGrant* timeadvancegrant);
  ::rti1516_2025::fedpro::TimeAdvanceGrant* unsafe_arena_release_timeadvancegrant();

  // .rti1516_2025.fedpro.RequestRetraction requestRetraction = 62;
  bool has_requestretraction() const;
  private:
  bool _internal_has_requestretraction() const;
  public:
  void clear_requestretraction();
  const ::rti1516_2025::fedpro::RequestRetraction& requestretraction() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::RequestRetraction* release_requestretraction();
  ::rti1516_2025::fedpro::RequestRetraction* mutable_requestretraction();
  void set_allocated_requestretraction(::rti1516_2025::fedpro::RequestRetraction* requestretraction);
  private:
  const ::rti1516_2025::fedpro::RequestRetraction& _internal_requestretraction() const;
  ::rti1516_2025::fedpro::RequestRetraction* _internal_mutable_requestretraction();
  public:
  void unsafe_arena_set_allocated_requestretraction(
      ::rti1516_2025::fedpro::RequestRetraction* requestretraction);
  ::rti1516_2025::fedpro::RequestRetraction* unsafe_arena_release_requestretraction();

  void clear_callbackRequest();
  CallbackRequestCase callbackRequest_case() const;
  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.CallbackRequest)
 private:
  class _Internal;
  void set_has_connectionlost();
  void set_has_reportfederationexecutions();
  void set_has_reportfederationexecutionmembers();
  void set_has_reportfederationexecutiondoesnotexist();
  void set_has_federateresigned();
  void set_has_synchronizationpointregistrationsucceeded();
  void set_has_synchronizationpointregistrationfailed();
  void set_has_announcesynchronizationpoint();
  void set_has_federationsynchronized();
  void set_has_initiatefederatesave();
  void set_has_initiatefederatesavewithtime();
  void set_has_federationsaved();
  void set_has_federationnotsaved();
  void set_has_federationsavestatusresponse();
  void set_has_requestfederationrestoresucceeded();
  void set_has_requestfederationrestorefailed();
  void set_has_federationrestorebegun();
  void set_has_initiatefederaterestore();
  void set_has_federationrestored();
  void set_has_federationnotrestored();
  void set_has_federationrestorestatusresponse();
  void set_has_startregistrationforobjectclass();
  void set_has_stopregistrationforobjectclass();
  void set_has_turninteractionson();
  void set_has_turninteractionsoff();
  void set_has_objectinstancenamereservationsucceeded();
  void set_has_objectinstancenamereservationfailed();
  void set_has_multipleobjectinstancenamereservationsucceeded();
  void set_has_multipleobjectinstancenamereservationfailed();
  void set_has_discoverobjectinstance();
  void set_has_reflectattributevalues();
  void set_has_reflectattributevalueswithtime();
  void set_has_receiveinteraction();
  void set_has_receiveinteractionwithtime();
  void set_has_receivedirectedinteraction();
  void set_has_receivedirectedinteractionwithtime();
  void set_has_removeobjectinstance();
  void set_has_removeobjectinstancewithtime();
  void set_has_attributesinscope();
  void set_has_attributesoutofscope();
  void set_has_provideattributevalueupdate();
  void set_has_turnupdatesonforobjectinstance();
  void set_has_turnupdatesonforobjectinstancewithrate();
  void set_has_turnupdatesoffforobjectinstance();
  void set_has_confirmattributetransportationtypechange();
  void set_has_reportattributetransportationtype();
  void set_has_confirminteractiontransportationtypechange();
  void set_has_reportinteractiontransportationtype();
  void set_has_requestattributeownershipassumption();
  void set_has_requestdivestitureconfirmation();
  void set_has_attributeownershipacquisitionnotification();
  void set_has_attributeownershipunavailable();
  void set_has_requestattributeownershiprelease();
  void set_has_confirmattributeownershipacquisitioncancellation();
  void set_has_informattributeownership();
  void set_has_attributeisnotowned();
  void set_has_attributeisownedbyrti();
  void set_has_timeregulationenabled();
  void set_has_timeconstrainedenabled();
  void set_has_flushqueuegrant();
  void set_has_timeadvancegrant();
  void set_has_requestretraction();

  inline bool has_callbackRequest() const;
  inline void clear_has_callbackRequest();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union CallbackRequestUnion {
      constexpr CallbackRequestUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::rti1516_2025::fedpro::ConnectionLost* connectionlost_;
      ::rti1516_2025::fedpro::ReportFederationExecutions* reportfederationexecutions_;
      ::rti1516_2025::fedpro::ReportFederationExecutionMembers* reportfederationexecutionmembers_;
      ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist* reportfederationexecutiondoesnotexist_;
      ::rti1516_2025::fedpro::FederateResigned* federateresigned_;
      ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded* synchronizationpointregistrationsucceeded_;
      ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed* synchronizationpointregistrationfailed_;
      ::rti1516_2025::fedpro::AnnounceSynchronizationPoint* announcesynchronizationpoint_;
      ::rti1516_2025::fedpro::FederationSynchronized* federationsynchronized_;
      ::rti1516_2025::fedpro::InitiateFederateSave* initiatefederatesave_;
      ::rti1516_2025::fedpro::InitiateFederateSaveWithTime* initiatefederatesavewithtime_;
      ::rti1516_2025::fedpro::FederationSaved* federationsaved_;
      ::rti1516_2025::fedpro::FederationNotSaved* federationnotsaved_;
      ::rti1516_2025::fedpro::FederationSaveStatusResponse* federationsavestatusresponse_;
      ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded* requestfederationrestoresucceeded_;
      ::rti1516_2025::fedpro::RequestFederationRestoreFailed* requestfederationrestorefailed_;
      ::rti1516_2025::fedpro::FederationRestoreBegun* federationrestorebegun_;
      ::rti1516_2025::fedpro::InitiateFederateRestore* initiatefederaterestore_;
      ::rti1516_2025::fedpro::FederationRestored* federationrestored_;
      ::rti1516_2025::fedpro::FederationNotRestored* federationnotrestored_;
      ::rti1516_2025::fedpro::FederationRestoreStatusResponse* federationrestorestatusresponse_;
      ::rti1516_2025::fedpro::StartRegistrationForObjectClass* startregistrationforobjectclass_;
      ::rti1516_2025::fedpro::StopRegistrationForObjectClass* stopregistrationforobjectclass_;
      ::rti1516_2025::fedpro::TurnInteractionsOn* turninteractionson_;
      ::rti1516_2025::fedpro::TurnInteractionsOff* turninteractionsoff_;
      ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded* objectinstancenamereservationsucceeded_;
      ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed* objectinstancenamereservationfailed_;
      ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded* multipleobjectinstancenamereservationsucceeded_;
      ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed* multipleobjectinstancenamereservationfailed_;
      ::rti1516_2025::fedpro::DiscoverObjectInstance* discoverobjectinstance_;
      ::rti1516_2025::fedpro::ReflectAttributeValues* reflectattributevalues_;
      ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime* reflectattributevalueswithtime_;
      ::rti1516_2025::fedpro::ReceiveInteraction* receiveinteraction_;
      ::rti1516_2025::fedpro::ReceiveInteractionWithTime* receiveinteractionwithtime_;
      ::rti1516_2025::fedpro::ReceiveDirectedInteraction* receivedirectedinteraction_;
      ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime* receivedirectedinteractionwithtime_;
      ::rti1516_2025::fedpro::RemoveObjectInstance* removeobjectinstance_;
      ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime* removeobjectinstancewithtime_;
      ::rti1516_2025::fedpro::AttributesInScope* attributesinscope_;
      ::rti1516_2025::fedpro::AttributesOutOfScope* attributesoutofscope_;
      ::rti1516_2025::fedpro::ProvideAttributeValueUpdate* provideattributevalueupdate_;
      ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance* turnupdatesonforobjectinstance_;
      ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate* turnupdatesonforobjectinstancewithrate_;
      ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance* turnupdatesoffforobjectinstance_;
      ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange* confirmattributetransportationtypechange_;
      ::rti1516_2025::fedpro::ReportAttributeTransportationType* reportattributetransportationtype_;
      ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange* confirminteractiontransportationtypechange_;
      ::rti1516_2025::fedpro::ReportInteractionTransportationType* reportinteractiontransportationtype_;
      ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption* requestattributeownershipassumption_;
      ::rti1516_2025::fedpro::RequestDivestitureConfirmation* requestdivestitureconfirmation_;
      ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification* attributeownershipacquisitionnotification_;
      ::rti1516_2025::fedpro::AttributeOwnershipUnavailable* attributeownershipunavailable_;
      ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease* requestattributeownershiprelease_;
      ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation* confirmattributeownershipacquisitioncancellation_;
      ::rti1516_2025::fedpro::InformAttributeOwnership* informattributeownership_;
      ::rti1516_2025::fedpro::AttributeIsNotOwned* attributeisnotowned_;
      ::rti1516_2025::fedpro::AttributeIsOwnedByRTI* attributeisownedbyrti_;
      ::rti1516_2025::fedpro::TimeRegulationEnabled* timeregulationenabled_;
      ::rti1516_2025::fedpro::TimeConstrainedEnabled* timeconstrainedenabled_;
      ::rti1516_2025::fedpro::FlushQueueGrant* flushqueuegrant_;
      ::rti1516_2025::fedpro::TimeAdvanceGrant* timeadvancegrant_;
      ::rti1516_2025::fedpro::RequestRetraction* requestretraction_;
    } callbackRequest_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// -------------------------------------------------------------------

class CallbackResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rti1516_2025.fedpro.CallbackResponse) */ {
 public:
  inline CallbackResponse() : CallbackResponse(nullptr) {}
  ~CallbackResponse() override;
  explicit PROTOBUF_CONSTEXPR CallbackResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackResponse(const CallbackResponse& from);
  CallbackResponse(CallbackResponse&& from) noexcept
    : CallbackResponse() {
    *this = ::std::move(from);
  }

  inline CallbackResponse& operator=(const CallbackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackResponse& operator=(CallbackResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CallbackResponse& default_instance() {
    return *internal_default_instance();
  }
  enum CallbackResponseCase {
    kCallbackSucceeded = 1,
    kCallbackFailed = 2,
    CALLBACKRESPONSE_NOT_SET = 0,
  };

  static inline const CallbackResponse* internal_default_instance() {
    return reinterpret_cast<const CallbackResponse*>(
               &_CallbackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CallbackResponse& a, CallbackResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CallbackResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CallbackResponse& from) {
    CallbackResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallbackResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rti1516_2025.fedpro.CallbackResponse";
  }
  protected:
  explicit CallbackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallbackSucceededFieldNumber = 1,
    kCallbackFailedFieldNumber = 2,
  };
  // .rti1516_2025.fedpro.CallbackSucceeded callbackSucceeded = 1;
  bool has_callbacksucceeded() const;
  private:
  bool _internal_has_callbacksucceeded() const;
  public:
  void clear_callbacksucceeded();
  const ::rti1516_2025::fedpro::CallbackSucceeded& callbacksucceeded() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::CallbackSucceeded* release_callbacksucceeded();
  ::rti1516_2025::fedpro::CallbackSucceeded* mutable_callbacksucceeded();
  void set_allocated_callbacksucceeded(::rti1516_2025::fedpro::CallbackSucceeded* callbacksucceeded);
  private:
  const ::rti1516_2025::fedpro::CallbackSucceeded& _internal_callbacksucceeded() const;
  ::rti1516_2025::fedpro::CallbackSucceeded* _internal_mutable_callbacksucceeded();
  public:
  void unsafe_arena_set_allocated_callbacksucceeded(
      ::rti1516_2025::fedpro::CallbackSucceeded* callbacksucceeded);
  ::rti1516_2025::fedpro::CallbackSucceeded* unsafe_arena_release_callbacksucceeded();

  // .rti1516_2025.fedpro.ExceptionData callbackFailed = 2;
  bool has_callbackfailed() const;
  private:
  bool _internal_has_callbackfailed() const;
  public:
  void clear_callbackfailed();
  const ::rti1516_2025::fedpro::ExceptionData& callbackfailed() const;
  PROTOBUF_NODISCARD ::rti1516_2025::fedpro::ExceptionData* release_callbackfailed();
  ::rti1516_2025::fedpro::ExceptionData* mutable_callbackfailed();
  void set_allocated_callbackfailed(::rti1516_2025::fedpro::ExceptionData* callbackfailed);
  private:
  const ::rti1516_2025::fedpro::ExceptionData& _internal_callbackfailed() const;
  ::rti1516_2025::fedpro::ExceptionData* _internal_mutable_callbackfailed();
  public:
  void unsafe_arena_set_allocated_callbackfailed(
      ::rti1516_2025::fedpro::ExceptionData* callbackfailed);
  ::rti1516_2025::fedpro::ExceptionData* unsafe_arena_release_callbackfailed();

  void clear_callbackResponse();
  CallbackResponseCase callbackResponse_case() const;
  // @@protoc_insertion_point(class_scope:rti1516_2025.fedpro.CallbackResponse)
 private:
  class _Internal;
  void set_has_callbacksucceeded();
  void set_has_callbackfailed();

  inline bool has_callbackResponse() const;
  inline void clear_has_callbackResponse();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union CallbackResponseUnion {
      constexpr CallbackResponseUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::rti1516_2025::fedpro::CallbackSucceeded* callbacksucceeded_;
      ::rti1516_2025::fedpro::ExceptionData* callbackfailed_;
    } callbackResponse_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_FederateAmbassador_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectionLost

// string faultDescription = 1;
inline void ConnectionLost::clear_faultdescription() {
  _impl_.faultdescription_.ClearToEmpty();
}
inline const std::string& ConnectionLost::faultdescription() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ConnectionLost.faultDescription)
  return _internal_faultdescription();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectionLost::set_faultdescription(ArgT0&& arg0, ArgT... args) {
 
 _impl_.faultdescription_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ConnectionLost.faultDescription)
}
inline std::string* ConnectionLost::mutable_faultdescription() {
  std::string* _s = _internal_mutable_faultdescription();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ConnectionLost.faultDescription)
  return _s;
}
inline const std::string& ConnectionLost::_internal_faultdescription() const {
  return _impl_.faultdescription_.Get();
}
inline void ConnectionLost::_internal_set_faultdescription(const std::string& value) {
  
  _impl_.faultdescription_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnectionLost::_internal_mutable_faultdescription() {
  
  return _impl_.faultdescription_.Mutable(GetArenaForAllocation());
}
inline std::string* ConnectionLost::release_faultdescription() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ConnectionLost.faultDescription)
  return _impl_.faultdescription_.Release();
}
inline void ConnectionLost::set_allocated_faultdescription(std::string* faultdescription) {
  if (faultdescription != nullptr) {
    
  } else {
    
  }
  _impl_.faultdescription_.SetAllocated(faultdescription, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.faultdescription_.IsDefault()) {
    _impl_.faultdescription_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ConnectionLost.faultDescription)
}

// -------------------------------------------------------------------

// ReportFederationExecutions

// .rti1516_2025.fedpro.FederationExecutionInformationSet report = 1;
inline bool ReportFederationExecutions::_internal_has_report() const {
  return this != internal_default_instance() && _impl_.report_ != nullptr;
}
inline bool ReportFederationExecutions::has_report() const {
  return _internal_has_report();
}
inline const ::rti1516_2025::fedpro::FederationExecutionInformationSet& ReportFederationExecutions::_internal_report() const {
  const ::rti1516_2025::fedpro::FederationExecutionInformationSet* p = _impl_.report_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederationExecutionInformationSet&>(
      ::rti1516_2025::fedpro::_FederationExecutionInformationSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederationExecutionInformationSet& ReportFederationExecutions::report() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReportFederationExecutions.report)
  return _internal_report();
}
inline void ReportFederationExecutions::unsafe_arena_set_allocated_report(
    ::rti1516_2025::fedpro::FederationExecutionInformationSet* report) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.report_);
  }
  _impl_.report_ = report;
  if (report) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReportFederationExecutions.report)
}
inline ::rti1516_2025::fedpro::FederationExecutionInformationSet* ReportFederationExecutions::release_report() {
  
  ::rti1516_2025::fedpro::FederationExecutionInformationSet* temp = _impl_.report_;
  _impl_.report_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederationExecutionInformationSet* ReportFederationExecutions::unsafe_arena_release_report() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReportFederationExecutions.report)
  
  ::rti1516_2025::fedpro::FederationExecutionInformationSet* temp = _impl_.report_;
  _impl_.report_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederationExecutionInformationSet* ReportFederationExecutions::_internal_mutable_report() {
  
  if (_impl_.report_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederationExecutionInformationSet>(GetArenaForAllocation());
    _impl_.report_ = p;
  }
  return _impl_.report_;
}
inline ::rti1516_2025::fedpro::FederationExecutionInformationSet* ReportFederationExecutions::mutable_report() {
  ::rti1516_2025::fedpro::FederationExecutionInformationSet* _msg = _internal_mutable_report();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReportFederationExecutions.report)
  return _msg;
}
inline void ReportFederationExecutions::set_allocated_report(::rti1516_2025::fedpro::FederationExecutionInformationSet* report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.report_);
  }
  if (report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(report));
    if (message_arena != submessage_arena) {
      report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, report, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.report_ = report;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReportFederationExecutions.report)
}

// -------------------------------------------------------------------

// ReportFederationExecutionMembers

// string federationName = 1;
inline void ReportFederationExecutionMembers::clear_federationname() {
  _impl_.federationname_.ClearToEmpty();
}
inline const std::string& ReportFederationExecutionMembers::federationname() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReportFederationExecutionMembers.federationName)
  return _internal_federationname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReportFederationExecutionMembers::set_federationname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.federationname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ReportFederationExecutionMembers.federationName)
}
inline std::string* ReportFederationExecutionMembers::mutable_federationname() {
  std::string* _s = _internal_mutable_federationname();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReportFederationExecutionMembers.federationName)
  return _s;
}
inline const std::string& ReportFederationExecutionMembers::_internal_federationname() const {
  return _impl_.federationname_.Get();
}
inline void ReportFederationExecutionMembers::_internal_set_federationname(const std::string& value) {
  
  _impl_.federationname_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportFederationExecutionMembers::_internal_mutable_federationname() {
  
  return _impl_.federationname_.Mutable(GetArenaForAllocation());
}
inline std::string* ReportFederationExecutionMembers::release_federationname() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReportFederationExecutionMembers.federationName)
  return _impl_.federationname_.Release();
}
inline void ReportFederationExecutionMembers::set_allocated_federationname(std::string* federationname) {
  if (federationname != nullptr) {
    
  } else {
    
  }
  _impl_.federationname_.SetAllocated(federationname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.federationname_.IsDefault()) {
    _impl_.federationname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReportFederationExecutionMembers.federationName)
}

// .rti1516_2025.fedpro.FederationExecutionMemberInformationSet report = 2;
inline bool ReportFederationExecutionMembers::_internal_has_report() const {
  return this != internal_default_instance() && _impl_.report_ != nullptr;
}
inline bool ReportFederationExecutionMembers::has_report() const {
  return _internal_has_report();
}
inline const ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet& ReportFederationExecutionMembers::_internal_report() const {
  const ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet* p = _impl_.report_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet&>(
      ::rti1516_2025::fedpro::_FederationExecutionMemberInformationSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet& ReportFederationExecutionMembers::report() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReportFederationExecutionMembers.report)
  return _internal_report();
}
inline void ReportFederationExecutionMembers::unsafe_arena_set_allocated_report(
    ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet* report) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.report_);
  }
  _impl_.report_ = report;
  if (report) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReportFederationExecutionMembers.report)
}
inline ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet* ReportFederationExecutionMembers::release_report() {
  
  ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet* temp = _impl_.report_;
  _impl_.report_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet* ReportFederationExecutionMembers::unsafe_arena_release_report() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReportFederationExecutionMembers.report)
  
  ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet* temp = _impl_.report_;
  _impl_.report_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet* ReportFederationExecutionMembers::_internal_mutable_report() {
  
  if (_impl_.report_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederationExecutionMemberInformationSet>(GetArenaForAllocation());
    _impl_.report_ = p;
  }
  return _impl_.report_;
}
inline ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet* ReportFederationExecutionMembers::mutable_report() {
  ::rti1516_2025::fedpro::FederationExecutionMemberInformationSet* _msg = _internal_mutable_report();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReportFederationExecutionMembers.report)
  return _msg;
}
inline void ReportFederationExecutionMembers::set_allocated_report(::rti1516_2025::fedpro::FederationExecutionMemberInformationSet* report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.report_);
  }
  if (report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(report));
    if (message_arena != submessage_arena) {
      report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, report, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.report_ = report;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReportFederationExecutionMembers.report)
}

// -------------------------------------------------------------------

// ReportFederationExecutionDoesNotExist

// string federationName = 1;
inline void ReportFederationExecutionDoesNotExist::clear_federationname() {
  _impl_.federationname_.ClearToEmpty();
}
inline const std::string& ReportFederationExecutionDoesNotExist::federationname() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReportFederationExecutionDoesNotExist.federationName)
  return _internal_federationname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReportFederationExecutionDoesNotExist::set_federationname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.federationname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ReportFederationExecutionDoesNotExist.federationName)
}
inline std::string* ReportFederationExecutionDoesNotExist::mutable_federationname() {
  std::string* _s = _internal_mutable_federationname();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReportFederationExecutionDoesNotExist.federationName)
  return _s;
}
inline const std::string& ReportFederationExecutionDoesNotExist::_internal_federationname() const {
  return _impl_.federationname_.Get();
}
inline void ReportFederationExecutionDoesNotExist::_internal_set_federationname(const std::string& value) {
  
  _impl_.federationname_.Set(value, GetArenaForAllocation());
}
inline std::string* ReportFederationExecutionDoesNotExist::_internal_mutable_federationname() {
  
  return _impl_.federationname_.Mutable(GetArenaForAllocation());
}
inline std::string* ReportFederationExecutionDoesNotExist::release_federationname() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReportFederationExecutionDoesNotExist.federationName)
  return _impl_.federationname_.Release();
}
inline void ReportFederationExecutionDoesNotExist::set_allocated_federationname(std::string* federationname) {
  if (federationname != nullptr) {
    
  } else {
    
  }
  _impl_.federationname_.SetAllocated(federationname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.federationname_.IsDefault()) {
    _impl_.federationname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReportFederationExecutionDoesNotExist.federationName)
}

// -------------------------------------------------------------------

// FederateResigned

// string reasonForResignDescription = 1;
inline void FederateResigned::clear_reasonforresigndescription() {
  _impl_.reasonforresigndescription_.ClearToEmpty();
}
inline const std::string& FederateResigned::reasonforresigndescription() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederateResigned.reasonForResignDescription)
  return _internal_reasonforresigndescription();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FederateResigned::set_reasonforresigndescription(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reasonforresigndescription_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.FederateResigned.reasonForResignDescription)
}
inline std::string* FederateResigned::mutable_reasonforresigndescription() {
  std::string* _s = _internal_mutable_reasonforresigndescription();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FederateResigned.reasonForResignDescription)
  return _s;
}
inline const std::string& FederateResigned::_internal_reasonforresigndescription() const {
  return _impl_.reasonforresigndescription_.Get();
}
inline void FederateResigned::_internal_set_reasonforresigndescription(const std::string& value) {
  
  _impl_.reasonforresigndescription_.Set(value, GetArenaForAllocation());
}
inline std::string* FederateResigned::_internal_mutable_reasonforresigndescription() {
  
  return _impl_.reasonforresigndescription_.Mutable(GetArenaForAllocation());
}
inline std::string* FederateResigned::release_reasonforresigndescription() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FederateResigned.reasonForResignDescription)
  return _impl_.reasonforresigndescription_.Release();
}
inline void FederateResigned::set_allocated_reasonforresigndescription(std::string* reasonforresigndescription) {
  if (reasonforresigndescription != nullptr) {
    
  } else {
    
  }
  _impl_.reasonforresigndescription_.SetAllocated(reasonforresigndescription, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reasonforresigndescription_.IsDefault()) {
    _impl_.reasonforresigndescription_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FederateResigned.reasonForResignDescription)
}

// -------------------------------------------------------------------

// SynchronizationPointRegistrationSucceeded

// string synchronizationPointLabel = 1;
inline void SynchronizationPointRegistrationSucceeded::clear_synchronizationpointlabel() {
  _impl_.synchronizationpointlabel_.ClearToEmpty();
}
inline const std::string& SynchronizationPointRegistrationSucceeded::synchronizationpointlabel() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.SynchronizationPointRegistrationSucceeded.synchronizationPointLabel)
  return _internal_synchronizationpointlabel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SynchronizationPointRegistrationSucceeded::set_synchronizationpointlabel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.synchronizationpointlabel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.SynchronizationPointRegistrationSucceeded.synchronizationPointLabel)
}
inline std::string* SynchronizationPointRegistrationSucceeded::mutable_synchronizationpointlabel() {
  std::string* _s = _internal_mutable_synchronizationpointlabel();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.SynchronizationPointRegistrationSucceeded.synchronizationPointLabel)
  return _s;
}
inline const std::string& SynchronizationPointRegistrationSucceeded::_internal_synchronizationpointlabel() const {
  return _impl_.synchronizationpointlabel_.Get();
}
inline void SynchronizationPointRegistrationSucceeded::_internal_set_synchronizationpointlabel(const std::string& value) {
  
  _impl_.synchronizationpointlabel_.Set(value, GetArenaForAllocation());
}
inline std::string* SynchronizationPointRegistrationSucceeded::_internal_mutable_synchronizationpointlabel() {
  
  return _impl_.synchronizationpointlabel_.Mutable(GetArenaForAllocation());
}
inline std::string* SynchronizationPointRegistrationSucceeded::release_synchronizationpointlabel() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.SynchronizationPointRegistrationSucceeded.synchronizationPointLabel)
  return _impl_.synchronizationpointlabel_.Release();
}
inline void SynchronizationPointRegistrationSucceeded::set_allocated_synchronizationpointlabel(std::string* synchronizationpointlabel) {
  if (synchronizationpointlabel != nullptr) {
    
  } else {
    
  }
  _impl_.synchronizationpointlabel_.SetAllocated(synchronizationpointlabel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.synchronizationpointlabel_.IsDefault()) {
    _impl_.synchronizationpointlabel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.SynchronizationPointRegistrationSucceeded.synchronizationPointLabel)
}

// -------------------------------------------------------------------

// SynchronizationPointRegistrationFailed

// string synchronizationPointLabel = 1;
inline void SynchronizationPointRegistrationFailed::clear_synchronizationpointlabel() {
  _impl_.synchronizationpointlabel_.ClearToEmpty();
}
inline const std::string& SynchronizationPointRegistrationFailed::synchronizationpointlabel() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.SynchronizationPointRegistrationFailed.synchronizationPointLabel)
  return _internal_synchronizationpointlabel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SynchronizationPointRegistrationFailed::set_synchronizationpointlabel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.synchronizationpointlabel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.SynchronizationPointRegistrationFailed.synchronizationPointLabel)
}
inline std::string* SynchronizationPointRegistrationFailed::mutable_synchronizationpointlabel() {
  std::string* _s = _internal_mutable_synchronizationpointlabel();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.SynchronizationPointRegistrationFailed.synchronizationPointLabel)
  return _s;
}
inline const std::string& SynchronizationPointRegistrationFailed::_internal_synchronizationpointlabel() const {
  return _impl_.synchronizationpointlabel_.Get();
}
inline void SynchronizationPointRegistrationFailed::_internal_set_synchronizationpointlabel(const std::string& value) {
  
  _impl_.synchronizationpointlabel_.Set(value, GetArenaForAllocation());
}
inline std::string* SynchronizationPointRegistrationFailed::_internal_mutable_synchronizationpointlabel() {
  
  return _impl_.synchronizationpointlabel_.Mutable(GetArenaForAllocation());
}
inline std::string* SynchronizationPointRegistrationFailed::release_synchronizationpointlabel() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.SynchronizationPointRegistrationFailed.synchronizationPointLabel)
  return _impl_.synchronizationpointlabel_.Release();
}
inline void SynchronizationPointRegistrationFailed::set_allocated_synchronizationpointlabel(std::string* synchronizationpointlabel) {
  if (synchronizationpointlabel != nullptr) {
    
  } else {
    
  }
  _impl_.synchronizationpointlabel_.SetAllocated(synchronizationpointlabel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.synchronizationpointlabel_.IsDefault()) {
    _impl_.synchronizationpointlabel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.SynchronizationPointRegistrationFailed.synchronizationPointLabel)
}

// .rti1516_2025.fedpro.SynchronizationPointFailureReason reason = 2;
inline void SynchronizationPointRegistrationFailed::clear_reason() {
  _impl_.reason_ = 0;
}
inline ::rti1516_2025::fedpro::SynchronizationPointFailureReason SynchronizationPointRegistrationFailed::_internal_reason() const {
  return static_cast< ::rti1516_2025::fedpro::SynchronizationPointFailureReason >(_impl_.reason_);
}
inline ::rti1516_2025::fedpro::SynchronizationPointFailureReason SynchronizationPointRegistrationFailed::reason() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.SynchronizationPointRegistrationFailed.reason)
  return _internal_reason();
}
inline void SynchronizationPointRegistrationFailed::_internal_set_reason(::rti1516_2025::fedpro::SynchronizationPointFailureReason value) {
  
  _impl_.reason_ = value;
}
inline void SynchronizationPointRegistrationFailed::set_reason(::rti1516_2025::fedpro::SynchronizationPointFailureReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.SynchronizationPointRegistrationFailed.reason)
}

// -------------------------------------------------------------------

// AnnounceSynchronizationPoint

// string synchronizationPointLabel = 1;
inline void AnnounceSynchronizationPoint::clear_synchronizationpointlabel() {
  _impl_.synchronizationpointlabel_.ClearToEmpty();
}
inline const std::string& AnnounceSynchronizationPoint::synchronizationpointlabel() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AnnounceSynchronizationPoint.synchronizationPointLabel)
  return _internal_synchronizationpointlabel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnnounceSynchronizationPoint::set_synchronizationpointlabel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.synchronizationpointlabel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.AnnounceSynchronizationPoint.synchronizationPointLabel)
}
inline std::string* AnnounceSynchronizationPoint::mutable_synchronizationpointlabel() {
  std::string* _s = _internal_mutable_synchronizationpointlabel();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AnnounceSynchronizationPoint.synchronizationPointLabel)
  return _s;
}
inline const std::string& AnnounceSynchronizationPoint::_internal_synchronizationpointlabel() const {
  return _impl_.synchronizationpointlabel_.Get();
}
inline void AnnounceSynchronizationPoint::_internal_set_synchronizationpointlabel(const std::string& value) {
  
  _impl_.synchronizationpointlabel_.Set(value, GetArenaForAllocation());
}
inline std::string* AnnounceSynchronizationPoint::_internal_mutable_synchronizationpointlabel() {
  
  return _impl_.synchronizationpointlabel_.Mutable(GetArenaForAllocation());
}
inline std::string* AnnounceSynchronizationPoint::release_synchronizationpointlabel() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AnnounceSynchronizationPoint.synchronizationPointLabel)
  return _impl_.synchronizationpointlabel_.Release();
}
inline void AnnounceSynchronizationPoint::set_allocated_synchronizationpointlabel(std::string* synchronizationpointlabel) {
  if (synchronizationpointlabel != nullptr) {
    
  } else {
    
  }
  _impl_.synchronizationpointlabel_.SetAllocated(synchronizationpointlabel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.synchronizationpointlabel_.IsDefault()) {
    _impl_.synchronizationpointlabel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AnnounceSynchronizationPoint.synchronizationPointLabel)
}

// bytes userSuppliedTag = 2;
inline void AnnounceSynchronizationPoint::clear_usersuppliedtag() {
  _impl_.usersuppliedtag_.ClearToEmpty();
}
inline const std::string& AnnounceSynchronizationPoint::usersuppliedtag() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AnnounceSynchronizationPoint.userSuppliedTag)
  return _internal_usersuppliedtag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AnnounceSynchronizationPoint::set_usersuppliedtag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usersuppliedtag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.AnnounceSynchronizationPoint.userSuppliedTag)
}
inline std::string* AnnounceSynchronizationPoint::mutable_usersuppliedtag() {
  std::string* _s = _internal_mutable_usersuppliedtag();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AnnounceSynchronizationPoint.userSuppliedTag)
  return _s;
}
inline const std::string& AnnounceSynchronizationPoint::_internal_usersuppliedtag() const {
  return _impl_.usersuppliedtag_.Get();
}
inline void AnnounceSynchronizationPoint::_internal_set_usersuppliedtag(const std::string& value) {
  
  _impl_.usersuppliedtag_.Set(value, GetArenaForAllocation());
}
inline std::string* AnnounceSynchronizationPoint::_internal_mutable_usersuppliedtag() {
  
  return _impl_.usersuppliedtag_.Mutable(GetArenaForAllocation());
}
inline std::string* AnnounceSynchronizationPoint::release_usersuppliedtag() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AnnounceSynchronizationPoint.userSuppliedTag)
  return _impl_.usersuppliedtag_.Release();
}
inline void AnnounceSynchronizationPoint::set_allocated_usersuppliedtag(std::string* usersuppliedtag) {
  if (usersuppliedtag != nullptr) {
    
  } else {
    
  }
  _impl_.usersuppliedtag_.SetAllocated(usersuppliedtag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usersuppliedtag_.IsDefault()) {
    _impl_.usersuppliedtag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AnnounceSynchronizationPoint.userSuppliedTag)
}

// -------------------------------------------------------------------

// FederationSynchronized

// string synchronizationPointLabel = 1;
inline void FederationSynchronized::clear_synchronizationpointlabel() {
  _impl_.synchronizationpointlabel_.ClearToEmpty();
}
inline const std::string& FederationSynchronized::synchronizationpointlabel() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederationSynchronized.synchronizationPointLabel)
  return _internal_synchronizationpointlabel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FederationSynchronized::set_synchronizationpointlabel(ArgT0&& arg0, ArgT... args) {
 
 _impl_.synchronizationpointlabel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.FederationSynchronized.synchronizationPointLabel)
}
inline std::string* FederationSynchronized::mutable_synchronizationpointlabel() {
  std::string* _s = _internal_mutable_synchronizationpointlabel();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FederationSynchronized.synchronizationPointLabel)
  return _s;
}
inline const std::string& FederationSynchronized::_internal_synchronizationpointlabel() const {
  return _impl_.synchronizationpointlabel_.Get();
}
inline void FederationSynchronized::_internal_set_synchronizationpointlabel(const std::string& value) {
  
  _impl_.synchronizationpointlabel_.Set(value, GetArenaForAllocation());
}
inline std::string* FederationSynchronized::_internal_mutable_synchronizationpointlabel() {
  
  return _impl_.synchronizationpointlabel_.Mutable(GetArenaForAllocation());
}
inline std::string* FederationSynchronized::release_synchronizationpointlabel() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FederationSynchronized.synchronizationPointLabel)
  return _impl_.synchronizationpointlabel_.Release();
}
inline void FederationSynchronized::set_allocated_synchronizationpointlabel(std::string* synchronizationpointlabel) {
  if (synchronizationpointlabel != nullptr) {
    
  } else {
    
  }
  _impl_.synchronizationpointlabel_.SetAllocated(synchronizationpointlabel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.synchronizationpointlabel_.IsDefault()) {
    _impl_.synchronizationpointlabel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FederationSynchronized.synchronizationPointLabel)
}

// .rti1516_2025.fedpro.FederateHandleSet failedToSyncSet = 2;
inline bool FederationSynchronized::_internal_has_failedtosyncset() const {
  return this != internal_default_instance() && _impl_.failedtosyncset_ != nullptr;
}
inline bool FederationSynchronized::has_failedtosyncset() const {
  return _internal_has_failedtosyncset();
}
inline const ::rti1516_2025::fedpro::FederateHandleSet& FederationSynchronized::_internal_failedtosyncset() const {
  const ::rti1516_2025::fedpro::FederateHandleSet* p = _impl_.failedtosyncset_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandleSet&>(
      ::rti1516_2025::fedpro::_FederateHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandleSet& FederationSynchronized::failedtosyncset() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederationSynchronized.failedToSyncSet)
  return _internal_failedtosyncset();
}
inline void FederationSynchronized::unsafe_arena_set_allocated_failedtosyncset(
    ::rti1516_2025::fedpro::FederateHandleSet* failedtosyncset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.failedtosyncset_);
  }
  _impl_.failedtosyncset_ = failedtosyncset;
  if (failedtosyncset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.FederationSynchronized.failedToSyncSet)
}
inline ::rti1516_2025::fedpro::FederateHandleSet* FederationSynchronized::release_failedtosyncset() {
  
  ::rti1516_2025::fedpro::FederateHandleSet* temp = _impl_.failedtosyncset_;
  _impl_.failedtosyncset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandleSet* FederationSynchronized::unsafe_arena_release_failedtosyncset() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FederationSynchronized.failedToSyncSet)
  
  ::rti1516_2025::fedpro::FederateHandleSet* temp = _impl_.failedtosyncset_;
  _impl_.failedtosyncset_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandleSet* FederationSynchronized::_internal_mutable_failedtosyncset() {
  
  if (_impl_.failedtosyncset_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandleSet>(GetArenaForAllocation());
    _impl_.failedtosyncset_ = p;
  }
  return _impl_.failedtosyncset_;
}
inline ::rti1516_2025::fedpro::FederateHandleSet* FederationSynchronized::mutable_failedtosyncset() {
  ::rti1516_2025::fedpro::FederateHandleSet* _msg = _internal_mutable_failedtosyncset();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FederationSynchronized.failedToSyncSet)
  return _msg;
}
inline void FederationSynchronized::set_allocated_failedtosyncset(::rti1516_2025::fedpro::FederateHandleSet* failedtosyncset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.failedtosyncset_);
  }
  if (failedtosyncset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(failedtosyncset));
    if (message_arena != submessage_arena) {
      failedtosyncset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, failedtosyncset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.failedtosyncset_ = failedtosyncset;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FederationSynchronized.failedToSyncSet)
}

// -------------------------------------------------------------------

// InitiateFederateSave

// string label = 1;
inline void InitiateFederateSave::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& InitiateFederateSave::label() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.InitiateFederateSave.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitiateFederateSave::set_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.InitiateFederateSave.label)
}
inline std::string* InitiateFederateSave::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.InitiateFederateSave.label)
  return _s;
}
inline const std::string& InitiateFederateSave::_internal_label() const {
  return _impl_.label_.Get();
}
inline void InitiateFederateSave::_internal_set_label(const std::string& value) {
  
  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* InitiateFederateSave::_internal_mutable_label() {
  
  return _impl_.label_.Mutable(GetArenaForAllocation());
}
inline std::string* InitiateFederateSave::release_label() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.InitiateFederateSave.label)
  return _impl_.label_.Release();
}
inline void InitiateFederateSave::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  _impl_.label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.InitiateFederateSave.label)
}

// -------------------------------------------------------------------

// InitiateFederateSaveWithTime

// string label = 1;
inline void InitiateFederateSaveWithTime::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& InitiateFederateSaveWithTime::label() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.InitiateFederateSaveWithTime.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitiateFederateSaveWithTime::set_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.InitiateFederateSaveWithTime.label)
}
inline std::string* InitiateFederateSaveWithTime::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.InitiateFederateSaveWithTime.label)
  return _s;
}
inline const std::string& InitiateFederateSaveWithTime::_internal_label() const {
  return _impl_.label_.Get();
}
inline void InitiateFederateSaveWithTime::_internal_set_label(const std::string& value) {
  
  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* InitiateFederateSaveWithTime::_internal_mutable_label() {
  
  return _impl_.label_.Mutable(GetArenaForAllocation());
}
inline std::string* InitiateFederateSaveWithTime::release_label() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.InitiateFederateSaveWithTime.label)
  return _impl_.label_.Release();
}
inline void InitiateFederateSaveWithTime::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  _impl_.label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.InitiateFederateSaveWithTime.label)
}

// .rti1516_2025.fedpro.LogicalTime time = 2;
inline bool InitiateFederateSaveWithTime::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool InitiateFederateSaveWithTime::has_time() const {
  return _internal_has_time();
}
inline const ::rti1516_2025::fedpro::LogicalTime& InitiateFederateSaveWithTime::_internal_time() const {
  const ::rti1516_2025::fedpro::LogicalTime* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::LogicalTime&>(
      ::rti1516_2025::fedpro::_LogicalTime_default_instance_);
}
inline const ::rti1516_2025::fedpro::LogicalTime& InitiateFederateSaveWithTime::time() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.InitiateFederateSaveWithTime.time)
  return _internal_time();
}
inline void InitiateFederateSaveWithTime::unsafe_arena_set_allocated_time(
    ::rti1516_2025::fedpro::LogicalTime* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.InitiateFederateSaveWithTime.time)
}
inline ::rti1516_2025::fedpro::LogicalTime* InitiateFederateSaveWithTime::release_time() {
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* InitiateFederateSaveWithTime::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.InitiateFederateSaveWithTime.time)
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* InitiateFederateSaveWithTime::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::LogicalTime>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::rti1516_2025::fedpro::LogicalTime* InitiateFederateSaveWithTime::mutable_time() {
  ::rti1516_2025::fedpro::LogicalTime* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.InitiateFederateSaveWithTime.time)
  return _msg;
}
inline void InitiateFederateSaveWithTime::set_allocated_time(::rti1516_2025::fedpro::LogicalTime* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.InitiateFederateSaveWithTime.time)
}

// -------------------------------------------------------------------

// FederationSaved

// -------------------------------------------------------------------

// FederationNotSaved

// .rti1516_2025.fedpro.SaveFailureReason reason = 1;
inline void FederationNotSaved::clear_reason() {
  _impl_.reason_ = 0;
}
inline ::rti1516_2025::fedpro::SaveFailureReason FederationNotSaved::_internal_reason() const {
  return static_cast< ::rti1516_2025::fedpro::SaveFailureReason >(_impl_.reason_);
}
inline ::rti1516_2025::fedpro::SaveFailureReason FederationNotSaved::reason() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederationNotSaved.reason)
  return _internal_reason();
}
inline void FederationNotSaved::_internal_set_reason(::rti1516_2025::fedpro::SaveFailureReason value) {
  
  _impl_.reason_ = value;
}
inline void FederationNotSaved::set_reason(::rti1516_2025::fedpro::SaveFailureReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.FederationNotSaved.reason)
}

// -------------------------------------------------------------------

// FederationSaveStatusResponse

// .rti1516_2025.fedpro.FederateHandleSaveStatusPairArray response = 1;
inline bool FederationSaveStatusResponse::_internal_has_response() const {
  return this != internal_default_instance() && _impl_.response_ != nullptr;
}
inline bool FederationSaveStatusResponse::has_response() const {
  return _internal_has_response();
}
inline const ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray& FederationSaveStatusResponse::_internal_response() const {
  const ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray&>(
      ::rti1516_2025::fedpro::_FederateHandleSaveStatusPairArray_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray& FederationSaveStatusResponse::response() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederationSaveStatusResponse.response)
  return _internal_response();
}
inline void FederationSaveStatusResponse::unsafe_arena_set_allocated_response(
    ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.FederationSaveStatusResponse.response)
}
inline ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray* FederationSaveStatusResponse::release_response() {
  
  ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray* temp = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray* FederationSaveStatusResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FederationSaveStatusResponse.response)
  
  ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray* FederationSaveStatusResponse::_internal_mutable_response() {
  
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray>(GetArenaForAllocation());
    _impl_.response_ = p;
  }
  return _impl_.response_;
}
inline ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray* FederationSaveStatusResponse::mutable_response() {
  ::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FederationSaveStatusResponse.response)
  return _msg;
}
inline void FederationSaveStatusResponse::set_allocated_response(::rti1516_2025::fedpro::FederateHandleSaveStatusPairArray* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response));
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.response_ = response;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FederationSaveStatusResponse.response)
}

// -------------------------------------------------------------------

// RequestFederationRestoreSucceeded

// string label = 1;
inline void RequestFederationRestoreSucceeded::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& RequestFederationRestoreSucceeded::label() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RequestFederationRestoreSucceeded.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestFederationRestoreSucceeded::set_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.RequestFederationRestoreSucceeded.label)
}
inline std::string* RequestFederationRestoreSucceeded::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RequestFederationRestoreSucceeded.label)
  return _s;
}
inline const std::string& RequestFederationRestoreSucceeded::_internal_label() const {
  return _impl_.label_.Get();
}
inline void RequestFederationRestoreSucceeded::_internal_set_label(const std::string& value) {
  
  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestFederationRestoreSucceeded::_internal_mutable_label() {
  
  return _impl_.label_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestFederationRestoreSucceeded::release_label() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RequestFederationRestoreSucceeded.label)
  return _impl_.label_.Release();
}
inline void RequestFederationRestoreSucceeded::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  _impl_.label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RequestFederationRestoreSucceeded.label)
}

// -------------------------------------------------------------------

// RequestFederationRestoreFailed

// string label = 1;
inline void RequestFederationRestoreFailed::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& RequestFederationRestoreFailed::label() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RequestFederationRestoreFailed.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestFederationRestoreFailed::set_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.RequestFederationRestoreFailed.label)
}
inline std::string* RequestFederationRestoreFailed::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RequestFederationRestoreFailed.label)
  return _s;
}
inline const std::string& RequestFederationRestoreFailed::_internal_label() const {
  return _impl_.label_.Get();
}
inline void RequestFederationRestoreFailed::_internal_set_label(const std::string& value) {
  
  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestFederationRestoreFailed::_internal_mutable_label() {
  
  return _impl_.label_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestFederationRestoreFailed::release_label() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RequestFederationRestoreFailed.label)
  return _impl_.label_.Release();
}
inline void RequestFederationRestoreFailed::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  _impl_.label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RequestFederationRestoreFailed.label)
}

// -------------------------------------------------------------------

// FederationRestoreBegun

// -------------------------------------------------------------------

// InitiateFederateRestore

// string label = 1;
inline void InitiateFederateRestore::clear_label() {
  _impl_.label_.ClearToEmpty();
}
inline const std::string& InitiateFederateRestore::label() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.InitiateFederateRestore.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitiateFederateRestore::set_label(ArgT0&& arg0, ArgT... args) {
 
 _impl_.label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.InitiateFederateRestore.label)
}
inline std::string* InitiateFederateRestore::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.InitiateFederateRestore.label)
  return _s;
}
inline const std::string& InitiateFederateRestore::_internal_label() const {
  return _impl_.label_.Get();
}
inline void InitiateFederateRestore::_internal_set_label(const std::string& value) {
  
  _impl_.label_.Set(value, GetArenaForAllocation());
}
inline std::string* InitiateFederateRestore::_internal_mutable_label() {
  
  return _impl_.label_.Mutable(GetArenaForAllocation());
}
inline std::string* InitiateFederateRestore::release_label() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.InitiateFederateRestore.label)
  return _impl_.label_.Release();
}
inline void InitiateFederateRestore::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  _impl_.label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.label_.IsDefault()) {
    _impl_.label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.InitiateFederateRestore.label)
}

// string federateName = 2;
inline void InitiateFederateRestore::clear_federatename() {
  _impl_.federatename_.ClearToEmpty();
}
inline const std::string& InitiateFederateRestore::federatename() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.InitiateFederateRestore.federateName)
  return _internal_federatename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitiateFederateRestore::set_federatename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.federatename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.InitiateFederateRestore.federateName)
}
inline std::string* InitiateFederateRestore::mutable_federatename() {
  std::string* _s = _internal_mutable_federatename();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.InitiateFederateRestore.federateName)
  return _s;
}
inline const std::string& InitiateFederateRestore::_internal_federatename() const {
  return _impl_.federatename_.Get();
}
inline void InitiateFederateRestore::_internal_set_federatename(const std::string& value) {
  
  _impl_.federatename_.Set(value, GetArenaForAllocation());
}
inline std::string* InitiateFederateRestore::_internal_mutable_federatename() {
  
  return _impl_.federatename_.Mutable(GetArenaForAllocation());
}
inline std::string* InitiateFederateRestore::release_federatename() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.InitiateFederateRestore.federateName)
  return _impl_.federatename_.Release();
}
inline void InitiateFederateRestore::set_allocated_federatename(std::string* federatename) {
  if (federatename != nullptr) {
    
  } else {
    
  }
  _impl_.federatename_.SetAllocated(federatename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.federatename_.IsDefault()) {
    _impl_.federatename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.InitiateFederateRestore.federateName)
}

// .rti1516_2025.fedpro.FederateHandle postRestoreFederateHandle = 3;
inline bool InitiateFederateRestore::_internal_has_postrestorefederatehandle() const {
  return this != internal_default_instance() && _impl_.postrestorefederatehandle_ != nullptr;
}
inline bool InitiateFederateRestore::has_postrestorefederatehandle() const {
  return _internal_has_postrestorefederatehandle();
}
inline const ::rti1516_2025::fedpro::FederateHandle& InitiateFederateRestore::_internal_postrestorefederatehandle() const {
  const ::rti1516_2025::fedpro::FederateHandle* p = _impl_.postrestorefederatehandle_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandle&>(
      ::rti1516_2025::fedpro::_FederateHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandle& InitiateFederateRestore::postrestorefederatehandle() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.InitiateFederateRestore.postRestoreFederateHandle)
  return _internal_postrestorefederatehandle();
}
inline void InitiateFederateRestore::unsafe_arena_set_allocated_postrestorefederatehandle(
    ::rti1516_2025::fedpro::FederateHandle* postrestorefederatehandle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.postrestorefederatehandle_);
  }
  _impl_.postrestorefederatehandle_ = postrestorefederatehandle;
  if (postrestorefederatehandle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.InitiateFederateRestore.postRestoreFederateHandle)
}
inline ::rti1516_2025::fedpro::FederateHandle* InitiateFederateRestore::release_postrestorefederatehandle() {
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.postrestorefederatehandle_;
  _impl_.postrestorefederatehandle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* InitiateFederateRestore::unsafe_arena_release_postrestorefederatehandle() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.InitiateFederateRestore.postRestoreFederateHandle)
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.postrestorefederatehandle_;
  _impl_.postrestorefederatehandle_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* InitiateFederateRestore::_internal_mutable_postrestorefederatehandle() {
  
  if (_impl_.postrestorefederatehandle_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(GetArenaForAllocation());
    _impl_.postrestorefederatehandle_ = p;
  }
  return _impl_.postrestorefederatehandle_;
}
inline ::rti1516_2025::fedpro::FederateHandle* InitiateFederateRestore::mutable_postrestorefederatehandle() {
  ::rti1516_2025::fedpro::FederateHandle* _msg = _internal_mutable_postrestorefederatehandle();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.InitiateFederateRestore.postRestoreFederateHandle)
  return _msg;
}
inline void InitiateFederateRestore::set_allocated_postrestorefederatehandle(::rti1516_2025::fedpro::FederateHandle* postrestorefederatehandle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.postrestorefederatehandle_);
  }
  if (postrestorefederatehandle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(postrestorefederatehandle));
    if (message_arena != submessage_arena) {
      postrestorefederatehandle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, postrestorefederatehandle, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.postrestorefederatehandle_ = postrestorefederatehandle;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.InitiateFederateRestore.postRestoreFederateHandle)
}

// -------------------------------------------------------------------

// FederationRestored

// -------------------------------------------------------------------

// FederationNotRestored

// .rti1516_2025.fedpro.RestoreFailureReason reason = 1;
inline void FederationNotRestored::clear_reason() {
  _impl_.reason_ = 0;
}
inline ::rti1516_2025::fedpro::RestoreFailureReason FederationNotRestored::_internal_reason() const {
  return static_cast< ::rti1516_2025::fedpro::RestoreFailureReason >(_impl_.reason_);
}
inline ::rti1516_2025::fedpro::RestoreFailureReason FederationNotRestored::reason() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederationNotRestored.reason)
  return _internal_reason();
}
inline void FederationNotRestored::_internal_set_reason(::rti1516_2025::fedpro::RestoreFailureReason value) {
  
  _impl_.reason_ = value;
}
inline void FederationNotRestored::set_reason(::rti1516_2025::fedpro::RestoreFailureReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.FederationNotRestored.reason)
}

// -------------------------------------------------------------------

// FederationRestoreStatusResponse

// .rti1516_2025.fedpro.FederateRestoreStatusArray response = 1;
inline bool FederationRestoreStatusResponse::_internal_has_response() const {
  return this != internal_default_instance() && _impl_.response_ != nullptr;
}
inline bool FederationRestoreStatusResponse::has_response() const {
  return _internal_has_response();
}
inline const ::rti1516_2025::fedpro::FederateRestoreStatusArray& FederationRestoreStatusResponse::_internal_response() const {
  const ::rti1516_2025::fedpro::FederateRestoreStatusArray* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateRestoreStatusArray&>(
      ::rti1516_2025::fedpro::_FederateRestoreStatusArray_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateRestoreStatusArray& FederationRestoreStatusResponse::response() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FederationRestoreStatusResponse.response)
  return _internal_response();
}
inline void FederationRestoreStatusResponse::unsafe_arena_set_allocated_response(
    ::rti1516_2025::fedpro::FederateRestoreStatusArray* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.FederationRestoreStatusResponse.response)
}
inline ::rti1516_2025::fedpro::FederateRestoreStatusArray* FederationRestoreStatusResponse::release_response() {
  
  ::rti1516_2025::fedpro::FederateRestoreStatusArray* temp = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateRestoreStatusArray* FederationRestoreStatusResponse::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FederationRestoreStatusResponse.response)
  
  ::rti1516_2025::fedpro::FederateRestoreStatusArray* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateRestoreStatusArray* FederationRestoreStatusResponse::_internal_mutable_response() {
  
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateRestoreStatusArray>(GetArenaForAllocation());
    _impl_.response_ = p;
  }
  return _impl_.response_;
}
inline ::rti1516_2025::fedpro::FederateRestoreStatusArray* FederationRestoreStatusResponse::mutable_response() {
  ::rti1516_2025::fedpro::FederateRestoreStatusArray* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FederationRestoreStatusResponse.response)
  return _msg;
}
inline void FederationRestoreStatusResponse::set_allocated_response(::rti1516_2025::fedpro::FederateRestoreStatusArray* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response));
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.response_ = response;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FederationRestoreStatusResponse.response)
}

// -------------------------------------------------------------------

// StartRegistrationForObjectClass

// .rti1516_2025.fedpro.ObjectClassHandle objectClass = 1;
inline bool StartRegistrationForObjectClass::_internal_has_objectclass() const {
  return this != internal_default_instance() && _impl_.objectclass_ != nullptr;
}
inline bool StartRegistrationForObjectClass::has_objectclass() const {
  return _internal_has_objectclass();
}
inline const ::rti1516_2025::fedpro::ObjectClassHandle& StartRegistrationForObjectClass::_internal_objectclass() const {
  const ::rti1516_2025::fedpro::ObjectClassHandle* p = _impl_.objectclass_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectClassHandle&>(
      ::rti1516_2025::fedpro::_ObjectClassHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectClassHandle& StartRegistrationForObjectClass::objectclass() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.StartRegistrationForObjectClass.objectClass)
  return _internal_objectclass();
}
inline void StartRegistrationForObjectClass::unsafe_arena_set_allocated_objectclass(
    ::rti1516_2025::fedpro::ObjectClassHandle* objectclass) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectclass_);
  }
  _impl_.objectclass_ = objectclass;
  if (objectclass) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.StartRegistrationForObjectClass.objectClass)
}
inline ::rti1516_2025::fedpro::ObjectClassHandle* StartRegistrationForObjectClass::release_objectclass() {
  
  ::rti1516_2025::fedpro::ObjectClassHandle* temp = _impl_.objectclass_;
  _impl_.objectclass_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectClassHandle* StartRegistrationForObjectClass::unsafe_arena_release_objectclass() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.StartRegistrationForObjectClass.objectClass)
  
  ::rti1516_2025::fedpro::ObjectClassHandle* temp = _impl_.objectclass_;
  _impl_.objectclass_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectClassHandle* StartRegistrationForObjectClass::_internal_mutable_objectclass() {
  
  if (_impl_.objectclass_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectClassHandle>(GetArenaForAllocation());
    _impl_.objectclass_ = p;
  }
  return _impl_.objectclass_;
}
inline ::rti1516_2025::fedpro::ObjectClassHandle* StartRegistrationForObjectClass::mutable_objectclass() {
  ::rti1516_2025::fedpro::ObjectClassHandle* _msg = _internal_mutable_objectclass();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.StartRegistrationForObjectClass.objectClass)
  return _msg;
}
inline void StartRegistrationForObjectClass::set_allocated_objectclass(::rti1516_2025::fedpro::ObjectClassHandle* objectclass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectclass_);
  }
  if (objectclass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectclass));
    if (message_arena != submessage_arena) {
      objectclass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectclass, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectclass_ = objectclass;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.StartRegistrationForObjectClass.objectClass)
}

// -------------------------------------------------------------------

// StopRegistrationForObjectClass

// .rti1516_2025.fedpro.ObjectClassHandle objectClass = 1;
inline bool StopRegistrationForObjectClass::_internal_has_objectclass() const {
  return this != internal_default_instance() && _impl_.objectclass_ != nullptr;
}
inline bool StopRegistrationForObjectClass::has_objectclass() const {
  return _internal_has_objectclass();
}
inline const ::rti1516_2025::fedpro::ObjectClassHandle& StopRegistrationForObjectClass::_internal_objectclass() const {
  const ::rti1516_2025::fedpro::ObjectClassHandle* p = _impl_.objectclass_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectClassHandle&>(
      ::rti1516_2025::fedpro::_ObjectClassHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectClassHandle& StopRegistrationForObjectClass::objectclass() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.StopRegistrationForObjectClass.objectClass)
  return _internal_objectclass();
}
inline void StopRegistrationForObjectClass::unsafe_arena_set_allocated_objectclass(
    ::rti1516_2025::fedpro::ObjectClassHandle* objectclass) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectclass_);
  }
  _impl_.objectclass_ = objectclass;
  if (objectclass) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.StopRegistrationForObjectClass.objectClass)
}
inline ::rti1516_2025::fedpro::ObjectClassHandle* StopRegistrationForObjectClass::release_objectclass() {
  
  ::rti1516_2025::fedpro::ObjectClassHandle* temp = _impl_.objectclass_;
  _impl_.objectclass_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectClassHandle* StopRegistrationForObjectClass::unsafe_arena_release_objectclass() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.StopRegistrationForObjectClass.objectClass)
  
  ::rti1516_2025::fedpro::ObjectClassHandle* temp = _impl_.objectclass_;
  _impl_.objectclass_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectClassHandle* StopRegistrationForObjectClass::_internal_mutable_objectclass() {
  
  if (_impl_.objectclass_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectClassHandle>(GetArenaForAllocation());
    _impl_.objectclass_ = p;
  }
  return _impl_.objectclass_;
}
inline ::rti1516_2025::fedpro::ObjectClassHandle* StopRegistrationForObjectClass::mutable_objectclass() {
  ::rti1516_2025::fedpro::ObjectClassHandle* _msg = _internal_mutable_objectclass();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.StopRegistrationForObjectClass.objectClass)
  return _msg;
}
inline void StopRegistrationForObjectClass::set_allocated_objectclass(::rti1516_2025::fedpro::ObjectClassHandle* objectclass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectclass_);
  }
  if (objectclass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectclass));
    if (message_arena != submessage_arena) {
      objectclass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectclass, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectclass_ = objectclass;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.StopRegistrationForObjectClass.objectClass)
}

// -------------------------------------------------------------------

// TurnInteractionsOn

// .rti1516_2025.fedpro.InteractionClassHandle interactionClass = 1;
inline bool TurnInteractionsOn::_internal_has_interactionclass() const {
  return this != internal_default_instance() && _impl_.interactionclass_ != nullptr;
}
inline bool TurnInteractionsOn::has_interactionclass() const {
  return _internal_has_interactionclass();
}
inline const ::rti1516_2025::fedpro::InteractionClassHandle& TurnInteractionsOn::_internal_interactionclass() const {
  const ::rti1516_2025::fedpro::InteractionClassHandle* p = _impl_.interactionclass_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::InteractionClassHandle&>(
      ::rti1516_2025::fedpro::_InteractionClassHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::InteractionClassHandle& TurnInteractionsOn::interactionclass() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.TurnInteractionsOn.interactionClass)
  return _internal_interactionclass();
}
inline void TurnInteractionsOn::unsafe_arena_set_allocated_interactionclass(
    ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactionclass_);
  }
  _impl_.interactionclass_ = interactionclass;
  if (interactionclass) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.TurnInteractionsOn.interactionClass)
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* TurnInteractionsOn::release_interactionclass() {
  
  ::rti1516_2025::fedpro::InteractionClassHandle* temp = _impl_.interactionclass_;
  _impl_.interactionclass_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* TurnInteractionsOn::unsafe_arena_release_interactionclass() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.TurnInteractionsOn.interactionClass)
  
  ::rti1516_2025::fedpro::InteractionClassHandle* temp = _impl_.interactionclass_;
  _impl_.interactionclass_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* TurnInteractionsOn::_internal_mutable_interactionclass() {
  
  if (_impl_.interactionclass_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::InteractionClassHandle>(GetArenaForAllocation());
    _impl_.interactionclass_ = p;
  }
  return _impl_.interactionclass_;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* TurnInteractionsOn::mutable_interactionclass() {
  ::rti1516_2025::fedpro::InteractionClassHandle* _msg = _internal_mutable_interactionclass();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.TurnInteractionsOn.interactionClass)
  return _msg;
}
inline void TurnInteractionsOn::set_allocated_interactionclass(::rti1516_2025::fedpro::InteractionClassHandle* interactionclass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactionclass_);
  }
  if (interactionclass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interactionclass));
    if (message_arena != submessage_arena) {
      interactionclass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interactionclass, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interactionclass_ = interactionclass;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.TurnInteractionsOn.interactionClass)
}

// -------------------------------------------------------------------

// TurnInteractionsOff

// .rti1516_2025.fedpro.InteractionClassHandle interactionClass = 1;
inline bool TurnInteractionsOff::_internal_has_interactionclass() const {
  return this != internal_default_instance() && _impl_.interactionclass_ != nullptr;
}
inline bool TurnInteractionsOff::has_interactionclass() const {
  return _internal_has_interactionclass();
}
inline const ::rti1516_2025::fedpro::InteractionClassHandle& TurnInteractionsOff::_internal_interactionclass() const {
  const ::rti1516_2025::fedpro::InteractionClassHandle* p = _impl_.interactionclass_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::InteractionClassHandle&>(
      ::rti1516_2025::fedpro::_InteractionClassHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::InteractionClassHandle& TurnInteractionsOff::interactionclass() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.TurnInteractionsOff.interactionClass)
  return _internal_interactionclass();
}
inline void TurnInteractionsOff::unsafe_arena_set_allocated_interactionclass(
    ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactionclass_);
  }
  _impl_.interactionclass_ = interactionclass;
  if (interactionclass) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.TurnInteractionsOff.interactionClass)
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* TurnInteractionsOff::release_interactionclass() {
  
  ::rti1516_2025::fedpro::InteractionClassHandle* temp = _impl_.interactionclass_;
  _impl_.interactionclass_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* TurnInteractionsOff::unsafe_arena_release_interactionclass() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.TurnInteractionsOff.interactionClass)
  
  ::rti1516_2025::fedpro::InteractionClassHandle* temp = _impl_.interactionclass_;
  _impl_.interactionclass_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* TurnInteractionsOff::_internal_mutable_interactionclass() {
  
  if (_impl_.interactionclass_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::InteractionClassHandle>(GetArenaForAllocation());
    _impl_.interactionclass_ = p;
  }
  return _impl_.interactionclass_;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* TurnInteractionsOff::mutable_interactionclass() {
  ::rti1516_2025::fedpro::InteractionClassHandle* _msg = _internal_mutable_interactionclass();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.TurnInteractionsOff.interactionClass)
  return _msg;
}
inline void TurnInteractionsOff::set_allocated_interactionclass(::rti1516_2025::fedpro::InteractionClassHandle* interactionclass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactionclass_);
  }
  if (interactionclass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interactionclass));
    if (message_arena != submessage_arena) {
      interactionclass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interactionclass, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interactionclass_ = interactionclass;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.TurnInteractionsOff.interactionClass)
}

// -------------------------------------------------------------------

// ObjectInstanceNameReservationSucceeded

// string objectInstanceName = 1;
inline void ObjectInstanceNameReservationSucceeded::clear_objectinstancename() {
  _impl_.objectinstancename_.ClearToEmpty();
}
inline const std::string& ObjectInstanceNameReservationSucceeded::objectinstancename() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ObjectInstanceNameReservationSucceeded.objectInstanceName)
  return _internal_objectinstancename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectInstanceNameReservationSucceeded::set_objectinstancename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.objectinstancename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ObjectInstanceNameReservationSucceeded.objectInstanceName)
}
inline std::string* ObjectInstanceNameReservationSucceeded::mutable_objectinstancename() {
  std::string* _s = _internal_mutable_objectinstancename();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ObjectInstanceNameReservationSucceeded.objectInstanceName)
  return _s;
}
inline const std::string& ObjectInstanceNameReservationSucceeded::_internal_objectinstancename() const {
  return _impl_.objectinstancename_.Get();
}
inline void ObjectInstanceNameReservationSucceeded::_internal_set_objectinstancename(const std::string& value) {
  
  _impl_.objectinstancename_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectInstanceNameReservationSucceeded::_internal_mutable_objectinstancename() {
  
  return _impl_.objectinstancename_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectInstanceNameReservationSucceeded::release_objectinstancename() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ObjectInstanceNameReservationSucceeded.objectInstanceName)
  return _impl_.objectinstancename_.Release();
}
inline void ObjectInstanceNameReservationSucceeded::set_allocated_objectinstancename(std::string* objectinstancename) {
  if (objectinstancename != nullptr) {
    
  } else {
    
  }
  _impl_.objectinstancename_.SetAllocated(objectinstancename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.objectinstancename_.IsDefault()) {
    _impl_.objectinstancename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ObjectInstanceNameReservationSucceeded.objectInstanceName)
}

// -------------------------------------------------------------------

// ObjectInstanceNameReservationFailed

// string objectInstanceName = 1;
inline void ObjectInstanceNameReservationFailed::clear_objectinstancename() {
  _impl_.objectinstancename_.ClearToEmpty();
}
inline const std::string& ObjectInstanceNameReservationFailed::objectinstancename() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ObjectInstanceNameReservationFailed.objectInstanceName)
  return _internal_objectinstancename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectInstanceNameReservationFailed::set_objectinstancename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.objectinstancename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ObjectInstanceNameReservationFailed.objectInstanceName)
}
inline std::string* ObjectInstanceNameReservationFailed::mutable_objectinstancename() {
  std::string* _s = _internal_mutable_objectinstancename();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ObjectInstanceNameReservationFailed.objectInstanceName)
  return _s;
}
inline const std::string& ObjectInstanceNameReservationFailed::_internal_objectinstancename() const {
  return _impl_.objectinstancename_.Get();
}
inline void ObjectInstanceNameReservationFailed::_internal_set_objectinstancename(const std::string& value) {
  
  _impl_.objectinstancename_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectInstanceNameReservationFailed::_internal_mutable_objectinstancename() {
  
  return _impl_.objectinstancename_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectInstanceNameReservationFailed::release_objectinstancename() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ObjectInstanceNameReservationFailed.objectInstanceName)
  return _impl_.objectinstancename_.Release();
}
inline void ObjectInstanceNameReservationFailed::set_allocated_objectinstancename(std::string* objectinstancename) {
  if (objectinstancename != nullptr) {
    
  } else {
    
  }
  _impl_.objectinstancename_.SetAllocated(objectinstancename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.objectinstancename_.IsDefault()) {
    _impl_.objectinstancename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ObjectInstanceNameReservationFailed.objectInstanceName)
}

// -------------------------------------------------------------------

// MultipleObjectInstanceNameReservationSucceeded

// repeated string objectInstanceNames = 1;
inline int MultipleObjectInstanceNameReservationSucceeded::_internal_objectinstancenames_size() const {
  return _impl_.objectinstancenames_.size();
}
inline int MultipleObjectInstanceNameReservationSucceeded::objectinstancenames_size() const {
  return _internal_objectinstancenames_size();
}
inline void MultipleObjectInstanceNameReservationSucceeded::clear_objectinstancenames() {
  _impl_.objectinstancenames_.Clear();
}
inline std::string* MultipleObjectInstanceNameReservationSucceeded::add_objectinstancenames() {
  std::string* _s = _internal_add_objectinstancenames();
  // @@protoc_insertion_point(field_add_mutable:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationSucceeded.objectInstanceNames)
  return _s;
}
inline const std::string& MultipleObjectInstanceNameReservationSucceeded::_internal_objectinstancenames(int index) const {
  return _impl_.objectinstancenames_.Get(index);
}
inline const std::string& MultipleObjectInstanceNameReservationSucceeded::objectinstancenames(int index) const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationSucceeded.objectInstanceNames)
  return _internal_objectinstancenames(index);
}
inline std::string* MultipleObjectInstanceNameReservationSucceeded::mutable_objectinstancenames(int index) {
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationSucceeded.objectInstanceNames)
  return _impl_.objectinstancenames_.Mutable(index);
}
inline void MultipleObjectInstanceNameReservationSucceeded::set_objectinstancenames(int index, const std::string& value) {
  _impl_.objectinstancenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationSucceeded.objectInstanceNames)
}
inline void MultipleObjectInstanceNameReservationSucceeded::set_objectinstancenames(int index, std::string&& value) {
  _impl_.objectinstancenames_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationSucceeded.objectInstanceNames)
}
inline void MultipleObjectInstanceNameReservationSucceeded::set_objectinstancenames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.objectinstancenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationSucceeded.objectInstanceNames)
}
inline void MultipleObjectInstanceNameReservationSucceeded::set_objectinstancenames(int index, const char* value, size_t size) {
  _impl_.objectinstancenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationSucceeded.objectInstanceNames)
}
inline std::string* MultipleObjectInstanceNameReservationSucceeded::_internal_add_objectinstancenames() {
  return _impl_.objectinstancenames_.Add();
}
inline void MultipleObjectInstanceNameReservationSucceeded::add_objectinstancenames(const std::string& value) {
  _impl_.objectinstancenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationSucceeded.objectInstanceNames)
}
inline void MultipleObjectInstanceNameReservationSucceeded::add_objectinstancenames(std::string&& value) {
  _impl_.objectinstancenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationSucceeded.objectInstanceNames)
}
inline void MultipleObjectInstanceNameReservationSucceeded::add_objectinstancenames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.objectinstancenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationSucceeded.objectInstanceNames)
}
inline void MultipleObjectInstanceNameReservationSucceeded::add_objectinstancenames(const char* value, size_t size) {
  _impl_.objectinstancenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationSucceeded.objectInstanceNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultipleObjectInstanceNameReservationSucceeded::objectinstancenames() const {
  // @@protoc_insertion_point(field_list:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationSucceeded.objectInstanceNames)
  return _impl_.objectinstancenames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultipleObjectInstanceNameReservationSucceeded::mutable_objectinstancenames() {
  // @@protoc_insertion_point(field_mutable_list:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationSucceeded.objectInstanceNames)
  return &_impl_.objectinstancenames_;
}

// -------------------------------------------------------------------

// MultipleObjectInstanceNameReservationFailed

// repeated string objectInstanceNames = 1;
inline int MultipleObjectInstanceNameReservationFailed::_internal_objectinstancenames_size() const {
  return _impl_.objectinstancenames_.size();
}
inline int MultipleObjectInstanceNameReservationFailed::objectinstancenames_size() const {
  return _internal_objectinstancenames_size();
}
inline void MultipleObjectInstanceNameReservationFailed::clear_objectinstancenames() {
  _impl_.objectinstancenames_.Clear();
}
inline std::string* MultipleObjectInstanceNameReservationFailed::add_objectinstancenames() {
  std::string* _s = _internal_add_objectinstancenames();
  // @@protoc_insertion_point(field_add_mutable:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationFailed.objectInstanceNames)
  return _s;
}
inline const std::string& MultipleObjectInstanceNameReservationFailed::_internal_objectinstancenames(int index) const {
  return _impl_.objectinstancenames_.Get(index);
}
inline const std::string& MultipleObjectInstanceNameReservationFailed::objectinstancenames(int index) const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationFailed.objectInstanceNames)
  return _internal_objectinstancenames(index);
}
inline std::string* MultipleObjectInstanceNameReservationFailed::mutable_objectinstancenames(int index) {
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationFailed.objectInstanceNames)
  return _impl_.objectinstancenames_.Mutable(index);
}
inline void MultipleObjectInstanceNameReservationFailed::set_objectinstancenames(int index, const std::string& value) {
  _impl_.objectinstancenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationFailed.objectInstanceNames)
}
inline void MultipleObjectInstanceNameReservationFailed::set_objectinstancenames(int index, std::string&& value) {
  _impl_.objectinstancenames_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationFailed.objectInstanceNames)
}
inline void MultipleObjectInstanceNameReservationFailed::set_objectinstancenames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.objectinstancenames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationFailed.objectInstanceNames)
}
inline void MultipleObjectInstanceNameReservationFailed::set_objectinstancenames(int index, const char* value, size_t size) {
  _impl_.objectinstancenames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationFailed.objectInstanceNames)
}
inline std::string* MultipleObjectInstanceNameReservationFailed::_internal_add_objectinstancenames() {
  return _impl_.objectinstancenames_.Add();
}
inline void MultipleObjectInstanceNameReservationFailed::add_objectinstancenames(const std::string& value) {
  _impl_.objectinstancenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationFailed.objectInstanceNames)
}
inline void MultipleObjectInstanceNameReservationFailed::add_objectinstancenames(std::string&& value) {
  _impl_.objectinstancenames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationFailed.objectInstanceNames)
}
inline void MultipleObjectInstanceNameReservationFailed::add_objectinstancenames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.objectinstancenames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationFailed.objectInstanceNames)
}
inline void MultipleObjectInstanceNameReservationFailed::add_objectinstancenames(const char* value, size_t size) {
  _impl_.objectinstancenames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationFailed.objectInstanceNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MultipleObjectInstanceNameReservationFailed::objectinstancenames() const {
  // @@protoc_insertion_point(field_list:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationFailed.objectInstanceNames)
  return _impl_.objectinstancenames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MultipleObjectInstanceNameReservationFailed::mutable_objectinstancenames() {
  // @@protoc_insertion_point(field_mutable_list:rti1516_2025.fedpro.MultipleObjectInstanceNameReservationFailed.objectInstanceNames)
  return &_impl_.objectinstancenames_;
}

// -------------------------------------------------------------------

// DiscoverObjectInstance

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool DiscoverObjectInstance::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool DiscoverObjectInstance::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& DiscoverObjectInstance::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& DiscoverObjectInstance::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.DiscoverObjectInstance.objectInstance)
  return _internal_objectinstance();
}
inline void DiscoverObjectInstance::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.DiscoverObjectInstance.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* DiscoverObjectInstance::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* DiscoverObjectInstance::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.DiscoverObjectInstance.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* DiscoverObjectInstance::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* DiscoverObjectInstance::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.DiscoverObjectInstance.objectInstance)
  return _msg;
}
inline void DiscoverObjectInstance::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.DiscoverObjectInstance.objectInstance)
}

// .rti1516_2025.fedpro.ObjectClassHandle objectClass = 2;
inline bool DiscoverObjectInstance::_internal_has_objectclass() const {
  return this != internal_default_instance() && _impl_.objectclass_ != nullptr;
}
inline bool DiscoverObjectInstance::has_objectclass() const {
  return _internal_has_objectclass();
}
inline const ::rti1516_2025::fedpro::ObjectClassHandle& DiscoverObjectInstance::_internal_objectclass() const {
  const ::rti1516_2025::fedpro::ObjectClassHandle* p = _impl_.objectclass_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectClassHandle&>(
      ::rti1516_2025::fedpro::_ObjectClassHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectClassHandle& DiscoverObjectInstance::objectclass() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.DiscoverObjectInstance.objectClass)
  return _internal_objectclass();
}
inline void DiscoverObjectInstance::unsafe_arena_set_allocated_objectclass(
    ::rti1516_2025::fedpro::ObjectClassHandle* objectclass) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectclass_);
  }
  _impl_.objectclass_ = objectclass;
  if (objectclass) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.DiscoverObjectInstance.objectClass)
}
inline ::rti1516_2025::fedpro::ObjectClassHandle* DiscoverObjectInstance::release_objectclass() {
  
  ::rti1516_2025::fedpro::ObjectClassHandle* temp = _impl_.objectclass_;
  _impl_.objectclass_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectClassHandle* DiscoverObjectInstance::unsafe_arena_release_objectclass() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.DiscoverObjectInstance.objectClass)
  
  ::rti1516_2025::fedpro::ObjectClassHandle* temp = _impl_.objectclass_;
  _impl_.objectclass_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectClassHandle* DiscoverObjectInstance::_internal_mutable_objectclass() {
  
  if (_impl_.objectclass_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectClassHandle>(GetArenaForAllocation());
    _impl_.objectclass_ = p;
  }
  return _impl_.objectclass_;
}
inline ::rti1516_2025::fedpro::ObjectClassHandle* DiscoverObjectInstance::mutable_objectclass() {
  ::rti1516_2025::fedpro::ObjectClassHandle* _msg = _internal_mutable_objectclass();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.DiscoverObjectInstance.objectClass)
  return _msg;
}
inline void DiscoverObjectInstance::set_allocated_objectclass(::rti1516_2025::fedpro::ObjectClassHandle* objectclass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectclass_);
  }
  if (objectclass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectclass));
    if (message_arena != submessage_arena) {
      objectclass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectclass, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectclass_ = objectclass;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.DiscoverObjectInstance.objectClass)
}

// string objectInstanceName = 3;
inline void DiscoverObjectInstance::clear_objectinstancename() {
  _impl_.objectinstancename_.ClearToEmpty();
}
inline const std::string& DiscoverObjectInstance::objectinstancename() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.DiscoverObjectInstance.objectInstanceName)
  return _internal_objectinstancename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoverObjectInstance::set_objectinstancename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.objectinstancename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.DiscoverObjectInstance.objectInstanceName)
}
inline std::string* DiscoverObjectInstance::mutable_objectinstancename() {
  std::string* _s = _internal_mutable_objectinstancename();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.DiscoverObjectInstance.objectInstanceName)
  return _s;
}
inline const std::string& DiscoverObjectInstance::_internal_objectinstancename() const {
  return _impl_.objectinstancename_.Get();
}
inline void DiscoverObjectInstance::_internal_set_objectinstancename(const std::string& value) {
  
  _impl_.objectinstancename_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoverObjectInstance::_internal_mutable_objectinstancename() {
  
  return _impl_.objectinstancename_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoverObjectInstance::release_objectinstancename() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.DiscoverObjectInstance.objectInstanceName)
  return _impl_.objectinstancename_.Release();
}
inline void DiscoverObjectInstance::set_allocated_objectinstancename(std::string* objectinstancename) {
  if (objectinstancename != nullptr) {
    
  } else {
    
  }
  _impl_.objectinstancename_.SetAllocated(objectinstancename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.objectinstancename_.IsDefault()) {
    _impl_.objectinstancename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.DiscoverObjectInstance.objectInstanceName)
}

// .rti1516_2025.fedpro.FederateHandle producingFederate = 4;
inline bool DiscoverObjectInstance::_internal_has_producingfederate() const {
  return this != internal_default_instance() && _impl_.producingfederate_ != nullptr;
}
inline bool DiscoverObjectInstance::has_producingfederate() const {
  return _internal_has_producingfederate();
}
inline const ::rti1516_2025::fedpro::FederateHandle& DiscoverObjectInstance::_internal_producingfederate() const {
  const ::rti1516_2025::fedpro::FederateHandle* p = _impl_.producingfederate_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandle&>(
      ::rti1516_2025::fedpro::_FederateHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandle& DiscoverObjectInstance::producingfederate() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.DiscoverObjectInstance.producingFederate)
  return _internal_producingfederate();
}
inline void DiscoverObjectInstance::unsafe_arena_set_allocated_producingfederate(
    ::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  _impl_.producingfederate_ = producingfederate;
  if (producingfederate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.DiscoverObjectInstance.producingFederate)
}
inline ::rti1516_2025::fedpro::FederateHandle* DiscoverObjectInstance::release_producingfederate() {
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* DiscoverObjectInstance::unsafe_arena_release_producingfederate() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.DiscoverObjectInstance.producingFederate)
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* DiscoverObjectInstance::_internal_mutable_producingfederate() {
  
  if (_impl_.producingfederate_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(GetArenaForAllocation());
    _impl_.producingfederate_ = p;
  }
  return _impl_.producingfederate_;
}
inline ::rti1516_2025::fedpro::FederateHandle* DiscoverObjectInstance::mutable_producingfederate() {
  ::rti1516_2025::fedpro::FederateHandle* _msg = _internal_mutable_producingfederate();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.DiscoverObjectInstance.producingFederate)
  return _msg;
}
inline void DiscoverObjectInstance::set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  if (producingfederate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(producingfederate));
    if (message_arena != submessage_arena) {
      producingfederate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, producingfederate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.producingfederate_ = producingfederate;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.DiscoverObjectInstance.producingFederate)
}

// -------------------------------------------------------------------

// ReflectAttributeValues

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool ReflectAttributeValues::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool ReflectAttributeValues::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& ReflectAttributeValues::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& ReflectAttributeValues::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReflectAttributeValues.objectInstance)
  return _internal_objectinstance();
}
inline void ReflectAttributeValues::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReflectAttributeValues.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReflectAttributeValues::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReflectAttributeValues::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReflectAttributeValues.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReflectAttributeValues::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReflectAttributeValues::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReflectAttributeValues.objectInstance)
  return _msg;
}
inline void ReflectAttributeValues::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReflectAttributeValues.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandleValueMap attributeValues = 2;
inline bool ReflectAttributeValues::_internal_has_attributevalues() const {
  return this != internal_default_instance() && _impl_.attributevalues_ != nullptr;
}
inline bool ReflectAttributeValues::has_attributevalues() const {
  return _internal_has_attributevalues();
}
inline const ::rti1516_2025::fedpro::AttributeHandleValueMap& ReflectAttributeValues::_internal_attributevalues() const {
  const ::rti1516_2025::fedpro::AttributeHandleValueMap* p = _impl_.attributevalues_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleValueMap&>(
      ::rti1516_2025::fedpro::_AttributeHandleValueMap_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleValueMap& ReflectAttributeValues::attributevalues() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReflectAttributeValues.attributeValues)
  return _internal_attributevalues();
}
inline void ReflectAttributeValues::unsafe_arena_set_allocated_attributevalues(
    ::rti1516_2025::fedpro::AttributeHandleValueMap* attributevalues) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributevalues_);
  }
  _impl_.attributevalues_ = attributevalues;
  if (attributevalues) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReflectAttributeValues.attributeValues)
}
inline ::rti1516_2025::fedpro::AttributeHandleValueMap* ReflectAttributeValues::release_attributevalues() {
  
  ::rti1516_2025::fedpro::AttributeHandleValueMap* temp = _impl_.attributevalues_;
  _impl_.attributevalues_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleValueMap* ReflectAttributeValues::unsafe_arena_release_attributevalues() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReflectAttributeValues.attributeValues)
  
  ::rti1516_2025::fedpro::AttributeHandleValueMap* temp = _impl_.attributevalues_;
  _impl_.attributevalues_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleValueMap* ReflectAttributeValues::_internal_mutable_attributevalues() {
  
  if (_impl_.attributevalues_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleValueMap>(GetArenaForAllocation());
    _impl_.attributevalues_ = p;
  }
  return _impl_.attributevalues_;
}
inline ::rti1516_2025::fedpro::AttributeHandleValueMap* ReflectAttributeValues::mutable_attributevalues() {
  ::rti1516_2025::fedpro::AttributeHandleValueMap* _msg = _internal_mutable_attributevalues();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReflectAttributeValues.attributeValues)
  return _msg;
}
inline void ReflectAttributeValues::set_allocated_attributevalues(::rti1516_2025::fedpro::AttributeHandleValueMap* attributevalues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributevalues_);
  }
  if (attributevalues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributevalues));
    if (message_arena != submessage_arena) {
      attributevalues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributevalues, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributevalues_ = attributevalues;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReflectAttributeValues.attributeValues)
}

// bytes userSuppliedTag = 3;
inline void ReflectAttributeValues::clear_usersuppliedtag() {
  _impl_.usersuppliedtag_.ClearToEmpty();
}
inline const std::string& ReflectAttributeValues::usersuppliedtag() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReflectAttributeValues.userSuppliedTag)
  return _internal_usersuppliedtag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReflectAttributeValues::set_usersuppliedtag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usersuppliedtag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ReflectAttributeValues.userSuppliedTag)
}
inline std::string* ReflectAttributeValues::mutable_usersuppliedtag() {
  std::string* _s = _internal_mutable_usersuppliedtag();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReflectAttributeValues.userSuppliedTag)
  return _s;
}
inline const std::string& ReflectAttributeValues::_internal_usersuppliedtag() const {
  return _impl_.usersuppliedtag_.Get();
}
inline void ReflectAttributeValues::_internal_set_usersuppliedtag(const std::string& value) {
  
  _impl_.usersuppliedtag_.Set(value, GetArenaForAllocation());
}
inline std::string* ReflectAttributeValues::_internal_mutable_usersuppliedtag() {
  
  return _impl_.usersuppliedtag_.Mutable(GetArenaForAllocation());
}
inline std::string* ReflectAttributeValues::release_usersuppliedtag() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReflectAttributeValues.userSuppliedTag)
  return _impl_.usersuppliedtag_.Release();
}
inline void ReflectAttributeValues::set_allocated_usersuppliedtag(std::string* usersuppliedtag) {
  if (usersuppliedtag != nullptr) {
    
  } else {
    
  }
  _impl_.usersuppliedtag_.SetAllocated(usersuppliedtag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usersuppliedtag_.IsDefault()) {
    _impl_.usersuppliedtag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReflectAttributeValues.userSuppliedTag)
}

// .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 4;
inline bool ReflectAttributeValues::_internal_has_transportationtype() const {
  return this != internal_default_instance() && _impl_.transportationtype_ != nullptr;
}
inline bool ReflectAttributeValues::has_transportationtype() const {
  return _internal_has_transportationtype();
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ReflectAttributeValues::_internal_transportationtype() const {
  const ::rti1516_2025::fedpro::TransportationTypeHandle* p = _impl_.transportationtype_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::TransportationTypeHandle&>(
      ::rti1516_2025::fedpro::_TransportationTypeHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ReflectAttributeValues::transportationtype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReflectAttributeValues.transportationType)
  return _internal_transportationtype();
}
inline void ReflectAttributeValues::unsafe_arena_set_allocated_transportationtype(
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  _impl_.transportationtype_ = transportationtype;
  if (transportationtype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReflectAttributeValues.transportationType)
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReflectAttributeValues::release_transportationtype() {
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReflectAttributeValues::unsafe_arena_release_transportationtype() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReflectAttributeValues.transportationType)
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReflectAttributeValues::_internal_mutable_transportationtype() {
  
  if (_impl_.transportationtype_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::TransportationTypeHandle>(GetArenaForAllocation());
    _impl_.transportationtype_ = p;
  }
  return _impl_.transportationtype_;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReflectAttributeValues::mutable_transportationtype() {
  ::rti1516_2025::fedpro::TransportationTypeHandle* _msg = _internal_mutable_transportationtype();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReflectAttributeValues.transportationType)
  return _msg;
}
inline void ReflectAttributeValues::set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  if (transportationtype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transportationtype));
    if (message_arena != submessage_arena) {
      transportationtype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transportationtype, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transportationtype_ = transportationtype;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReflectAttributeValues.transportationType)
}

// .rti1516_2025.fedpro.FederateHandle producingFederate = 5;
inline bool ReflectAttributeValues::_internal_has_producingfederate() const {
  return this != internal_default_instance() && _impl_.producingfederate_ != nullptr;
}
inline bool ReflectAttributeValues::has_producingfederate() const {
  return _internal_has_producingfederate();
}
inline const ::rti1516_2025::fedpro::FederateHandle& ReflectAttributeValues::_internal_producingfederate() const {
  const ::rti1516_2025::fedpro::FederateHandle* p = _impl_.producingfederate_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandle&>(
      ::rti1516_2025::fedpro::_FederateHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandle& ReflectAttributeValues::producingfederate() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReflectAttributeValues.producingFederate)
  return _internal_producingfederate();
}
inline void ReflectAttributeValues::unsafe_arena_set_allocated_producingfederate(
    ::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  _impl_.producingfederate_ = producingfederate;
  if (producingfederate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReflectAttributeValues.producingFederate)
}
inline ::rti1516_2025::fedpro::FederateHandle* ReflectAttributeValues::release_producingfederate() {
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReflectAttributeValues::unsafe_arena_release_producingfederate() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReflectAttributeValues.producingFederate)
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReflectAttributeValues::_internal_mutable_producingfederate() {
  
  if (_impl_.producingfederate_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(GetArenaForAllocation());
    _impl_.producingfederate_ = p;
  }
  return _impl_.producingfederate_;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReflectAttributeValues::mutable_producingfederate() {
  ::rti1516_2025::fedpro::FederateHandle* _msg = _internal_mutable_producingfederate();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReflectAttributeValues.producingFederate)
  return _msg;
}
inline void ReflectAttributeValues::set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  if (producingfederate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(producingfederate));
    if (message_arena != submessage_arena) {
      producingfederate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, producingfederate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.producingfederate_ = producingfederate;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReflectAttributeValues.producingFederate)
}

// .rti1516_2025.fedpro.ConveyedRegionSet optionalSentRegions = 6;
inline bool ReflectAttributeValues::_internal_has_optionalsentregions() const {
  return this != internal_default_instance() && _impl_.optionalsentregions_ != nullptr;
}
inline bool ReflectAttributeValues::has_optionalsentregions() const {
  return _internal_has_optionalsentregions();
}
inline const ::rti1516_2025::fedpro::ConveyedRegionSet& ReflectAttributeValues::_internal_optionalsentregions() const {
  const ::rti1516_2025::fedpro::ConveyedRegionSet* p = _impl_.optionalsentregions_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ConveyedRegionSet&>(
      ::rti1516_2025::fedpro::_ConveyedRegionSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::ConveyedRegionSet& ReflectAttributeValues::optionalsentregions() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReflectAttributeValues.optionalSentRegions)
  return _internal_optionalsentregions();
}
inline void ReflectAttributeValues::unsafe_arena_set_allocated_optionalsentregions(
    ::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionalsentregions_);
  }
  _impl_.optionalsentregions_ = optionalsentregions;
  if (optionalsentregions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReflectAttributeValues.optionalSentRegions)
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* ReflectAttributeValues::release_optionalsentregions() {
  
  ::rti1516_2025::fedpro::ConveyedRegionSet* temp = _impl_.optionalsentregions_;
  _impl_.optionalsentregions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* ReflectAttributeValues::unsafe_arena_release_optionalsentregions() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReflectAttributeValues.optionalSentRegions)
  
  ::rti1516_2025::fedpro::ConveyedRegionSet* temp = _impl_.optionalsentregions_;
  _impl_.optionalsentregions_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* ReflectAttributeValues::_internal_mutable_optionalsentregions() {
  
  if (_impl_.optionalsentregions_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ConveyedRegionSet>(GetArenaForAllocation());
    _impl_.optionalsentregions_ = p;
  }
  return _impl_.optionalsentregions_;
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* ReflectAttributeValues::mutable_optionalsentregions() {
  ::rti1516_2025::fedpro::ConveyedRegionSet* _msg = _internal_mutable_optionalsentregions();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReflectAttributeValues.optionalSentRegions)
  return _msg;
}
inline void ReflectAttributeValues::set_allocated_optionalsentregions(::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionalsentregions_);
  }
  if (optionalsentregions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optionalsentregions));
    if (message_arena != submessage_arena) {
      optionalsentregions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionalsentregions, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.optionalsentregions_ = optionalsentregions;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReflectAttributeValues.optionalSentRegions)
}

// -------------------------------------------------------------------

// ReflectAttributeValuesWithTime

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool ReflectAttributeValuesWithTime::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool ReflectAttributeValuesWithTime::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& ReflectAttributeValuesWithTime::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& ReflectAttributeValuesWithTime::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.objectInstance)
  return _internal_objectinstance();
}
inline void ReflectAttributeValuesWithTime::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReflectAttributeValuesWithTime::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReflectAttributeValuesWithTime::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReflectAttributeValuesWithTime::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReflectAttributeValuesWithTime::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.objectInstance)
  return _msg;
}
inline void ReflectAttributeValuesWithTime::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandleValueMap attributeValues = 2;
inline bool ReflectAttributeValuesWithTime::_internal_has_attributevalues() const {
  return this != internal_default_instance() && _impl_.attributevalues_ != nullptr;
}
inline bool ReflectAttributeValuesWithTime::has_attributevalues() const {
  return _internal_has_attributevalues();
}
inline const ::rti1516_2025::fedpro::AttributeHandleValueMap& ReflectAttributeValuesWithTime::_internal_attributevalues() const {
  const ::rti1516_2025::fedpro::AttributeHandleValueMap* p = _impl_.attributevalues_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleValueMap&>(
      ::rti1516_2025::fedpro::_AttributeHandleValueMap_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleValueMap& ReflectAttributeValuesWithTime::attributevalues() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.attributeValues)
  return _internal_attributevalues();
}
inline void ReflectAttributeValuesWithTime::unsafe_arena_set_allocated_attributevalues(
    ::rti1516_2025::fedpro::AttributeHandleValueMap* attributevalues) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributevalues_);
  }
  _impl_.attributevalues_ = attributevalues;
  if (attributevalues) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.attributeValues)
}
inline ::rti1516_2025::fedpro::AttributeHandleValueMap* ReflectAttributeValuesWithTime::release_attributevalues() {
  
  ::rti1516_2025::fedpro::AttributeHandleValueMap* temp = _impl_.attributevalues_;
  _impl_.attributevalues_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleValueMap* ReflectAttributeValuesWithTime::unsafe_arena_release_attributevalues() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.attributeValues)
  
  ::rti1516_2025::fedpro::AttributeHandleValueMap* temp = _impl_.attributevalues_;
  _impl_.attributevalues_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleValueMap* ReflectAttributeValuesWithTime::_internal_mutable_attributevalues() {
  
  if (_impl_.attributevalues_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleValueMap>(GetArenaForAllocation());
    _impl_.attributevalues_ = p;
  }
  return _impl_.attributevalues_;
}
inline ::rti1516_2025::fedpro::AttributeHandleValueMap* ReflectAttributeValuesWithTime::mutable_attributevalues() {
  ::rti1516_2025::fedpro::AttributeHandleValueMap* _msg = _internal_mutable_attributevalues();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.attributeValues)
  return _msg;
}
inline void ReflectAttributeValuesWithTime::set_allocated_attributevalues(::rti1516_2025::fedpro::AttributeHandleValueMap* attributevalues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributevalues_);
  }
  if (attributevalues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributevalues));
    if (message_arena != submessage_arena) {
      attributevalues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributevalues, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributevalues_ = attributevalues;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.attributeValues)
}

// bytes userSuppliedTag = 3;
inline void ReflectAttributeValuesWithTime::clear_usersuppliedtag() {
  _impl_.usersuppliedtag_.ClearToEmpty();
}
inline const std::string& ReflectAttributeValuesWithTime::usersuppliedtag() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.userSuppliedTag)
  return _internal_usersuppliedtag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReflectAttributeValuesWithTime::set_usersuppliedtag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usersuppliedtag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.userSuppliedTag)
}
inline std::string* ReflectAttributeValuesWithTime::mutable_usersuppliedtag() {
  std::string* _s = _internal_mutable_usersuppliedtag();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.userSuppliedTag)
  return _s;
}
inline const std::string& ReflectAttributeValuesWithTime::_internal_usersuppliedtag() const {
  return _impl_.usersuppliedtag_.Get();
}
inline void ReflectAttributeValuesWithTime::_internal_set_usersuppliedtag(const std::string& value) {
  
  _impl_.usersuppliedtag_.Set(value, GetArenaForAllocation());
}
inline std::string* ReflectAttributeValuesWithTime::_internal_mutable_usersuppliedtag() {
  
  return _impl_.usersuppliedtag_.Mutable(GetArenaForAllocation());
}
inline std::string* ReflectAttributeValuesWithTime::release_usersuppliedtag() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.userSuppliedTag)
  return _impl_.usersuppliedtag_.Release();
}
inline void ReflectAttributeValuesWithTime::set_allocated_usersuppliedtag(std::string* usersuppliedtag) {
  if (usersuppliedtag != nullptr) {
    
  } else {
    
  }
  _impl_.usersuppliedtag_.SetAllocated(usersuppliedtag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usersuppliedtag_.IsDefault()) {
    _impl_.usersuppliedtag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.userSuppliedTag)
}

// .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 4;
inline bool ReflectAttributeValuesWithTime::_internal_has_transportationtype() const {
  return this != internal_default_instance() && _impl_.transportationtype_ != nullptr;
}
inline bool ReflectAttributeValuesWithTime::has_transportationtype() const {
  return _internal_has_transportationtype();
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ReflectAttributeValuesWithTime::_internal_transportationtype() const {
  const ::rti1516_2025::fedpro::TransportationTypeHandle* p = _impl_.transportationtype_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::TransportationTypeHandle&>(
      ::rti1516_2025::fedpro::_TransportationTypeHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ReflectAttributeValuesWithTime::transportationtype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.transportationType)
  return _internal_transportationtype();
}
inline void ReflectAttributeValuesWithTime::unsafe_arena_set_allocated_transportationtype(
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  _impl_.transportationtype_ = transportationtype;
  if (transportationtype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.transportationType)
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReflectAttributeValuesWithTime::release_transportationtype() {
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReflectAttributeValuesWithTime::unsafe_arena_release_transportationtype() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.transportationType)
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReflectAttributeValuesWithTime::_internal_mutable_transportationtype() {
  
  if (_impl_.transportationtype_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::TransportationTypeHandle>(GetArenaForAllocation());
    _impl_.transportationtype_ = p;
  }
  return _impl_.transportationtype_;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReflectAttributeValuesWithTime::mutable_transportationtype() {
  ::rti1516_2025::fedpro::TransportationTypeHandle* _msg = _internal_mutable_transportationtype();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.transportationType)
  return _msg;
}
inline void ReflectAttributeValuesWithTime::set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  if (transportationtype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transportationtype));
    if (message_arena != submessage_arena) {
      transportationtype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transportationtype, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transportationtype_ = transportationtype;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.transportationType)
}

// .rti1516_2025.fedpro.FederateHandle producingFederate = 5;
inline bool ReflectAttributeValuesWithTime::_internal_has_producingfederate() const {
  return this != internal_default_instance() && _impl_.producingfederate_ != nullptr;
}
inline bool ReflectAttributeValuesWithTime::has_producingfederate() const {
  return _internal_has_producingfederate();
}
inline const ::rti1516_2025::fedpro::FederateHandle& ReflectAttributeValuesWithTime::_internal_producingfederate() const {
  const ::rti1516_2025::fedpro::FederateHandle* p = _impl_.producingfederate_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandle&>(
      ::rti1516_2025::fedpro::_FederateHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandle& ReflectAttributeValuesWithTime::producingfederate() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.producingFederate)
  return _internal_producingfederate();
}
inline void ReflectAttributeValuesWithTime::unsafe_arena_set_allocated_producingfederate(
    ::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  _impl_.producingfederate_ = producingfederate;
  if (producingfederate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.producingFederate)
}
inline ::rti1516_2025::fedpro::FederateHandle* ReflectAttributeValuesWithTime::release_producingfederate() {
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReflectAttributeValuesWithTime::unsafe_arena_release_producingfederate() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.producingFederate)
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReflectAttributeValuesWithTime::_internal_mutable_producingfederate() {
  
  if (_impl_.producingfederate_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(GetArenaForAllocation());
    _impl_.producingfederate_ = p;
  }
  return _impl_.producingfederate_;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReflectAttributeValuesWithTime::mutable_producingfederate() {
  ::rti1516_2025::fedpro::FederateHandle* _msg = _internal_mutable_producingfederate();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.producingFederate)
  return _msg;
}
inline void ReflectAttributeValuesWithTime::set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  if (producingfederate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(producingfederate));
    if (message_arena != submessage_arena) {
      producingfederate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, producingfederate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.producingfederate_ = producingfederate;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.producingFederate)
}

// .rti1516_2025.fedpro.ConveyedRegionSet optionalSentRegions = 6;
inline bool ReflectAttributeValuesWithTime::_internal_has_optionalsentregions() const {
  return this != internal_default_instance() && _impl_.optionalsentregions_ != nullptr;
}
inline bool ReflectAttributeValuesWithTime::has_optionalsentregions() const {
  return _internal_has_optionalsentregions();
}
inline const ::rti1516_2025::fedpro::ConveyedRegionSet& ReflectAttributeValuesWithTime::_internal_optionalsentregions() const {
  const ::rti1516_2025::fedpro::ConveyedRegionSet* p = _impl_.optionalsentregions_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ConveyedRegionSet&>(
      ::rti1516_2025::fedpro::_ConveyedRegionSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::ConveyedRegionSet& ReflectAttributeValuesWithTime::optionalsentregions() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.optionalSentRegions)
  return _internal_optionalsentregions();
}
inline void ReflectAttributeValuesWithTime::unsafe_arena_set_allocated_optionalsentregions(
    ::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionalsentregions_);
  }
  _impl_.optionalsentregions_ = optionalsentregions;
  if (optionalsentregions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.optionalSentRegions)
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* ReflectAttributeValuesWithTime::release_optionalsentregions() {
  
  ::rti1516_2025::fedpro::ConveyedRegionSet* temp = _impl_.optionalsentregions_;
  _impl_.optionalsentregions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* ReflectAttributeValuesWithTime::unsafe_arena_release_optionalsentregions() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.optionalSentRegions)
  
  ::rti1516_2025::fedpro::ConveyedRegionSet* temp = _impl_.optionalsentregions_;
  _impl_.optionalsentregions_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* ReflectAttributeValuesWithTime::_internal_mutable_optionalsentregions() {
  
  if (_impl_.optionalsentregions_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ConveyedRegionSet>(GetArenaForAllocation());
    _impl_.optionalsentregions_ = p;
  }
  return _impl_.optionalsentregions_;
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* ReflectAttributeValuesWithTime::mutable_optionalsentregions() {
  ::rti1516_2025::fedpro::ConveyedRegionSet* _msg = _internal_mutable_optionalsentregions();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.optionalSentRegions)
  return _msg;
}
inline void ReflectAttributeValuesWithTime::set_allocated_optionalsentregions(::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionalsentregions_);
  }
  if (optionalsentregions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optionalsentregions));
    if (message_arena != submessage_arena) {
      optionalsentregions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionalsentregions, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.optionalsentregions_ = optionalsentregions;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.optionalSentRegions)
}

// .rti1516_2025.fedpro.LogicalTime time = 7;
inline bool ReflectAttributeValuesWithTime::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool ReflectAttributeValuesWithTime::has_time() const {
  return _internal_has_time();
}
inline const ::rti1516_2025::fedpro::LogicalTime& ReflectAttributeValuesWithTime::_internal_time() const {
  const ::rti1516_2025::fedpro::LogicalTime* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::LogicalTime&>(
      ::rti1516_2025::fedpro::_LogicalTime_default_instance_);
}
inline const ::rti1516_2025::fedpro::LogicalTime& ReflectAttributeValuesWithTime::time() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.time)
  return _internal_time();
}
inline void ReflectAttributeValuesWithTime::unsafe_arena_set_allocated_time(
    ::rti1516_2025::fedpro::LogicalTime* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.time)
}
inline ::rti1516_2025::fedpro::LogicalTime* ReflectAttributeValuesWithTime::release_time() {
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* ReflectAttributeValuesWithTime::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.time)
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* ReflectAttributeValuesWithTime::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::LogicalTime>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::rti1516_2025::fedpro::LogicalTime* ReflectAttributeValuesWithTime::mutable_time() {
  ::rti1516_2025::fedpro::LogicalTime* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.time)
  return _msg;
}
inline void ReflectAttributeValuesWithTime::set_allocated_time(::rti1516_2025::fedpro::LogicalTime* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.time)
}

// .rti1516_2025.fedpro.OrderType sentOrderType = 8;
inline void ReflectAttributeValuesWithTime::clear_sentordertype() {
  _impl_.sentordertype_ = 0;
}
inline ::rti1516_2025::fedpro::OrderType ReflectAttributeValuesWithTime::_internal_sentordertype() const {
  return static_cast< ::rti1516_2025::fedpro::OrderType >(_impl_.sentordertype_);
}
inline ::rti1516_2025::fedpro::OrderType ReflectAttributeValuesWithTime::sentordertype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.sentOrderType)
  return _internal_sentordertype();
}
inline void ReflectAttributeValuesWithTime::_internal_set_sentordertype(::rti1516_2025::fedpro::OrderType value) {
  
  _impl_.sentordertype_ = value;
}
inline void ReflectAttributeValuesWithTime::set_sentordertype(::rti1516_2025::fedpro::OrderType value) {
  _internal_set_sentordertype(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.sentOrderType)
}

// .rti1516_2025.fedpro.OrderType receivedOrderType = 9;
inline void ReflectAttributeValuesWithTime::clear_receivedordertype() {
  _impl_.receivedordertype_ = 0;
}
inline ::rti1516_2025::fedpro::OrderType ReflectAttributeValuesWithTime::_internal_receivedordertype() const {
  return static_cast< ::rti1516_2025::fedpro::OrderType >(_impl_.receivedordertype_);
}
inline ::rti1516_2025::fedpro::OrderType ReflectAttributeValuesWithTime::receivedordertype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.receivedOrderType)
  return _internal_receivedordertype();
}
inline void ReflectAttributeValuesWithTime::_internal_set_receivedordertype(::rti1516_2025::fedpro::OrderType value) {
  
  _impl_.receivedordertype_ = value;
}
inline void ReflectAttributeValuesWithTime::set_receivedordertype(::rti1516_2025::fedpro::OrderType value) {
  _internal_set_receivedordertype(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.receivedOrderType)
}

// .rti1516_2025.fedpro.MessageRetractionHandle optionalRetraction = 10;
inline bool ReflectAttributeValuesWithTime::_internal_has_optionalretraction() const {
  return this != internal_default_instance() && _impl_.optionalretraction_ != nullptr;
}
inline bool ReflectAttributeValuesWithTime::has_optionalretraction() const {
  return _internal_has_optionalretraction();
}
inline const ::rti1516_2025::fedpro::MessageRetractionHandle& ReflectAttributeValuesWithTime::_internal_optionalretraction() const {
  const ::rti1516_2025::fedpro::MessageRetractionHandle* p = _impl_.optionalretraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::MessageRetractionHandle&>(
      ::rti1516_2025::fedpro::_MessageRetractionHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::MessageRetractionHandle& ReflectAttributeValuesWithTime::optionalretraction() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.optionalRetraction)
  return _internal_optionalretraction();
}
inline void ReflectAttributeValuesWithTime::unsafe_arena_set_allocated_optionalretraction(
    ::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionalretraction_);
  }
  _impl_.optionalretraction_ = optionalretraction;
  if (optionalretraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.optionalRetraction)
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* ReflectAttributeValuesWithTime::release_optionalretraction() {
  
  ::rti1516_2025::fedpro::MessageRetractionHandle* temp = _impl_.optionalretraction_;
  _impl_.optionalretraction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* ReflectAttributeValuesWithTime::unsafe_arena_release_optionalretraction() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.optionalRetraction)
  
  ::rti1516_2025::fedpro::MessageRetractionHandle* temp = _impl_.optionalretraction_;
  _impl_.optionalretraction_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* ReflectAttributeValuesWithTime::_internal_mutable_optionalretraction() {
  
  if (_impl_.optionalretraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::MessageRetractionHandle>(GetArenaForAllocation());
    _impl_.optionalretraction_ = p;
  }
  return _impl_.optionalretraction_;
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* ReflectAttributeValuesWithTime::mutable_optionalretraction() {
  ::rti1516_2025::fedpro::MessageRetractionHandle* _msg = _internal_mutable_optionalretraction();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.optionalRetraction)
  return _msg;
}
inline void ReflectAttributeValuesWithTime::set_allocated_optionalretraction(::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionalretraction_);
  }
  if (optionalretraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optionalretraction));
    if (message_arena != submessage_arena) {
      optionalretraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionalretraction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.optionalretraction_ = optionalretraction;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReflectAttributeValuesWithTime.optionalRetraction)
}

// -------------------------------------------------------------------

// ReceiveInteraction

// .rti1516_2025.fedpro.InteractionClassHandle interactionClass = 1;
inline bool ReceiveInteraction::_internal_has_interactionclass() const {
  return this != internal_default_instance() && _impl_.interactionclass_ != nullptr;
}
inline bool ReceiveInteraction::has_interactionclass() const {
  return _internal_has_interactionclass();
}
inline const ::rti1516_2025::fedpro::InteractionClassHandle& ReceiveInteraction::_internal_interactionclass() const {
  const ::rti1516_2025::fedpro::InteractionClassHandle* p = _impl_.interactionclass_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::InteractionClassHandle&>(
      ::rti1516_2025::fedpro::_InteractionClassHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::InteractionClassHandle& ReceiveInteraction::interactionclass() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveInteraction.interactionClass)
  return _internal_interactionclass();
}
inline void ReceiveInteraction::unsafe_arena_set_allocated_interactionclass(
    ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactionclass_);
  }
  _impl_.interactionclass_ = interactionclass;
  if (interactionclass) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveInteraction.interactionClass)
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReceiveInteraction::release_interactionclass() {
  
  ::rti1516_2025::fedpro::InteractionClassHandle* temp = _impl_.interactionclass_;
  _impl_.interactionclass_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReceiveInteraction::unsafe_arena_release_interactionclass() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveInteraction.interactionClass)
  
  ::rti1516_2025::fedpro::InteractionClassHandle* temp = _impl_.interactionclass_;
  _impl_.interactionclass_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReceiveInteraction::_internal_mutable_interactionclass() {
  
  if (_impl_.interactionclass_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::InteractionClassHandle>(GetArenaForAllocation());
    _impl_.interactionclass_ = p;
  }
  return _impl_.interactionclass_;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReceiveInteraction::mutable_interactionclass() {
  ::rti1516_2025::fedpro::InteractionClassHandle* _msg = _internal_mutable_interactionclass();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveInteraction.interactionClass)
  return _msg;
}
inline void ReceiveInteraction::set_allocated_interactionclass(::rti1516_2025::fedpro::InteractionClassHandle* interactionclass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactionclass_);
  }
  if (interactionclass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interactionclass));
    if (message_arena != submessage_arena) {
      interactionclass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interactionclass, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interactionclass_ = interactionclass;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveInteraction.interactionClass)
}

// .rti1516_2025.fedpro.ParameterHandleValueMap parameterValues = 2;
inline bool ReceiveInteraction::_internal_has_parametervalues() const {
  return this != internal_default_instance() && _impl_.parametervalues_ != nullptr;
}
inline bool ReceiveInteraction::has_parametervalues() const {
  return _internal_has_parametervalues();
}
inline const ::rti1516_2025::fedpro::ParameterHandleValueMap& ReceiveInteraction::_internal_parametervalues() const {
  const ::rti1516_2025::fedpro::ParameterHandleValueMap* p = _impl_.parametervalues_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ParameterHandleValueMap&>(
      ::rti1516_2025::fedpro::_ParameterHandleValueMap_default_instance_);
}
inline const ::rti1516_2025::fedpro::ParameterHandleValueMap& ReceiveInteraction::parametervalues() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveInteraction.parameterValues)
  return _internal_parametervalues();
}
inline void ReceiveInteraction::unsafe_arena_set_allocated_parametervalues(
    ::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parametervalues_);
  }
  _impl_.parametervalues_ = parametervalues;
  if (parametervalues) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveInteraction.parameterValues)
}
inline ::rti1516_2025::fedpro::ParameterHandleValueMap* ReceiveInteraction::release_parametervalues() {
  
  ::rti1516_2025::fedpro::ParameterHandleValueMap* temp = _impl_.parametervalues_;
  _impl_.parametervalues_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ParameterHandleValueMap* ReceiveInteraction::unsafe_arena_release_parametervalues() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveInteraction.parameterValues)
  
  ::rti1516_2025::fedpro::ParameterHandleValueMap* temp = _impl_.parametervalues_;
  _impl_.parametervalues_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ParameterHandleValueMap* ReceiveInteraction::_internal_mutable_parametervalues() {
  
  if (_impl_.parametervalues_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ParameterHandleValueMap>(GetArenaForAllocation());
    _impl_.parametervalues_ = p;
  }
  return _impl_.parametervalues_;
}
inline ::rti1516_2025::fedpro::ParameterHandleValueMap* ReceiveInteraction::mutable_parametervalues() {
  ::rti1516_2025::fedpro::ParameterHandleValueMap* _msg = _internal_mutable_parametervalues();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveInteraction.parameterValues)
  return _msg;
}
inline void ReceiveInteraction::set_allocated_parametervalues(::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parametervalues_);
  }
  if (parametervalues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parametervalues));
    if (message_arena != submessage_arena) {
      parametervalues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parametervalues, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.parametervalues_ = parametervalues;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveInteraction.parameterValues)
}

// bytes userSuppliedTag = 3;
inline void ReceiveInteraction::clear_usersuppliedtag() {
  _impl_.usersuppliedtag_.ClearToEmpty();
}
inline const std::string& ReceiveInteraction::usersuppliedtag() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveInteraction.userSuppliedTag)
  return _internal_usersuppliedtag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReceiveInteraction::set_usersuppliedtag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usersuppliedtag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ReceiveInteraction.userSuppliedTag)
}
inline std::string* ReceiveInteraction::mutable_usersuppliedtag() {
  std::string* _s = _internal_mutable_usersuppliedtag();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveInteraction.userSuppliedTag)
  return _s;
}
inline const std::string& ReceiveInteraction::_internal_usersuppliedtag() const {
  return _impl_.usersuppliedtag_.Get();
}
inline void ReceiveInteraction::_internal_set_usersuppliedtag(const std::string& value) {
  
  _impl_.usersuppliedtag_.Set(value, GetArenaForAllocation());
}
inline std::string* ReceiveInteraction::_internal_mutable_usersuppliedtag() {
  
  return _impl_.usersuppliedtag_.Mutable(GetArenaForAllocation());
}
inline std::string* ReceiveInteraction::release_usersuppliedtag() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveInteraction.userSuppliedTag)
  return _impl_.usersuppliedtag_.Release();
}
inline void ReceiveInteraction::set_allocated_usersuppliedtag(std::string* usersuppliedtag) {
  if (usersuppliedtag != nullptr) {
    
  } else {
    
  }
  _impl_.usersuppliedtag_.SetAllocated(usersuppliedtag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usersuppliedtag_.IsDefault()) {
    _impl_.usersuppliedtag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveInteraction.userSuppliedTag)
}

// .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 4;
inline bool ReceiveInteraction::_internal_has_transportationtype() const {
  return this != internal_default_instance() && _impl_.transportationtype_ != nullptr;
}
inline bool ReceiveInteraction::has_transportationtype() const {
  return _internal_has_transportationtype();
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ReceiveInteraction::_internal_transportationtype() const {
  const ::rti1516_2025::fedpro::TransportationTypeHandle* p = _impl_.transportationtype_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::TransportationTypeHandle&>(
      ::rti1516_2025::fedpro::_TransportationTypeHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ReceiveInteraction::transportationtype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveInteraction.transportationType)
  return _internal_transportationtype();
}
inline void ReceiveInteraction::unsafe_arena_set_allocated_transportationtype(
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  _impl_.transportationtype_ = transportationtype;
  if (transportationtype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveInteraction.transportationType)
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReceiveInteraction::release_transportationtype() {
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReceiveInteraction::unsafe_arena_release_transportationtype() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveInteraction.transportationType)
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReceiveInteraction::_internal_mutable_transportationtype() {
  
  if (_impl_.transportationtype_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::TransportationTypeHandle>(GetArenaForAllocation());
    _impl_.transportationtype_ = p;
  }
  return _impl_.transportationtype_;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReceiveInteraction::mutable_transportationtype() {
  ::rti1516_2025::fedpro::TransportationTypeHandle* _msg = _internal_mutable_transportationtype();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveInteraction.transportationType)
  return _msg;
}
inline void ReceiveInteraction::set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  if (transportationtype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transportationtype));
    if (message_arena != submessage_arena) {
      transportationtype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transportationtype, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transportationtype_ = transportationtype;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveInteraction.transportationType)
}

// .rti1516_2025.fedpro.FederateHandle producingFederate = 5;
inline bool ReceiveInteraction::_internal_has_producingfederate() const {
  return this != internal_default_instance() && _impl_.producingfederate_ != nullptr;
}
inline bool ReceiveInteraction::has_producingfederate() const {
  return _internal_has_producingfederate();
}
inline const ::rti1516_2025::fedpro::FederateHandle& ReceiveInteraction::_internal_producingfederate() const {
  const ::rti1516_2025::fedpro::FederateHandle* p = _impl_.producingfederate_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandle&>(
      ::rti1516_2025::fedpro::_FederateHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandle& ReceiveInteraction::producingfederate() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveInteraction.producingFederate)
  return _internal_producingfederate();
}
inline void ReceiveInteraction::unsafe_arena_set_allocated_producingfederate(
    ::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  _impl_.producingfederate_ = producingfederate;
  if (producingfederate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveInteraction.producingFederate)
}
inline ::rti1516_2025::fedpro::FederateHandle* ReceiveInteraction::release_producingfederate() {
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReceiveInteraction::unsafe_arena_release_producingfederate() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveInteraction.producingFederate)
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReceiveInteraction::_internal_mutable_producingfederate() {
  
  if (_impl_.producingfederate_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(GetArenaForAllocation());
    _impl_.producingfederate_ = p;
  }
  return _impl_.producingfederate_;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReceiveInteraction::mutable_producingfederate() {
  ::rti1516_2025::fedpro::FederateHandle* _msg = _internal_mutable_producingfederate();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveInteraction.producingFederate)
  return _msg;
}
inline void ReceiveInteraction::set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  if (producingfederate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(producingfederate));
    if (message_arena != submessage_arena) {
      producingfederate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, producingfederate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.producingfederate_ = producingfederate;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveInteraction.producingFederate)
}

// .rti1516_2025.fedpro.ConveyedRegionSet optionalSentRegions = 6;
inline bool ReceiveInteraction::_internal_has_optionalsentregions() const {
  return this != internal_default_instance() && _impl_.optionalsentregions_ != nullptr;
}
inline bool ReceiveInteraction::has_optionalsentregions() const {
  return _internal_has_optionalsentregions();
}
inline const ::rti1516_2025::fedpro::ConveyedRegionSet& ReceiveInteraction::_internal_optionalsentregions() const {
  const ::rti1516_2025::fedpro::ConveyedRegionSet* p = _impl_.optionalsentregions_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ConveyedRegionSet&>(
      ::rti1516_2025::fedpro::_ConveyedRegionSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::ConveyedRegionSet& ReceiveInteraction::optionalsentregions() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveInteraction.optionalSentRegions)
  return _internal_optionalsentregions();
}
inline void ReceiveInteraction::unsafe_arena_set_allocated_optionalsentregions(
    ::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionalsentregions_);
  }
  _impl_.optionalsentregions_ = optionalsentregions;
  if (optionalsentregions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveInteraction.optionalSentRegions)
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* ReceiveInteraction::release_optionalsentregions() {
  
  ::rti1516_2025::fedpro::ConveyedRegionSet* temp = _impl_.optionalsentregions_;
  _impl_.optionalsentregions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* ReceiveInteraction::unsafe_arena_release_optionalsentregions() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveInteraction.optionalSentRegions)
  
  ::rti1516_2025::fedpro::ConveyedRegionSet* temp = _impl_.optionalsentregions_;
  _impl_.optionalsentregions_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* ReceiveInteraction::_internal_mutable_optionalsentregions() {
  
  if (_impl_.optionalsentregions_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ConveyedRegionSet>(GetArenaForAllocation());
    _impl_.optionalsentregions_ = p;
  }
  return _impl_.optionalsentregions_;
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* ReceiveInteraction::mutable_optionalsentregions() {
  ::rti1516_2025::fedpro::ConveyedRegionSet* _msg = _internal_mutable_optionalsentregions();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveInteraction.optionalSentRegions)
  return _msg;
}
inline void ReceiveInteraction::set_allocated_optionalsentregions(::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionalsentregions_);
  }
  if (optionalsentregions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optionalsentregions));
    if (message_arena != submessage_arena) {
      optionalsentregions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionalsentregions, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.optionalsentregions_ = optionalsentregions;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveInteraction.optionalSentRegions)
}

// -------------------------------------------------------------------

// ReceiveInteractionWithTime

// .rti1516_2025.fedpro.InteractionClassHandle interactionClass = 1;
inline bool ReceiveInteractionWithTime::_internal_has_interactionclass() const {
  return this != internal_default_instance() && _impl_.interactionclass_ != nullptr;
}
inline bool ReceiveInteractionWithTime::has_interactionclass() const {
  return _internal_has_interactionclass();
}
inline const ::rti1516_2025::fedpro::InteractionClassHandle& ReceiveInteractionWithTime::_internal_interactionclass() const {
  const ::rti1516_2025::fedpro::InteractionClassHandle* p = _impl_.interactionclass_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::InteractionClassHandle&>(
      ::rti1516_2025::fedpro::_InteractionClassHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::InteractionClassHandle& ReceiveInteractionWithTime::interactionclass() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveInteractionWithTime.interactionClass)
  return _internal_interactionclass();
}
inline void ReceiveInteractionWithTime::unsafe_arena_set_allocated_interactionclass(
    ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactionclass_);
  }
  _impl_.interactionclass_ = interactionclass;
  if (interactionclass) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveInteractionWithTime.interactionClass)
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReceiveInteractionWithTime::release_interactionclass() {
  
  ::rti1516_2025::fedpro::InteractionClassHandle* temp = _impl_.interactionclass_;
  _impl_.interactionclass_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReceiveInteractionWithTime::unsafe_arena_release_interactionclass() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveInteractionWithTime.interactionClass)
  
  ::rti1516_2025::fedpro::InteractionClassHandle* temp = _impl_.interactionclass_;
  _impl_.interactionclass_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReceiveInteractionWithTime::_internal_mutable_interactionclass() {
  
  if (_impl_.interactionclass_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::InteractionClassHandle>(GetArenaForAllocation());
    _impl_.interactionclass_ = p;
  }
  return _impl_.interactionclass_;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReceiveInteractionWithTime::mutable_interactionclass() {
  ::rti1516_2025::fedpro::InteractionClassHandle* _msg = _internal_mutable_interactionclass();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveInteractionWithTime.interactionClass)
  return _msg;
}
inline void ReceiveInteractionWithTime::set_allocated_interactionclass(::rti1516_2025::fedpro::InteractionClassHandle* interactionclass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactionclass_);
  }
  if (interactionclass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interactionclass));
    if (message_arena != submessage_arena) {
      interactionclass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interactionclass, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interactionclass_ = interactionclass;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveInteractionWithTime.interactionClass)
}

// .rti1516_2025.fedpro.ParameterHandleValueMap parameterValues = 2;
inline bool ReceiveInteractionWithTime::_internal_has_parametervalues() const {
  return this != internal_default_instance() && _impl_.parametervalues_ != nullptr;
}
inline bool ReceiveInteractionWithTime::has_parametervalues() const {
  return _internal_has_parametervalues();
}
inline const ::rti1516_2025::fedpro::ParameterHandleValueMap& ReceiveInteractionWithTime::_internal_parametervalues() const {
  const ::rti1516_2025::fedpro::ParameterHandleValueMap* p = _impl_.parametervalues_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ParameterHandleValueMap&>(
      ::rti1516_2025::fedpro::_ParameterHandleValueMap_default_instance_);
}
inline const ::rti1516_2025::fedpro::ParameterHandleValueMap& ReceiveInteractionWithTime::parametervalues() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveInteractionWithTime.parameterValues)
  return _internal_parametervalues();
}
inline void ReceiveInteractionWithTime::unsafe_arena_set_allocated_parametervalues(
    ::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parametervalues_);
  }
  _impl_.parametervalues_ = parametervalues;
  if (parametervalues) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveInteractionWithTime.parameterValues)
}
inline ::rti1516_2025::fedpro::ParameterHandleValueMap* ReceiveInteractionWithTime::release_parametervalues() {
  
  ::rti1516_2025::fedpro::ParameterHandleValueMap* temp = _impl_.parametervalues_;
  _impl_.parametervalues_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ParameterHandleValueMap* ReceiveInteractionWithTime::unsafe_arena_release_parametervalues() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveInteractionWithTime.parameterValues)
  
  ::rti1516_2025::fedpro::ParameterHandleValueMap* temp = _impl_.parametervalues_;
  _impl_.parametervalues_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ParameterHandleValueMap* ReceiveInteractionWithTime::_internal_mutable_parametervalues() {
  
  if (_impl_.parametervalues_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ParameterHandleValueMap>(GetArenaForAllocation());
    _impl_.parametervalues_ = p;
  }
  return _impl_.parametervalues_;
}
inline ::rti1516_2025::fedpro::ParameterHandleValueMap* ReceiveInteractionWithTime::mutable_parametervalues() {
  ::rti1516_2025::fedpro::ParameterHandleValueMap* _msg = _internal_mutable_parametervalues();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveInteractionWithTime.parameterValues)
  return _msg;
}
inline void ReceiveInteractionWithTime::set_allocated_parametervalues(::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parametervalues_);
  }
  if (parametervalues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parametervalues));
    if (message_arena != submessage_arena) {
      parametervalues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parametervalues, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.parametervalues_ = parametervalues;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveInteractionWithTime.parameterValues)
}

// bytes userSuppliedTag = 3;
inline void ReceiveInteractionWithTime::clear_usersuppliedtag() {
  _impl_.usersuppliedtag_.ClearToEmpty();
}
inline const std::string& ReceiveInteractionWithTime::usersuppliedtag() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveInteractionWithTime.userSuppliedTag)
  return _internal_usersuppliedtag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReceiveInteractionWithTime::set_usersuppliedtag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usersuppliedtag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ReceiveInteractionWithTime.userSuppliedTag)
}
inline std::string* ReceiveInteractionWithTime::mutable_usersuppliedtag() {
  std::string* _s = _internal_mutable_usersuppliedtag();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveInteractionWithTime.userSuppliedTag)
  return _s;
}
inline const std::string& ReceiveInteractionWithTime::_internal_usersuppliedtag() const {
  return _impl_.usersuppliedtag_.Get();
}
inline void ReceiveInteractionWithTime::_internal_set_usersuppliedtag(const std::string& value) {
  
  _impl_.usersuppliedtag_.Set(value, GetArenaForAllocation());
}
inline std::string* ReceiveInteractionWithTime::_internal_mutable_usersuppliedtag() {
  
  return _impl_.usersuppliedtag_.Mutable(GetArenaForAllocation());
}
inline std::string* ReceiveInteractionWithTime::release_usersuppliedtag() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveInteractionWithTime.userSuppliedTag)
  return _impl_.usersuppliedtag_.Release();
}
inline void ReceiveInteractionWithTime::set_allocated_usersuppliedtag(std::string* usersuppliedtag) {
  if (usersuppliedtag != nullptr) {
    
  } else {
    
  }
  _impl_.usersuppliedtag_.SetAllocated(usersuppliedtag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usersuppliedtag_.IsDefault()) {
    _impl_.usersuppliedtag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveInteractionWithTime.userSuppliedTag)
}

// .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 4;
inline bool ReceiveInteractionWithTime::_internal_has_transportationtype() const {
  return this != internal_default_instance() && _impl_.transportationtype_ != nullptr;
}
inline bool ReceiveInteractionWithTime::has_transportationtype() const {
  return _internal_has_transportationtype();
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ReceiveInteractionWithTime::_internal_transportationtype() const {
  const ::rti1516_2025::fedpro::TransportationTypeHandle* p = _impl_.transportationtype_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::TransportationTypeHandle&>(
      ::rti1516_2025::fedpro::_TransportationTypeHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ReceiveInteractionWithTime::transportationtype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveInteractionWithTime.transportationType)
  return _internal_transportationtype();
}
inline void ReceiveInteractionWithTime::unsafe_arena_set_allocated_transportationtype(
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  _impl_.transportationtype_ = transportationtype;
  if (transportationtype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveInteractionWithTime.transportationType)
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReceiveInteractionWithTime::release_transportationtype() {
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReceiveInteractionWithTime::unsafe_arena_release_transportationtype() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveInteractionWithTime.transportationType)
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReceiveInteractionWithTime::_internal_mutable_transportationtype() {
  
  if (_impl_.transportationtype_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::TransportationTypeHandle>(GetArenaForAllocation());
    _impl_.transportationtype_ = p;
  }
  return _impl_.transportationtype_;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReceiveInteractionWithTime::mutable_transportationtype() {
  ::rti1516_2025::fedpro::TransportationTypeHandle* _msg = _internal_mutable_transportationtype();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveInteractionWithTime.transportationType)
  return _msg;
}
inline void ReceiveInteractionWithTime::set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  if (transportationtype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transportationtype));
    if (message_arena != submessage_arena) {
      transportationtype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transportationtype, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transportationtype_ = transportationtype;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveInteractionWithTime.transportationType)
}

// .rti1516_2025.fedpro.FederateHandle producingFederate = 5;
inline bool ReceiveInteractionWithTime::_internal_has_producingfederate() const {
  return this != internal_default_instance() && _impl_.producingfederate_ != nullptr;
}
inline bool ReceiveInteractionWithTime::has_producingfederate() const {
  return _internal_has_producingfederate();
}
inline const ::rti1516_2025::fedpro::FederateHandle& ReceiveInteractionWithTime::_internal_producingfederate() const {
  const ::rti1516_2025::fedpro::FederateHandle* p = _impl_.producingfederate_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandle&>(
      ::rti1516_2025::fedpro::_FederateHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandle& ReceiveInteractionWithTime::producingfederate() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveInteractionWithTime.producingFederate)
  return _internal_producingfederate();
}
inline void ReceiveInteractionWithTime::unsafe_arena_set_allocated_producingfederate(
    ::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  _impl_.producingfederate_ = producingfederate;
  if (producingfederate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveInteractionWithTime.producingFederate)
}
inline ::rti1516_2025::fedpro::FederateHandle* ReceiveInteractionWithTime::release_producingfederate() {
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReceiveInteractionWithTime::unsafe_arena_release_producingfederate() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveInteractionWithTime.producingFederate)
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReceiveInteractionWithTime::_internal_mutable_producingfederate() {
  
  if (_impl_.producingfederate_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(GetArenaForAllocation());
    _impl_.producingfederate_ = p;
  }
  return _impl_.producingfederate_;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReceiveInteractionWithTime::mutable_producingfederate() {
  ::rti1516_2025::fedpro::FederateHandle* _msg = _internal_mutable_producingfederate();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveInteractionWithTime.producingFederate)
  return _msg;
}
inline void ReceiveInteractionWithTime::set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  if (producingfederate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(producingfederate));
    if (message_arena != submessage_arena) {
      producingfederate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, producingfederate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.producingfederate_ = producingfederate;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveInteractionWithTime.producingFederate)
}

// .rti1516_2025.fedpro.ConveyedRegionSet optionalSentRegions = 6;
inline bool ReceiveInteractionWithTime::_internal_has_optionalsentregions() const {
  return this != internal_default_instance() && _impl_.optionalsentregions_ != nullptr;
}
inline bool ReceiveInteractionWithTime::has_optionalsentregions() const {
  return _internal_has_optionalsentregions();
}
inline const ::rti1516_2025::fedpro::ConveyedRegionSet& ReceiveInteractionWithTime::_internal_optionalsentregions() const {
  const ::rti1516_2025::fedpro::ConveyedRegionSet* p = _impl_.optionalsentregions_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ConveyedRegionSet&>(
      ::rti1516_2025::fedpro::_ConveyedRegionSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::ConveyedRegionSet& ReceiveInteractionWithTime::optionalsentregions() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveInteractionWithTime.optionalSentRegions)
  return _internal_optionalsentregions();
}
inline void ReceiveInteractionWithTime::unsafe_arena_set_allocated_optionalsentregions(
    ::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionalsentregions_);
  }
  _impl_.optionalsentregions_ = optionalsentregions;
  if (optionalsentregions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveInteractionWithTime.optionalSentRegions)
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* ReceiveInteractionWithTime::release_optionalsentregions() {
  
  ::rti1516_2025::fedpro::ConveyedRegionSet* temp = _impl_.optionalsentregions_;
  _impl_.optionalsentregions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* ReceiveInteractionWithTime::unsafe_arena_release_optionalsentregions() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveInteractionWithTime.optionalSentRegions)
  
  ::rti1516_2025::fedpro::ConveyedRegionSet* temp = _impl_.optionalsentregions_;
  _impl_.optionalsentregions_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* ReceiveInteractionWithTime::_internal_mutable_optionalsentregions() {
  
  if (_impl_.optionalsentregions_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ConveyedRegionSet>(GetArenaForAllocation());
    _impl_.optionalsentregions_ = p;
  }
  return _impl_.optionalsentregions_;
}
inline ::rti1516_2025::fedpro::ConveyedRegionSet* ReceiveInteractionWithTime::mutable_optionalsentregions() {
  ::rti1516_2025::fedpro::ConveyedRegionSet* _msg = _internal_mutable_optionalsentregions();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveInteractionWithTime.optionalSentRegions)
  return _msg;
}
inline void ReceiveInteractionWithTime::set_allocated_optionalsentregions(::rti1516_2025::fedpro::ConveyedRegionSet* optionalsentregions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionalsentregions_);
  }
  if (optionalsentregions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optionalsentregions));
    if (message_arena != submessage_arena) {
      optionalsentregions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionalsentregions, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.optionalsentregions_ = optionalsentregions;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveInteractionWithTime.optionalSentRegions)
}

// .rti1516_2025.fedpro.LogicalTime time = 7;
inline bool ReceiveInteractionWithTime::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool ReceiveInteractionWithTime::has_time() const {
  return _internal_has_time();
}
inline const ::rti1516_2025::fedpro::LogicalTime& ReceiveInteractionWithTime::_internal_time() const {
  const ::rti1516_2025::fedpro::LogicalTime* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::LogicalTime&>(
      ::rti1516_2025::fedpro::_LogicalTime_default_instance_);
}
inline const ::rti1516_2025::fedpro::LogicalTime& ReceiveInteractionWithTime::time() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveInteractionWithTime.time)
  return _internal_time();
}
inline void ReceiveInteractionWithTime::unsafe_arena_set_allocated_time(
    ::rti1516_2025::fedpro::LogicalTime* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveInteractionWithTime.time)
}
inline ::rti1516_2025::fedpro::LogicalTime* ReceiveInteractionWithTime::release_time() {
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* ReceiveInteractionWithTime::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveInteractionWithTime.time)
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* ReceiveInteractionWithTime::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::LogicalTime>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::rti1516_2025::fedpro::LogicalTime* ReceiveInteractionWithTime::mutable_time() {
  ::rti1516_2025::fedpro::LogicalTime* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveInteractionWithTime.time)
  return _msg;
}
inline void ReceiveInteractionWithTime::set_allocated_time(::rti1516_2025::fedpro::LogicalTime* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveInteractionWithTime.time)
}

// .rti1516_2025.fedpro.OrderType sentOrderType = 8;
inline void ReceiveInteractionWithTime::clear_sentordertype() {
  _impl_.sentordertype_ = 0;
}
inline ::rti1516_2025::fedpro::OrderType ReceiveInteractionWithTime::_internal_sentordertype() const {
  return static_cast< ::rti1516_2025::fedpro::OrderType >(_impl_.sentordertype_);
}
inline ::rti1516_2025::fedpro::OrderType ReceiveInteractionWithTime::sentordertype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveInteractionWithTime.sentOrderType)
  return _internal_sentordertype();
}
inline void ReceiveInteractionWithTime::_internal_set_sentordertype(::rti1516_2025::fedpro::OrderType value) {
  
  _impl_.sentordertype_ = value;
}
inline void ReceiveInteractionWithTime::set_sentordertype(::rti1516_2025::fedpro::OrderType value) {
  _internal_set_sentordertype(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ReceiveInteractionWithTime.sentOrderType)
}

// .rti1516_2025.fedpro.OrderType receivedOrderType = 9;
inline void ReceiveInteractionWithTime::clear_receivedordertype() {
  _impl_.receivedordertype_ = 0;
}
inline ::rti1516_2025::fedpro::OrderType ReceiveInteractionWithTime::_internal_receivedordertype() const {
  return static_cast< ::rti1516_2025::fedpro::OrderType >(_impl_.receivedordertype_);
}
inline ::rti1516_2025::fedpro::OrderType ReceiveInteractionWithTime::receivedordertype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveInteractionWithTime.receivedOrderType)
  return _internal_receivedordertype();
}
inline void ReceiveInteractionWithTime::_internal_set_receivedordertype(::rti1516_2025::fedpro::OrderType value) {
  
  _impl_.receivedordertype_ = value;
}
inline void ReceiveInteractionWithTime::set_receivedordertype(::rti1516_2025::fedpro::OrderType value) {
  _internal_set_receivedordertype(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ReceiveInteractionWithTime.receivedOrderType)
}

// .rti1516_2025.fedpro.MessageRetractionHandle optionalRetraction = 10;
inline bool ReceiveInteractionWithTime::_internal_has_optionalretraction() const {
  return this != internal_default_instance() && _impl_.optionalretraction_ != nullptr;
}
inline bool ReceiveInteractionWithTime::has_optionalretraction() const {
  return _internal_has_optionalretraction();
}
inline const ::rti1516_2025::fedpro::MessageRetractionHandle& ReceiveInteractionWithTime::_internal_optionalretraction() const {
  const ::rti1516_2025::fedpro::MessageRetractionHandle* p = _impl_.optionalretraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::MessageRetractionHandle&>(
      ::rti1516_2025::fedpro::_MessageRetractionHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::MessageRetractionHandle& ReceiveInteractionWithTime::optionalretraction() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveInteractionWithTime.optionalRetraction)
  return _internal_optionalretraction();
}
inline void ReceiveInteractionWithTime::unsafe_arena_set_allocated_optionalretraction(
    ::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionalretraction_);
  }
  _impl_.optionalretraction_ = optionalretraction;
  if (optionalretraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveInteractionWithTime.optionalRetraction)
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* ReceiveInteractionWithTime::release_optionalretraction() {
  
  ::rti1516_2025::fedpro::MessageRetractionHandle* temp = _impl_.optionalretraction_;
  _impl_.optionalretraction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* ReceiveInteractionWithTime::unsafe_arena_release_optionalretraction() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveInteractionWithTime.optionalRetraction)
  
  ::rti1516_2025::fedpro::MessageRetractionHandle* temp = _impl_.optionalretraction_;
  _impl_.optionalretraction_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* ReceiveInteractionWithTime::_internal_mutable_optionalretraction() {
  
  if (_impl_.optionalretraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::MessageRetractionHandle>(GetArenaForAllocation());
    _impl_.optionalretraction_ = p;
  }
  return _impl_.optionalretraction_;
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* ReceiveInteractionWithTime::mutable_optionalretraction() {
  ::rti1516_2025::fedpro::MessageRetractionHandle* _msg = _internal_mutable_optionalretraction();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveInteractionWithTime.optionalRetraction)
  return _msg;
}
inline void ReceiveInteractionWithTime::set_allocated_optionalretraction(::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionalretraction_);
  }
  if (optionalretraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optionalretraction));
    if (message_arena != submessage_arena) {
      optionalretraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionalretraction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.optionalretraction_ = optionalretraction;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveInteractionWithTime.optionalRetraction)
}

// -------------------------------------------------------------------

// ReceiveDirectedInteraction

// .rti1516_2025.fedpro.InteractionClassHandle interactionClass = 1;
inline bool ReceiveDirectedInteraction::_internal_has_interactionclass() const {
  return this != internal_default_instance() && _impl_.interactionclass_ != nullptr;
}
inline bool ReceiveDirectedInteraction::has_interactionclass() const {
  return _internal_has_interactionclass();
}
inline const ::rti1516_2025::fedpro::InteractionClassHandle& ReceiveDirectedInteraction::_internal_interactionclass() const {
  const ::rti1516_2025::fedpro::InteractionClassHandle* p = _impl_.interactionclass_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::InteractionClassHandle&>(
      ::rti1516_2025::fedpro::_InteractionClassHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::InteractionClassHandle& ReceiveDirectedInteraction::interactionclass() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveDirectedInteraction.interactionClass)
  return _internal_interactionclass();
}
inline void ReceiveDirectedInteraction::unsafe_arena_set_allocated_interactionclass(
    ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactionclass_);
  }
  _impl_.interactionclass_ = interactionclass;
  if (interactionclass) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteraction.interactionClass)
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReceiveDirectedInteraction::release_interactionclass() {
  
  ::rti1516_2025::fedpro::InteractionClassHandle* temp = _impl_.interactionclass_;
  _impl_.interactionclass_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReceiveDirectedInteraction::unsafe_arena_release_interactionclass() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveDirectedInteraction.interactionClass)
  
  ::rti1516_2025::fedpro::InteractionClassHandle* temp = _impl_.interactionclass_;
  _impl_.interactionclass_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReceiveDirectedInteraction::_internal_mutable_interactionclass() {
  
  if (_impl_.interactionclass_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::InteractionClassHandle>(GetArenaForAllocation());
    _impl_.interactionclass_ = p;
  }
  return _impl_.interactionclass_;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReceiveDirectedInteraction::mutable_interactionclass() {
  ::rti1516_2025::fedpro::InteractionClassHandle* _msg = _internal_mutable_interactionclass();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveDirectedInteraction.interactionClass)
  return _msg;
}
inline void ReceiveDirectedInteraction::set_allocated_interactionclass(::rti1516_2025::fedpro::InteractionClassHandle* interactionclass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactionclass_);
  }
  if (interactionclass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interactionclass));
    if (message_arena != submessage_arena) {
      interactionclass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interactionclass, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interactionclass_ = interactionclass;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteraction.interactionClass)
}

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 2;
inline bool ReceiveDirectedInteraction::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool ReceiveDirectedInteraction::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& ReceiveDirectedInteraction::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& ReceiveDirectedInteraction::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveDirectedInteraction.objectInstance)
  return _internal_objectinstance();
}
inline void ReceiveDirectedInteraction::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteraction.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReceiveDirectedInteraction::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReceiveDirectedInteraction::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveDirectedInteraction.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReceiveDirectedInteraction::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReceiveDirectedInteraction::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveDirectedInteraction.objectInstance)
  return _msg;
}
inline void ReceiveDirectedInteraction::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteraction.objectInstance)
}

// .rti1516_2025.fedpro.ParameterHandleValueMap parameterValues = 3;
inline bool ReceiveDirectedInteraction::_internal_has_parametervalues() const {
  return this != internal_default_instance() && _impl_.parametervalues_ != nullptr;
}
inline bool ReceiveDirectedInteraction::has_parametervalues() const {
  return _internal_has_parametervalues();
}
inline const ::rti1516_2025::fedpro::ParameterHandleValueMap& ReceiveDirectedInteraction::_internal_parametervalues() const {
  const ::rti1516_2025::fedpro::ParameterHandleValueMap* p = _impl_.parametervalues_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ParameterHandleValueMap&>(
      ::rti1516_2025::fedpro::_ParameterHandleValueMap_default_instance_);
}
inline const ::rti1516_2025::fedpro::ParameterHandleValueMap& ReceiveDirectedInteraction::parametervalues() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveDirectedInteraction.parameterValues)
  return _internal_parametervalues();
}
inline void ReceiveDirectedInteraction::unsafe_arena_set_allocated_parametervalues(
    ::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parametervalues_);
  }
  _impl_.parametervalues_ = parametervalues;
  if (parametervalues) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteraction.parameterValues)
}
inline ::rti1516_2025::fedpro::ParameterHandleValueMap* ReceiveDirectedInteraction::release_parametervalues() {
  
  ::rti1516_2025::fedpro::ParameterHandleValueMap* temp = _impl_.parametervalues_;
  _impl_.parametervalues_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ParameterHandleValueMap* ReceiveDirectedInteraction::unsafe_arena_release_parametervalues() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveDirectedInteraction.parameterValues)
  
  ::rti1516_2025::fedpro::ParameterHandleValueMap* temp = _impl_.parametervalues_;
  _impl_.parametervalues_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ParameterHandleValueMap* ReceiveDirectedInteraction::_internal_mutable_parametervalues() {
  
  if (_impl_.parametervalues_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ParameterHandleValueMap>(GetArenaForAllocation());
    _impl_.parametervalues_ = p;
  }
  return _impl_.parametervalues_;
}
inline ::rti1516_2025::fedpro::ParameterHandleValueMap* ReceiveDirectedInteraction::mutable_parametervalues() {
  ::rti1516_2025::fedpro::ParameterHandleValueMap* _msg = _internal_mutable_parametervalues();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveDirectedInteraction.parameterValues)
  return _msg;
}
inline void ReceiveDirectedInteraction::set_allocated_parametervalues(::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parametervalues_);
  }
  if (parametervalues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parametervalues));
    if (message_arena != submessage_arena) {
      parametervalues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parametervalues, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.parametervalues_ = parametervalues;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteraction.parameterValues)
}

// bytes userSuppliedTag = 4;
inline void ReceiveDirectedInteraction::clear_usersuppliedtag() {
  _impl_.usersuppliedtag_.ClearToEmpty();
}
inline const std::string& ReceiveDirectedInteraction::usersuppliedtag() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveDirectedInteraction.userSuppliedTag)
  return _internal_usersuppliedtag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReceiveDirectedInteraction::set_usersuppliedtag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usersuppliedtag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ReceiveDirectedInteraction.userSuppliedTag)
}
inline std::string* ReceiveDirectedInteraction::mutable_usersuppliedtag() {
  std::string* _s = _internal_mutable_usersuppliedtag();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveDirectedInteraction.userSuppliedTag)
  return _s;
}
inline const std::string& ReceiveDirectedInteraction::_internal_usersuppliedtag() const {
  return _impl_.usersuppliedtag_.Get();
}
inline void ReceiveDirectedInteraction::_internal_set_usersuppliedtag(const std::string& value) {
  
  _impl_.usersuppliedtag_.Set(value, GetArenaForAllocation());
}
inline std::string* ReceiveDirectedInteraction::_internal_mutable_usersuppliedtag() {
  
  return _impl_.usersuppliedtag_.Mutable(GetArenaForAllocation());
}
inline std::string* ReceiveDirectedInteraction::release_usersuppliedtag() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveDirectedInteraction.userSuppliedTag)
  return _impl_.usersuppliedtag_.Release();
}
inline void ReceiveDirectedInteraction::set_allocated_usersuppliedtag(std::string* usersuppliedtag) {
  if (usersuppliedtag != nullptr) {
    
  } else {
    
  }
  _impl_.usersuppliedtag_.SetAllocated(usersuppliedtag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usersuppliedtag_.IsDefault()) {
    _impl_.usersuppliedtag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteraction.userSuppliedTag)
}

// .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 5;
inline bool ReceiveDirectedInteraction::_internal_has_transportationtype() const {
  return this != internal_default_instance() && _impl_.transportationtype_ != nullptr;
}
inline bool ReceiveDirectedInteraction::has_transportationtype() const {
  return _internal_has_transportationtype();
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ReceiveDirectedInteraction::_internal_transportationtype() const {
  const ::rti1516_2025::fedpro::TransportationTypeHandle* p = _impl_.transportationtype_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::TransportationTypeHandle&>(
      ::rti1516_2025::fedpro::_TransportationTypeHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ReceiveDirectedInteraction::transportationtype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveDirectedInteraction.transportationType)
  return _internal_transportationtype();
}
inline void ReceiveDirectedInteraction::unsafe_arena_set_allocated_transportationtype(
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  _impl_.transportationtype_ = transportationtype;
  if (transportationtype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteraction.transportationType)
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReceiveDirectedInteraction::release_transportationtype() {
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReceiveDirectedInteraction::unsafe_arena_release_transportationtype() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveDirectedInteraction.transportationType)
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReceiveDirectedInteraction::_internal_mutable_transportationtype() {
  
  if (_impl_.transportationtype_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::TransportationTypeHandle>(GetArenaForAllocation());
    _impl_.transportationtype_ = p;
  }
  return _impl_.transportationtype_;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReceiveDirectedInteraction::mutable_transportationtype() {
  ::rti1516_2025::fedpro::TransportationTypeHandle* _msg = _internal_mutable_transportationtype();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveDirectedInteraction.transportationType)
  return _msg;
}
inline void ReceiveDirectedInteraction::set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  if (transportationtype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transportationtype));
    if (message_arena != submessage_arena) {
      transportationtype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transportationtype, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transportationtype_ = transportationtype;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteraction.transportationType)
}

// .rti1516_2025.fedpro.FederateHandle producingFederate = 6;
inline bool ReceiveDirectedInteraction::_internal_has_producingfederate() const {
  return this != internal_default_instance() && _impl_.producingfederate_ != nullptr;
}
inline bool ReceiveDirectedInteraction::has_producingfederate() const {
  return _internal_has_producingfederate();
}
inline const ::rti1516_2025::fedpro::FederateHandle& ReceiveDirectedInteraction::_internal_producingfederate() const {
  const ::rti1516_2025::fedpro::FederateHandle* p = _impl_.producingfederate_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandle&>(
      ::rti1516_2025::fedpro::_FederateHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandle& ReceiveDirectedInteraction::producingfederate() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveDirectedInteraction.producingFederate)
  return _internal_producingfederate();
}
inline void ReceiveDirectedInteraction::unsafe_arena_set_allocated_producingfederate(
    ::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  _impl_.producingfederate_ = producingfederate;
  if (producingfederate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteraction.producingFederate)
}
inline ::rti1516_2025::fedpro::FederateHandle* ReceiveDirectedInteraction::release_producingfederate() {
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReceiveDirectedInteraction::unsafe_arena_release_producingfederate() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveDirectedInteraction.producingFederate)
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReceiveDirectedInteraction::_internal_mutable_producingfederate() {
  
  if (_impl_.producingfederate_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(GetArenaForAllocation());
    _impl_.producingfederate_ = p;
  }
  return _impl_.producingfederate_;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReceiveDirectedInteraction::mutable_producingfederate() {
  ::rti1516_2025::fedpro::FederateHandle* _msg = _internal_mutable_producingfederate();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveDirectedInteraction.producingFederate)
  return _msg;
}
inline void ReceiveDirectedInteraction::set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  if (producingfederate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(producingfederate));
    if (message_arena != submessage_arena) {
      producingfederate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, producingfederate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.producingfederate_ = producingfederate;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteraction.producingFederate)
}

// -------------------------------------------------------------------

// ReceiveDirectedInteractionWithTime

// .rti1516_2025.fedpro.InteractionClassHandle interactionClass = 1;
inline bool ReceiveDirectedInteractionWithTime::_internal_has_interactionclass() const {
  return this != internal_default_instance() && _impl_.interactionclass_ != nullptr;
}
inline bool ReceiveDirectedInteractionWithTime::has_interactionclass() const {
  return _internal_has_interactionclass();
}
inline const ::rti1516_2025::fedpro::InteractionClassHandle& ReceiveDirectedInteractionWithTime::_internal_interactionclass() const {
  const ::rti1516_2025::fedpro::InteractionClassHandle* p = _impl_.interactionclass_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::InteractionClassHandle&>(
      ::rti1516_2025::fedpro::_InteractionClassHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::InteractionClassHandle& ReceiveDirectedInteractionWithTime::interactionclass() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.interactionClass)
  return _internal_interactionclass();
}
inline void ReceiveDirectedInteractionWithTime::unsafe_arena_set_allocated_interactionclass(
    ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactionclass_);
  }
  _impl_.interactionclass_ = interactionclass;
  if (interactionclass) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.interactionClass)
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReceiveDirectedInteractionWithTime::release_interactionclass() {
  
  ::rti1516_2025::fedpro::InteractionClassHandle* temp = _impl_.interactionclass_;
  _impl_.interactionclass_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReceiveDirectedInteractionWithTime::unsafe_arena_release_interactionclass() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.interactionClass)
  
  ::rti1516_2025::fedpro::InteractionClassHandle* temp = _impl_.interactionclass_;
  _impl_.interactionclass_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReceiveDirectedInteractionWithTime::_internal_mutable_interactionclass() {
  
  if (_impl_.interactionclass_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::InteractionClassHandle>(GetArenaForAllocation());
    _impl_.interactionclass_ = p;
  }
  return _impl_.interactionclass_;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReceiveDirectedInteractionWithTime::mutable_interactionclass() {
  ::rti1516_2025::fedpro::InteractionClassHandle* _msg = _internal_mutable_interactionclass();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.interactionClass)
  return _msg;
}
inline void ReceiveDirectedInteractionWithTime::set_allocated_interactionclass(::rti1516_2025::fedpro::InteractionClassHandle* interactionclass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactionclass_);
  }
  if (interactionclass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interactionclass));
    if (message_arena != submessage_arena) {
      interactionclass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interactionclass, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interactionclass_ = interactionclass;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.interactionClass)
}

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 2;
inline bool ReceiveDirectedInteractionWithTime::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool ReceiveDirectedInteractionWithTime::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& ReceiveDirectedInteractionWithTime::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& ReceiveDirectedInteractionWithTime::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.objectInstance)
  return _internal_objectinstance();
}
inline void ReceiveDirectedInteractionWithTime::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReceiveDirectedInteractionWithTime::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReceiveDirectedInteractionWithTime::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReceiveDirectedInteractionWithTime::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReceiveDirectedInteractionWithTime::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.objectInstance)
  return _msg;
}
inline void ReceiveDirectedInteractionWithTime::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.objectInstance)
}

// .rti1516_2025.fedpro.ParameterHandleValueMap parameterValues = 3;
inline bool ReceiveDirectedInteractionWithTime::_internal_has_parametervalues() const {
  return this != internal_default_instance() && _impl_.parametervalues_ != nullptr;
}
inline bool ReceiveDirectedInteractionWithTime::has_parametervalues() const {
  return _internal_has_parametervalues();
}
inline const ::rti1516_2025::fedpro::ParameterHandleValueMap& ReceiveDirectedInteractionWithTime::_internal_parametervalues() const {
  const ::rti1516_2025::fedpro::ParameterHandleValueMap* p = _impl_.parametervalues_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ParameterHandleValueMap&>(
      ::rti1516_2025::fedpro::_ParameterHandleValueMap_default_instance_);
}
inline const ::rti1516_2025::fedpro::ParameterHandleValueMap& ReceiveDirectedInteractionWithTime::parametervalues() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.parameterValues)
  return _internal_parametervalues();
}
inline void ReceiveDirectedInteractionWithTime::unsafe_arena_set_allocated_parametervalues(
    ::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parametervalues_);
  }
  _impl_.parametervalues_ = parametervalues;
  if (parametervalues) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.parameterValues)
}
inline ::rti1516_2025::fedpro::ParameterHandleValueMap* ReceiveDirectedInteractionWithTime::release_parametervalues() {
  
  ::rti1516_2025::fedpro::ParameterHandleValueMap* temp = _impl_.parametervalues_;
  _impl_.parametervalues_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ParameterHandleValueMap* ReceiveDirectedInteractionWithTime::unsafe_arena_release_parametervalues() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.parameterValues)
  
  ::rti1516_2025::fedpro::ParameterHandleValueMap* temp = _impl_.parametervalues_;
  _impl_.parametervalues_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ParameterHandleValueMap* ReceiveDirectedInteractionWithTime::_internal_mutable_parametervalues() {
  
  if (_impl_.parametervalues_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ParameterHandleValueMap>(GetArenaForAllocation());
    _impl_.parametervalues_ = p;
  }
  return _impl_.parametervalues_;
}
inline ::rti1516_2025::fedpro::ParameterHandleValueMap* ReceiveDirectedInteractionWithTime::mutable_parametervalues() {
  ::rti1516_2025::fedpro::ParameterHandleValueMap* _msg = _internal_mutable_parametervalues();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.parameterValues)
  return _msg;
}
inline void ReceiveDirectedInteractionWithTime::set_allocated_parametervalues(::rti1516_2025::fedpro::ParameterHandleValueMap* parametervalues) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parametervalues_);
  }
  if (parametervalues) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parametervalues));
    if (message_arena != submessage_arena) {
      parametervalues = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parametervalues, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.parametervalues_ = parametervalues;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.parameterValues)
}

// bytes userSuppliedTag = 4;
inline void ReceiveDirectedInteractionWithTime::clear_usersuppliedtag() {
  _impl_.usersuppliedtag_.ClearToEmpty();
}
inline const std::string& ReceiveDirectedInteractionWithTime::usersuppliedtag() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.userSuppliedTag)
  return _internal_usersuppliedtag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReceiveDirectedInteractionWithTime::set_usersuppliedtag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usersuppliedtag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.userSuppliedTag)
}
inline std::string* ReceiveDirectedInteractionWithTime::mutable_usersuppliedtag() {
  std::string* _s = _internal_mutable_usersuppliedtag();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.userSuppliedTag)
  return _s;
}
inline const std::string& ReceiveDirectedInteractionWithTime::_internal_usersuppliedtag() const {
  return _impl_.usersuppliedtag_.Get();
}
inline void ReceiveDirectedInteractionWithTime::_internal_set_usersuppliedtag(const std::string& value) {
  
  _impl_.usersuppliedtag_.Set(value, GetArenaForAllocation());
}
inline std::string* ReceiveDirectedInteractionWithTime::_internal_mutable_usersuppliedtag() {
  
  return _impl_.usersuppliedtag_.Mutable(GetArenaForAllocation());
}
inline std::string* ReceiveDirectedInteractionWithTime::release_usersuppliedtag() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.userSuppliedTag)
  return _impl_.usersuppliedtag_.Release();
}
inline void ReceiveDirectedInteractionWithTime::set_allocated_usersuppliedtag(std::string* usersuppliedtag) {
  if (usersuppliedtag != nullptr) {
    
  } else {
    
  }
  _impl_.usersuppliedtag_.SetAllocated(usersuppliedtag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usersuppliedtag_.IsDefault()) {
    _impl_.usersuppliedtag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.userSuppliedTag)
}

// .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 5;
inline bool ReceiveDirectedInteractionWithTime::_internal_has_transportationtype() const {
  return this != internal_default_instance() && _impl_.transportationtype_ != nullptr;
}
inline bool ReceiveDirectedInteractionWithTime::has_transportationtype() const {
  return _internal_has_transportationtype();
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ReceiveDirectedInteractionWithTime::_internal_transportationtype() const {
  const ::rti1516_2025::fedpro::TransportationTypeHandle* p = _impl_.transportationtype_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::TransportationTypeHandle&>(
      ::rti1516_2025::fedpro::_TransportationTypeHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ReceiveDirectedInteractionWithTime::transportationtype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.transportationType)
  return _internal_transportationtype();
}
inline void ReceiveDirectedInteractionWithTime::unsafe_arena_set_allocated_transportationtype(
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  _impl_.transportationtype_ = transportationtype;
  if (transportationtype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.transportationType)
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReceiveDirectedInteractionWithTime::release_transportationtype() {
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReceiveDirectedInteractionWithTime::unsafe_arena_release_transportationtype() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.transportationType)
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReceiveDirectedInteractionWithTime::_internal_mutable_transportationtype() {
  
  if (_impl_.transportationtype_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::TransportationTypeHandle>(GetArenaForAllocation());
    _impl_.transportationtype_ = p;
  }
  return _impl_.transportationtype_;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReceiveDirectedInteractionWithTime::mutable_transportationtype() {
  ::rti1516_2025::fedpro::TransportationTypeHandle* _msg = _internal_mutable_transportationtype();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.transportationType)
  return _msg;
}
inline void ReceiveDirectedInteractionWithTime::set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  if (transportationtype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transportationtype));
    if (message_arena != submessage_arena) {
      transportationtype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transportationtype, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transportationtype_ = transportationtype;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.transportationType)
}

// .rti1516_2025.fedpro.FederateHandle producingFederate = 6;
inline bool ReceiveDirectedInteractionWithTime::_internal_has_producingfederate() const {
  return this != internal_default_instance() && _impl_.producingfederate_ != nullptr;
}
inline bool ReceiveDirectedInteractionWithTime::has_producingfederate() const {
  return _internal_has_producingfederate();
}
inline const ::rti1516_2025::fedpro::FederateHandle& ReceiveDirectedInteractionWithTime::_internal_producingfederate() const {
  const ::rti1516_2025::fedpro::FederateHandle* p = _impl_.producingfederate_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandle&>(
      ::rti1516_2025::fedpro::_FederateHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandle& ReceiveDirectedInteractionWithTime::producingfederate() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.producingFederate)
  return _internal_producingfederate();
}
inline void ReceiveDirectedInteractionWithTime::unsafe_arena_set_allocated_producingfederate(
    ::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  _impl_.producingfederate_ = producingfederate;
  if (producingfederate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.producingFederate)
}
inline ::rti1516_2025::fedpro::FederateHandle* ReceiveDirectedInteractionWithTime::release_producingfederate() {
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReceiveDirectedInteractionWithTime::unsafe_arena_release_producingfederate() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.producingFederate)
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReceiveDirectedInteractionWithTime::_internal_mutable_producingfederate() {
  
  if (_impl_.producingfederate_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(GetArenaForAllocation());
    _impl_.producingfederate_ = p;
  }
  return _impl_.producingfederate_;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReceiveDirectedInteractionWithTime::mutable_producingfederate() {
  ::rti1516_2025::fedpro::FederateHandle* _msg = _internal_mutable_producingfederate();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.producingFederate)
  return _msg;
}
inline void ReceiveDirectedInteractionWithTime::set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  if (producingfederate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(producingfederate));
    if (message_arena != submessage_arena) {
      producingfederate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, producingfederate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.producingfederate_ = producingfederate;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.producingFederate)
}

// .rti1516_2025.fedpro.LogicalTime time = 7;
inline bool ReceiveDirectedInteractionWithTime::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool ReceiveDirectedInteractionWithTime::has_time() const {
  return _internal_has_time();
}
inline const ::rti1516_2025::fedpro::LogicalTime& ReceiveDirectedInteractionWithTime::_internal_time() const {
  const ::rti1516_2025::fedpro::LogicalTime* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::LogicalTime&>(
      ::rti1516_2025::fedpro::_LogicalTime_default_instance_);
}
inline const ::rti1516_2025::fedpro::LogicalTime& ReceiveDirectedInteractionWithTime::time() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.time)
  return _internal_time();
}
inline void ReceiveDirectedInteractionWithTime::unsafe_arena_set_allocated_time(
    ::rti1516_2025::fedpro::LogicalTime* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.time)
}
inline ::rti1516_2025::fedpro::LogicalTime* ReceiveDirectedInteractionWithTime::release_time() {
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* ReceiveDirectedInteractionWithTime::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.time)
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* ReceiveDirectedInteractionWithTime::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::LogicalTime>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::rti1516_2025::fedpro::LogicalTime* ReceiveDirectedInteractionWithTime::mutable_time() {
  ::rti1516_2025::fedpro::LogicalTime* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.time)
  return _msg;
}
inline void ReceiveDirectedInteractionWithTime::set_allocated_time(::rti1516_2025::fedpro::LogicalTime* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.time)
}

// .rti1516_2025.fedpro.OrderType sentOrderType = 8;
inline void ReceiveDirectedInteractionWithTime::clear_sentordertype() {
  _impl_.sentordertype_ = 0;
}
inline ::rti1516_2025::fedpro::OrderType ReceiveDirectedInteractionWithTime::_internal_sentordertype() const {
  return static_cast< ::rti1516_2025::fedpro::OrderType >(_impl_.sentordertype_);
}
inline ::rti1516_2025::fedpro::OrderType ReceiveDirectedInteractionWithTime::sentordertype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.sentOrderType)
  return _internal_sentordertype();
}
inline void ReceiveDirectedInteractionWithTime::_internal_set_sentordertype(::rti1516_2025::fedpro::OrderType value) {
  
  _impl_.sentordertype_ = value;
}
inline void ReceiveDirectedInteractionWithTime::set_sentordertype(::rti1516_2025::fedpro::OrderType value) {
  _internal_set_sentordertype(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.sentOrderType)
}

// .rti1516_2025.fedpro.OrderType receivedOrderType = 9;
inline void ReceiveDirectedInteractionWithTime::clear_receivedordertype() {
  _impl_.receivedordertype_ = 0;
}
inline ::rti1516_2025::fedpro::OrderType ReceiveDirectedInteractionWithTime::_internal_receivedordertype() const {
  return static_cast< ::rti1516_2025::fedpro::OrderType >(_impl_.receivedordertype_);
}
inline ::rti1516_2025::fedpro::OrderType ReceiveDirectedInteractionWithTime::receivedordertype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.receivedOrderType)
  return _internal_receivedordertype();
}
inline void ReceiveDirectedInteractionWithTime::_internal_set_receivedordertype(::rti1516_2025::fedpro::OrderType value) {
  
  _impl_.receivedordertype_ = value;
}
inline void ReceiveDirectedInteractionWithTime::set_receivedordertype(::rti1516_2025::fedpro::OrderType value) {
  _internal_set_receivedordertype(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.receivedOrderType)
}

// .rti1516_2025.fedpro.MessageRetractionHandle optionalRetraction = 10;
inline bool ReceiveDirectedInteractionWithTime::_internal_has_optionalretraction() const {
  return this != internal_default_instance() && _impl_.optionalretraction_ != nullptr;
}
inline bool ReceiveDirectedInteractionWithTime::has_optionalretraction() const {
  return _internal_has_optionalretraction();
}
inline const ::rti1516_2025::fedpro::MessageRetractionHandle& ReceiveDirectedInteractionWithTime::_internal_optionalretraction() const {
  const ::rti1516_2025::fedpro::MessageRetractionHandle* p = _impl_.optionalretraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::MessageRetractionHandle&>(
      ::rti1516_2025::fedpro::_MessageRetractionHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::MessageRetractionHandle& ReceiveDirectedInteractionWithTime::optionalretraction() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.optionalRetraction)
  return _internal_optionalretraction();
}
inline void ReceiveDirectedInteractionWithTime::unsafe_arena_set_allocated_optionalretraction(
    ::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionalretraction_);
  }
  _impl_.optionalretraction_ = optionalretraction;
  if (optionalretraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.optionalRetraction)
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* ReceiveDirectedInteractionWithTime::release_optionalretraction() {
  
  ::rti1516_2025::fedpro::MessageRetractionHandle* temp = _impl_.optionalretraction_;
  _impl_.optionalretraction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* ReceiveDirectedInteractionWithTime::unsafe_arena_release_optionalretraction() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.optionalRetraction)
  
  ::rti1516_2025::fedpro::MessageRetractionHandle* temp = _impl_.optionalretraction_;
  _impl_.optionalretraction_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* ReceiveDirectedInteractionWithTime::_internal_mutable_optionalretraction() {
  
  if (_impl_.optionalretraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::MessageRetractionHandle>(GetArenaForAllocation());
    _impl_.optionalretraction_ = p;
  }
  return _impl_.optionalretraction_;
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* ReceiveDirectedInteractionWithTime::mutable_optionalretraction() {
  ::rti1516_2025::fedpro::MessageRetractionHandle* _msg = _internal_mutable_optionalretraction();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.optionalRetraction)
  return _msg;
}
inline void ReceiveDirectedInteractionWithTime::set_allocated_optionalretraction(::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionalretraction_);
  }
  if (optionalretraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optionalretraction));
    if (message_arena != submessage_arena) {
      optionalretraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionalretraction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.optionalretraction_ = optionalretraction;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime.optionalRetraction)
}

// -------------------------------------------------------------------

// RemoveObjectInstance

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool RemoveObjectInstance::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool RemoveObjectInstance::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& RemoveObjectInstance::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& RemoveObjectInstance::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RemoveObjectInstance.objectInstance)
  return _internal_objectinstance();
}
inline void RemoveObjectInstance::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.RemoveObjectInstance.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RemoveObjectInstance::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RemoveObjectInstance::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RemoveObjectInstance.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RemoveObjectInstance::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RemoveObjectInstance::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RemoveObjectInstance.objectInstance)
  return _msg;
}
inline void RemoveObjectInstance::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RemoveObjectInstance.objectInstance)
}

// bytes userSuppliedTag = 2;
inline void RemoveObjectInstance::clear_usersuppliedtag() {
  _impl_.usersuppliedtag_.ClearToEmpty();
}
inline const std::string& RemoveObjectInstance::usersuppliedtag() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RemoveObjectInstance.userSuppliedTag)
  return _internal_usersuppliedtag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveObjectInstance::set_usersuppliedtag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usersuppliedtag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.RemoveObjectInstance.userSuppliedTag)
}
inline std::string* RemoveObjectInstance::mutable_usersuppliedtag() {
  std::string* _s = _internal_mutable_usersuppliedtag();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RemoveObjectInstance.userSuppliedTag)
  return _s;
}
inline const std::string& RemoveObjectInstance::_internal_usersuppliedtag() const {
  return _impl_.usersuppliedtag_.Get();
}
inline void RemoveObjectInstance::_internal_set_usersuppliedtag(const std::string& value) {
  
  _impl_.usersuppliedtag_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveObjectInstance::_internal_mutable_usersuppliedtag() {
  
  return _impl_.usersuppliedtag_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoveObjectInstance::release_usersuppliedtag() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RemoveObjectInstance.userSuppliedTag)
  return _impl_.usersuppliedtag_.Release();
}
inline void RemoveObjectInstance::set_allocated_usersuppliedtag(std::string* usersuppliedtag) {
  if (usersuppliedtag != nullptr) {
    
  } else {
    
  }
  _impl_.usersuppliedtag_.SetAllocated(usersuppliedtag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usersuppliedtag_.IsDefault()) {
    _impl_.usersuppliedtag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RemoveObjectInstance.userSuppliedTag)
}

// .rti1516_2025.fedpro.FederateHandle producingFederate = 3;
inline bool RemoveObjectInstance::_internal_has_producingfederate() const {
  return this != internal_default_instance() && _impl_.producingfederate_ != nullptr;
}
inline bool RemoveObjectInstance::has_producingfederate() const {
  return _internal_has_producingfederate();
}
inline const ::rti1516_2025::fedpro::FederateHandle& RemoveObjectInstance::_internal_producingfederate() const {
  const ::rti1516_2025::fedpro::FederateHandle* p = _impl_.producingfederate_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandle&>(
      ::rti1516_2025::fedpro::_FederateHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandle& RemoveObjectInstance::producingfederate() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RemoveObjectInstance.producingFederate)
  return _internal_producingfederate();
}
inline void RemoveObjectInstance::unsafe_arena_set_allocated_producingfederate(
    ::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  _impl_.producingfederate_ = producingfederate;
  if (producingfederate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.RemoveObjectInstance.producingFederate)
}
inline ::rti1516_2025::fedpro::FederateHandle* RemoveObjectInstance::release_producingfederate() {
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* RemoveObjectInstance::unsafe_arena_release_producingfederate() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RemoveObjectInstance.producingFederate)
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* RemoveObjectInstance::_internal_mutable_producingfederate() {
  
  if (_impl_.producingfederate_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(GetArenaForAllocation());
    _impl_.producingfederate_ = p;
  }
  return _impl_.producingfederate_;
}
inline ::rti1516_2025::fedpro::FederateHandle* RemoveObjectInstance::mutable_producingfederate() {
  ::rti1516_2025::fedpro::FederateHandle* _msg = _internal_mutable_producingfederate();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RemoveObjectInstance.producingFederate)
  return _msg;
}
inline void RemoveObjectInstance::set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  if (producingfederate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(producingfederate));
    if (message_arena != submessage_arena) {
      producingfederate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, producingfederate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.producingfederate_ = producingfederate;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RemoveObjectInstance.producingFederate)
}

// -------------------------------------------------------------------

// RemoveObjectInstanceWithTime

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool RemoveObjectInstanceWithTime::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool RemoveObjectInstanceWithTime::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& RemoveObjectInstanceWithTime::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& RemoveObjectInstanceWithTime::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.objectInstance)
  return _internal_objectinstance();
}
inline void RemoveObjectInstanceWithTime::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RemoveObjectInstanceWithTime::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RemoveObjectInstanceWithTime::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RemoveObjectInstanceWithTime::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RemoveObjectInstanceWithTime::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.objectInstance)
  return _msg;
}
inline void RemoveObjectInstanceWithTime::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.objectInstance)
}

// bytes userSuppliedTag = 2;
inline void RemoveObjectInstanceWithTime::clear_usersuppliedtag() {
  _impl_.usersuppliedtag_.ClearToEmpty();
}
inline const std::string& RemoveObjectInstanceWithTime::usersuppliedtag() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.userSuppliedTag)
  return _internal_usersuppliedtag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveObjectInstanceWithTime::set_usersuppliedtag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usersuppliedtag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.userSuppliedTag)
}
inline std::string* RemoveObjectInstanceWithTime::mutable_usersuppliedtag() {
  std::string* _s = _internal_mutable_usersuppliedtag();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.userSuppliedTag)
  return _s;
}
inline const std::string& RemoveObjectInstanceWithTime::_internal_usersuppliedtag() const {
  return _impl_.usersuppliedtag_.Get();
}
inline void RemoveObjectInstanceWithTime::_internal_set_usersuppliedtag(const std::string& value) {
  
  _impl_.usersuppliedtag_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveObjectInstanceWithTime::_internal_mutable_usersuppliedtag() {
  
  return _impl_.usersuppliedtag_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoveObjectInstanceWithTime::release_usersuppliedtag() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.userSuppliedTag)
  return _impl_.usersuppliedtag_.Release();
}
inline void RemoveObjectInstanceWithTime::set_allocated_usersuppliedtag(std::string* usersuppliedtag) {
  if (usersuppliedtag != nullptr) {
    
  } else {
    
  }
  _impl_.usersuppliedtag_.SetAllocated(usersuppliedtag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usersuppliedtag_.IsDefault()) {
    _impl_.usersuppliedtag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.userSuppliedTag)
}

// .rti1516_2025.fedpro.FederateHandle producingFederate = 3;
inline bool RemoveObjectInstanceWithTime::_internal_has_producingfederate() const {
  return this != internal_default_instance() && _impl_.producingfederate_ != nullptr;
}
inline bool RemoveObjectInstanceWithTime::has_producingfederate() const {
  return _internal_has_producingfederate();
}
inline const ::rti1516_2025::fedpro::FederateHandle& RemoveObjectInstanceWithTime::_internal_producingfederate() const {
  const ::rti1516_2025::fedpro::FederateHandle* p = _impl_.producingfederate_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandle&>(
      ::rti1516_2025::fedpro::_FederateHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandle& RemoveObjectInstanceWithTime::producingfederate() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.producingFederate)
  return _internal_producingfederate();
}
inline void RemoveObjectInstanceWithTime::unsafe_arena_set_allocated_producingfederate(
    ::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  _impl_.producingfederate_ = producingfederate;
  if (producingfederate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.producingFederate)
}
inline ::rti1516_2025::fedpro::FederateHandle* RemoveObjectInstanceWithTime::release_producingfederate() {
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* RemoveObjectInstanceWithTime::unsafe_arena_release_producingfederate() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.producingFederate)
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.producingfederate_;
  _impl_.producingfederate_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* RemoveObjectInstanceWithTime::_internal_mutable_producingfederate() {
  
  if (_impl_.producingfederate_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(GetArenaForAllocation());
    _impl_.producingfederate_ = p;
  }
  return _impl_.producingfederate_;
}
inline ::rti1516_2025::fedpro::FederateHandle* RemoveObjectInstanceWithTime::mutable_producingfederate() {
  ::rti1516_2025::fedpro::FederateHandle* _msg = _internal_mutable_producingfederate();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.producingFederate)
  return _msg;
}
inline void RemoveObjectInstanceWithTime::set_allocated_producingfederate(::rti1516_2025::fedpro::FederateHandle* producingfederate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.producingfederate_);
  }
  if (producingfederate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(producingfederate));
    if (message_arena != submessage_arena) {
      producingfederate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, producingfederate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.producingfederate_ = producingfederate;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.producingFederate)
}

// .rti1516_2025.fedpro.LogicalTime time = 4;
inline bool RemoveObjectInstanceWithTime::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool RemoveObjectInstanceWithTime::has_time() const {
  return _internal_has_time();
}
inline const ::rti1516_2025::fedpro::LogicalTime& RemoveObjectInstanceWithTime::_internal_time() const {
  const ::rti1516_2025::fedpro::LogicalTime* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::LogicalTime&>(
      ::rti1516_2025::fedpro::_LogicalTime_default_instance_);
}
inline const ::rti1516_2025::fedpro::LogicalTime& RemoveObjectInstanceWithTime::time() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.time)
  return _internal_time();
}
inline void RemoveObjectInstanceWithTime::unsafe_arena_set_allocated_time(
    ::rti1516_2025::fedpro::LogicalTime* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.time)
}
inline ::rti1516_2025::fedpro::LogicalTime* RemoveObjectInstanceWithTime::release_time() {
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* RemoveObjectInstanceWithTime::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.time)
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* RemoveObjectInstanceWithTime::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::LogicalTime>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::rti1516_2025::fedpro::LogicalTime* RemoveObjectInstanceWithTime::mutable_time() {
  ::rti1516_2025::fedpro::LogicalTime* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.time)
  return _msg;
}
inline void RemoveObjectInstanceWithTime::set_allocated_time(::rti1516_2025::fedpro::LogicalTime* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.time)
}

// .rti1516_2025.fedpro.OrderType sentOrderType = 5;
inline void RemoveObjectInstanceWithTime::clear_sentordertype() {
  _impl_.sentordertype_ = 0;
}
inline ::rti1516_2025::fedpro::OrderType RemoveObjectInstanceWithTime::_internal_sentordertype() const {
  return static_cast< ::rti1516_2025::fedpro::OrderType >(_impl_.sentordertype_);
}
inline ::rti1516_2025::fedpro::OrderType RemoveObjectInstanceWithTime::sentordertype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.sentOrderType)
  return _internal_sentordertype();
}
inline void RemoveObjectInstanceWithTime::_internal_set_sentordertype(::rti1516_2025::fedpro::OrderType value) {
  
  _impl_.sentordertype_ = value;
}
inline void RemoveObjectInstanceWithTime::set_sentordertype(::rti1516_2025::fedpro::OrderType value) {
  _internal_set_sentordertype(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.sentOrderType)
}

// .rti1516_2025.fedpro.OrderType receivedOrderType = 6;
inline void RemoveObjectInstanceWithTime::clear_receivedordertype() {
  _impl_.receivedordertype_ = 0;
}
inline ::rti1516_2025::fedpro::OrderType RemoveObjectInstanceWithTime::_internal_receivedordertype() const {
  return static_cast< ::rti1516_2025::fedpro::OrderType >(_impl_.receivedordertype_);
}
inline ::rti1516_2025::fedpro::OrderType RemoveObjectInstanceWithTime::receivedordertype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.receivedOrderType)
  return _internal_receivedordertype();
}
inline void RemoveObjectInstanceWithTime::_internal_set_receivedordertype(::rti1516_2025::fedpro::OrderType value) {
  
  _impl_.receivedordertype_ = value;
}
inline void RemoveObjectInstanceWithTime::set_receivedordertype(::rti1516_2025::fedpro::OrderType value) {
  _internal_set_receivedordertype(value);
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.receivedOrderType)
}

// .rti1516_2025.fedpro.MessageRetractionHandle optionalRetraction = 7;
inline bool RemoveObjectInstanceWithTime::_internal_has_optionalretraction() const {
  return this != internal_default_instance() && _impl_.optionalretraction_ != nullptr;
}
inline bool RemoveObjectInstanceWithTime::has_optionalretraction() const {
  return _internal_has_optionalretraction();
}
inline const ::rti1516_2025::fedpro::MessageRetractionHandle& RemoveObjectInstanceWithTime::_internal_optionalretraction() const {
  const ::rti1516_2025::fedpro::MessageRetractionHandle* p = _impl_.optionalretraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::MessageRetractionHandle&>(
      ::rti1516_2025::fedpro::_MessageRetractionHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::MessageRetractionHandle& RemoveObjectInstanceWithTime::optionalretraction() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.optionalRetraction)
  return _internal_optionalretraction();
}
inline void RemoveObjectInstanceWithTime::unsafe_arena_set_allocated_optionalretraction(
    ::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionalretraction_);
  }
  _impl_.optionalretraction_ = optionalretraction;
  if (optionalretraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.optionalRetraction)
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* RemoveObjectInstanceWithTime::release_optionalretraction() {
  
  ::rti1516_2025::fedpro::MessageRetractionHandle* temp = _impl_.optionalretraction_;
  _impl_.optionalretraction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* RemoveObjectInstanceWithTime::unsafe_arena_release_optionalretraction() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.optionalRetraction)
  
  ::rti1516_2025::fedpro::MessageRetractionHandle* temp = _impl_.optionalretraction_;
  _impl_.optionalretraction_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* RemoveObjectInstanceWithTime::_internal_mutable_optionalretraction() {
  
  if (_impl_.optionalretraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::MessageRetractionHandle>(GetArenaForAllocation());
    _impl_.optionalretraction_ = p;
  }
  return _impl_.optionalretraction_;
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* RemoveObjectInstanceWithTime::mutable_optionalretraction() {
  ::rti1516_2025::fedpro::MessageRetractionHandle* _msg = _internal_mutable_optionalretraction();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.optionalRetraction)
  return _msg;
}
inline void RemoveObjectInstanceWithTime::set_allocated_optionalretraction(::rti1516_2025::fedpro::MessageRetractionHandle* optionalretraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optionalretraction_);
  }
  if (optionalretraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optionalretraction));
    if (message_arena != submessage_arena) {
      optionalretraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optionalretraction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.optionalretraction_ = optionalretraction;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RemoveObjectInstanceWithTime.optionalRetraction)
}

// -------------------------------------------------------------------

// AttributesInScope

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool AttributesInScope::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool AttributesInScope::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& AttributesInScope::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& AttributesInScope::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributesInScope.objectInstance)
  return _internal_objectinstance();
}
inline void AttributesInScope::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.AttributesInScope.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributesInScope::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributesInScope::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributesInScope.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributesInScope::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributesInScope::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributesInScope.objectInstance)
  return _msg;
}
inline void AttributesInScope::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributesInScope.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
inline bool AttributesInScope::_internal_has_attributes() const {
  return this != internal_default_instance() && _impl_.attributes_ != nullptr;
}
inline bool AttributesInScope::has_attributes() const {
  return _internal_has_attributes();
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& AttributesInScope::_internal_attributes() const {
  const ::rti1516_2025::fedpro::AttributeHandleSet* p = _impl_.attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleSet&>(
      ::rti1516_2025::fedpro::_AttributeHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& AttributesInScope::attributes() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributesInScope.attributes)
  return _internal_attributes();
}
inline void AttributesInScope::unsafe_arena_set_allocated_attributes(
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  _impl_.attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.AttributesInScope.attributes)
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributesInScope::release_attributes() {
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributesInScope::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributesInScope.attributes)
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributesInScope::_internal_mutable_attributes() {
  
  if (_impl_.attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleSet>(GetArenaForAllocation());
    _impl_.attributes_ = p;
  }
  return _impl_.attributes_;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributesInScope::mutable_attributes() {
  ::rti1516_2025::fedpro::AttributeHandleSet* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributesInScope.attributes)
  return _msg;
}
inline void AttributesInScope::set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes));
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributesInScope.attributes)
}

// -------------------------------------------------------------------

// AttributesOutOfScope

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool AttributesOutOfScope::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool AttributesOutOfScope::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& AttributesOutOfScope::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& AttributesOutOfScope::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributesOutOfScope.objectInstance)
  return _internal_objectinstance();
}
inline void AttributesOutOfScope::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.AttributesOutOfScope.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributesOutOfScope::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributesOutOfScope::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributesOutOfScope.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributesOutOfScope::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributesOutOfScope::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributesOutOfScope.objectInstance)
  return _msg;
}
inline void AttributesOutOfScope::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributesOutOfScope.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
inline bool AttributesOutOfScope::_internal_has_attributes() const {
  return this != internal_default_instance() && _impl_.attributes_ != nullptr;
}
inline bool AttributesOutOfScope::has_attributes() const {
  return _internal_has_attributes();
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& AttributesOutOfScope::_internal_attributes() const {
  const ::rti1516_2025::fedpro::AttributeHandleSet* p = _impl_.attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleSet&>(
      ::rti1516_2025::fedpro::_AttributeHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& AttributesOutOfScope::attributes() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributesOutOfScope.attributes)
  return _internal_attributes();
}
inline void AttributesOutOfScope::unsafe_arena_set_allocated_attributes(
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  _impl_.attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.AttributesOutOfScope.attributes)
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributesOutOfScope::release_attributes() {
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributesOutOfScope::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributesOutOfScope.attributes)
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributesOutOfScope::_internal_mutable_attributes() {
  
  if (_impl_.attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleSet>(GetArenaForAllocation());
    _impl_.attributes_ = p;
  }
  return _impl_.attributes_;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributesOutOfScope::mutable_attributes() {
  ::rti1516_2025::fedpro::AttributeHandleSet* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributesOutOfScope.attributes)
  return _msg;
}
inline void AttributesOutOfScope::set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes));
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributesOutOfScope.attributes)
}

// -------------------------------------------------------------------

// ProvideAttributeValueUpdate

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool ProvideAttributeValueUpdate::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool ProvideAttributeValueUpdate::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& ProvideAttributeValueUpdate::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& ProvideAttributeValueUpdate::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ProvideAttributeValueUpdate.objectInstance)
  return _internal_objectinstance();
}
inline void ProvideAttributeValueUpdate::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ProvideAttributeValueUpdate.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ProvideAttributeValueUpdate::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ProvideAttributeValueUpdate::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ProvideAttributeValueUpdate.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ProvideAttributeValueUpdate::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ProvideAttributeValueUpdate::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ProvideAttributeValueUpdate.objectInstance)
  return _msg;
}
inline void ProvideAttributeValueUpdate::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ProvideAttributeValueUpdate.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
inline bool ProvideAttributeValueUpdate::_internal_has_attributes() const {
  return this != internal_default_instance() && _impl_.attributes_ != nullptr;
}
inline bool ProvideAttributeValueUpdate::has_attributes() const {
  return _internal_has_attributes();
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& ProvideAttributeValueUpdate::_internal_attributes() const {
  const ::rti1516_2025::fedpro::AttributeHandleSet* p = _impl_.attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleSet&>(
      ::rti1516_2025::fedpro::_AttributeHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& ProvideAttributeValueUpdate::attributes() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ProvideAttributeValueUpdate.attributes)
  return _internal_attributes();
}
inline void ProvideAttributeValueUpdate::unsafe_arena_set_allocated_attributes(
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  _impl_.attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ProvideAttributeValueUpdate.attributes)
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* ProvideAttributeValueUpdate::release_attributes() {
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* ProvideAttributeValueUpdate::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ProvideAttributeValueUpdate.attributes)
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* ProvideAttributeValueUpdate::_internal_mutable_attributes() {
  
  if (_impl_.attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleSet>(GetArenaForAllocation());
    _impl_.attributes_ = p;
  }
  return _impl_.attributes_;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* ProvideAttributeValueUpdate::mutable_attributes() {
  ::rti1516_2025::fedpro::AttributeHandleSet* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ProvideAttributeValueUpdate.attributes)
  return _msg;
}
inline void ProvideAttributeValueUpdate::set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes));
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ProvideAttributeValueUpdate.attributes)
}

// bytes userSuppliedTag = 3;
inline void ProvideAttributeValueUpdate::clear_usersuppliedtag() {
  _impl_.usersuppliedtag_.ClearToEmpty();
}
inline const std::string& ProvideAttributeValueUpdate::usersuppliedtag() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ProvideAttributeValueUpdate.userSuppliedTag)
  return _internal_usersuppliedtag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProvideAttributeValueUpdate::set_usersuppliedtag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usersuppliedtag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.ProvideAttributeValueUpdate.userSuppliedTag)
}
inline std::string* ProvideAttributeValueUpdate::mutable_usersuppliedtag() {
  std::string* _s = _internal_mutable_usersuppliedtag();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ProvideAttributeValueUpdate.userSuppliedTag)
  return _s;
}
inline const std::string& ProvideAttributeValueUpdate::_internal_usersuppliedtag() const {
  return _impl_.usersuppliedtag_.Get();
}
inline void ProvideAttributeValueUpdate::_internal_set_usersuppliedtag(const std::string& value) {
  
  _impl_.usersuppliedtag_.Set(value, GetArenaForAllocation());
}
inline std::string* ProvideAttributeValueUpdate::_internal_mutable_usersuppliedtag() {
  
  return _impl_.usersuppliedtag_.Mutable(GetArenaForAllocation());
}
inline std::string* ProvideAttributeValueUpdate::release_usersuppliedtag() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ProvideAttributeValueUpdate.userSuppliedTag)
  return _impl_.usersuppliedtag_.Release();
}
inline void ProvideAttributeValueUpdate::set_allocated_usersuppliedtag(std::string* usersuppliedtag) {
  if (usersuppliedtag != nullptr) {
    
  } else {
    
  }
  _impl_.usersuppliedtag_.SetAllocated(usersuppliedtag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usersuppliedtag_.IsDefault()) {
    _impl_.usersuppliedtag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ProvideAttributeValueUpdate.userSuppliedTag)
}

// -------------------------------------------------------------------

// TurnUpdatesOnForObjectInstance

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool TurnUpdatesOnForObjectInstance::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool TurnUpdatesOnForObjectInstance::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& TurnUpdatesOnForObjectInstance::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& TurnUpdatesOnForObjectInstance::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstance.objectInstance)
  return _internal_objectinstance();
}
inline void TurnUpdatesOnForObjectInstance::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstance.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* TurnUpdatesOnForObjectInstance::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* TurnUpdatesOnForObjectInstance::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstance.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* TurnUpdatesOnForObjectInstance::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* TurnUpdatesOnForObjectInstance::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstance.objectInstance)
  return _msg;
}
inline void TurnUpdatesOnForObjectInstance::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstance.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
inline bool TurnUpdatesOnForObjectInstance::_internal_has_attributes() const {
  return this != internal_default_instance() && _impl_.attributes_ != nullptr;
}
inline bool TurnUpdatesOnForObjectInstance::has_attributes() const {
  return _internal_has_attributes();
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& TurnUpdatesOnForObjectInstance::_internal_attributes() const {
  const ::rti1516_2025::fedpro::AttributeHandleSet* p = _impl_.attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleSet&>(
      ::rti1516_2025::fedpro::_AttributeHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& TurnUpdatesOnForObjectInstance::attributes() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstance.attributes)
  return _internal_attributes();
}
inline void TurnUpdatesOnForObjectInstance::unsafe_arena_set_allocated_attributes(
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  _impl_.attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstance.attributes)
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* TurnUpdatesOnForObjectInstance::release_attributes() {
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* TurnUpdatesOnForObjectInstance::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstance.attributes)
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* TurnUpdatesOnForObjectInstance::_internal_mutable_attributes() {
  
  if (_impl_.attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleSet>(GetArenaForAllocation());
    _impl_.attributes_ = p;
  }
  return _impl_.attributes_;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* TurnUpdatesOnForObjectInstance::mutable_attributes() {
  ::rti1516_2025::fedpro::AttributeHandleSet* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstance.attributes)
  return _msg;
}
inline void TurnUpdatesOnForObjectInstance::set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes));
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstance.attributes)
}

// -------------------------------------------------------------------

// TurnUpdatesOnForObjectInstanceWithRate

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool TurnUpdatesOnForObjectInstanceWithRate::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool TurnUpdatesOnForObjectInstanceWithRate::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& TurnUpdatesOnForObjectInstanceWithRate::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& TurnUpdatesOnForObjectInstanceWithRate::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate.objectInstance)
  return _internal_objectinstance();
}
inline void TurnUpdatesOnForObjectInstanceWithRate::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* TurnUpdatesOnForObjectInstanceWithRate::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* TurnUpdatesOnForObjectInstanceWithRate::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* TurnUpdatesOnForObjectInstanceWithRate::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* TurnUpdatesOnForObjectInstanceWithRate::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate.objectInstance)
  return _msg;
}
inline void TurnUpdatesOnForObjectInstanceWithRate::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
inline bool TurnUpdatesOnForObjectInstanceWithRate::_internal_has_attributes() const {
  return this != internal_default_instance() && _impl_.attributes_ != nullptr;
}
inline bool TurnUpdatesOnForObjectInstanceWithRate::has_attributes() const {
  return _internal_has_attributes();
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& TurnUpdatesOnForObjectInstanceWithRate::_internal_attributes() const {
  const ::rti1516_2025::fedpro::AttributeHandleSet* p = _impl_.attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleSet&>(
      ::rti1516_2025::fedpro::_AttributeHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& TurnUpdatesOnForObjectInstanceWithRate::attributes() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate.attributes)
  return _internal_attributes();
}
inline void TurnUpdatesOnForObjectInstanceWithRate::unsafe_arena_set_allocated_attributes(
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  _impl_.attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate.attributes)
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* TurnUpdatesOnForObjectInstanceWithRate::release_attributes() {
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* TurnUpdatesOnForObjectInstanceWithRate::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate.attributes)
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* TurnUpdatesOnForObjectInstanceWithRate::_internal_mutable_attributes() {
  
  if (_impl_.attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleSet>(GetArenaForAllocation());
    _impl_.attributes_ = p;
  }
  return _impl_.attributes_;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* TurnUpdatesOnForObjectInstanceWithRate::mutable_attributes() {
  ::rti1516_2025::fedpro::AttributeHandleSet* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate.attributes)
  return _msg;
}
inline void TurnUpdatesOnForObjectInstanceWithRate::set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes));
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate.attributes)
}

// string updateRateDesignator = 3;
inline void TurnUpdatesOnForObjectInstanceWithRate::clear_updateratedesignator() {
  _impl_.updateratedesignator_.ClearToEmpty();
}
inline const std::string& TurnUpdatesOnForObjectInstanceWithRate::updateratedesignator() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate.updateRateDesignator)
  return _internal_updateratedesignator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TurnUpdatesOnForObjectInstanceWithRate::set_updateratedesignator(ArgT0&& arg0, ArgT... args) {
 
 _impl_.updateratedesignator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate.updateRateDesignator)
}
inline std::string* TurnUpdatesOnForObjectInstanceWithRate::mutable_updateratedesignator() {
  std::string* _s = _internal_mutable_updateratedesignator();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate.updateRateDesignator)
  return _s;
}
inline const std::string& TurnUpdatesOnForObjectInstanceWithRate::_internal_updateratedesignator() const {
  return _impl_.updateratedesignator_.Get();
}
inline void TurnUpdatesOnForObjectInstanceWithRate::_internal_set_updateratedesignator(const std::string& value) {
  
  _impl_.updateratedesignator_.Set(value, GetArenaForAllocation());
}
inline std::string* TurnUpdatesOnForObjectInstanceWithRate::_internal_mutable_updateratedesignator() {
  
  return _impl_.updateratedesignator_.Mutable(GetArenaForAllocation());
}
inline std::string* TurnUpdatesOnForObjectInstanceWithRate::release_updateratedesignator() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate.updateRateDesignator)
  return _impl_.updateratedesignator_.Release();
}
inline void TurnUpdatesOnForObjectInstanceWithRate::set_allocated_updateratedesignator(std::string* updateratedesignator) {
  if (updateratedesignator != nullptr) {
    
  } else {
    
  }
  _impl_.updateratedesignator_.SetAllocated(updateratedesignator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.updateratedesignator_.IsDefault()) {
    _impl_.updateratedesignator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate.updateRateDesignator)
}

// -------------------------------------------------------------------

// TurnUpdatesOffForObjectInstance

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool TurnUpdatesOffForObjectInstance::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool TurnUpdatesOffForObjectInstance::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& TurnUpdatesOffForObjectInstance::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& TurnUpdatesOffForObjectInstance::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.TurnUpdatesOffForObjectInstance.objectInstance)
  return _internal_objectinstance();
}
inline void TurnUpdatesOffForObjectInstance::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.TurnUpdatesOffForObjectInstance.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* TurnUpdatesOffForObjectInstance::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* TurnUpdatesOffForObjectInstance::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.TurnUpdatesOffForObjectInstance.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* TurnUpdatesOffForObjectInstance::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* TurnUpdatesOffForObjectInstance::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.TurnUpdatesOffForObjectInstance.objectInstance)
  return _msg;
}
inline void TurnUpdatesOffForObjectInstance::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.TurnUpdatesOffForObjectInstance.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
inline bool TurnUpdatesOffForObjectInstance::_internal_has_attributes() const {
  return this != internal_default_instance() && _impl_.attributes_ != nullptr;
}
inline bool TurnUpdatesOffForObjectInstance::has_attributes() const {
  return _internal_has_attributes();
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& TurnUpdatesOffForObjectInstance::_internal_attributes() const {
  const ::rti1516_2025::fedpro::AttributeHandleSet* p = _impl_.attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleSet&>(
      ::rti1516_2025::fedpro::_AttributeHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& TurnUpdatesOffForObjectInstance::attributes() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.TurnUpdatesOffForObjectInstance.attributes)
  return _internal_attributes();
}
inline void TurnUpdatesOffForObjectInstance::unsafe_arena_set_allocated_attributes(
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  _impl_.attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.TurnUpdatesOffForObjectInstance.attributes)
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* TurnUpdatesOffForObjectInstance::release_attributes() {
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* TurnUpdatesOffForObjectInstance::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.TurnUpdatesOffForObjectInstance.attributes)
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* TurnUpdatesOffForObjectInstance::_internal_mutable_attributes() {
  
  if (_impl_.attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleSet>(GetArenaForAllocation());
    _impl_.attributes_ = p;
  }
  return _impl_.attributes_;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* TurnUpdatesOffForObjectInstance::mutable_attributes() {
  ::rti1516_2025::fedpro::AttributeHandleSet* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.TurnUpdatesOffForObjectInstance.attributes)
  return _msg;
}
inline void TurnUpdatesOffForObjectInstance::set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes));
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.TurnUpdatesOffForObjectInstance.attributes)
}

// -------------------------------------------------------------------

// ConfirmAttributeTransportationTypeChange

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool ConfirmAttributeTransportationTypeChange::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool ConfirmAttributeTransportationTypeChange::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& ConfirmAttributeTransportationTypeChange::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& ConfirmAttributeTransportationTypeChange::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange.objectInstance)
  return _internal_objectinstance();
}
inline void ConfirmAttributeTransportationTypeChange::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ConfirmAttributeTransportationTypeChange::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ConfirmAttributeTransportationTypeChange::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ConfirmAttributeTransportationTypeChange::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ConfirmAttributeTransportationTypeChange::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange.objectInstance)
  return _msg;
}
inline void ConfirmAttributeTransportationTypeChange::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
inline bool ConfirmAttributeTransportationTypeChange::_internal_has_attributes() const {
  return this != internal_default_instance() && _impl_.attributes_ != nullptr;
}
inline bool ConfirmAttributeTransportationTypeChange::has_attributes() const {
  return _internal_has_attributes();
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& ConfirmAttributeTransportationTypeChange::_internal_attributes() const {
  const ::rti1516_2025::fedpro::AttributeHandleSet* p = _impl_.attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleSet&>(
      ::rti1516_2025::fedpro::_AttributeHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& ConfirmAttributeTransportationTypeChange::attributes() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange.attributes)
  return _internal_attributes();
}
inline void ConfirmAttributeTransportationTypeChange::unsafe_arena_set_allocated_attributes(
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  _impl_.attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange.attributes)
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* ConfirmAttributeTransportationTypeChange::release_attributes() {
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* ConfirmAttributeTransportationTypeChange::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange.attributes)
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* ConfirmAttributeTransportationTypeChange::_internal_mutable_attributes() {
  
  if (_impl_.attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleSet>(GetArenaForAllocation());
    _impl_.attributes_ = p;
  }
  return _impl_.attributes_;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* ConfirmAttributeTransportationTypeChange::mutable_attributes() {
  ::rti1516_2025::fedpro::AttributeHandleSet* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange.attributes)
  return _msg;
}
inline void ConfirmAttributeTransportationTypeChange::set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes));
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange.attributes)
}

// .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 3;
inline bool ConfirmAttributeTransportationTypeChange::_internal_has_transportationtype() const {
  return this != internal_default_instance() && _impl_.transportationtype_ != nullptr;
}
inline bool ConfirmAttributeTransportationTypeChange::has_transportationtype() const {
  return _internal_has_transportationtype();
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ConfirmAttributeTransportationTypeChange::_internal_transportationtype() const {
  const ::rti1516_2025::fedpro::TransportationTypeHandle* p = _impl_.transportationtype_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::TransportationTypeHandle&>(
      ::rti1516_2025::fedpro::_TransportationTypeHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ConfirmAttributeTransportationTypeChange::transportationtype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange.transportationType)
  return _internal_transportationtype();
}
inline void ConfirmAttributeTransportationTypeChange::unsafe_arena_set_allocated_transportationtype(
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  _impl_.transportationtype_ = transportationtype;
  if (transportationtype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange.transportationType)
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ConfirmAttributeTransportationTypeChange::release_transportationtype() {
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ConfirmAttributeTransportationTypeChange::unsafe_arena_release_transportationtype() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange.transportationType)
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ConfirmAttributeTransportationTypeChange::_internal_mutable_transportationtype() {
  
  if (_impl_.transportationtype_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::TransportationTypeHandle>(GetArenaForAllocation());
    _impl_.transportationtype_ = p;
  }
  return _impl_.transportationtype_;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ConfirmAttributeTransportationTypeChange::mutable_transportationtype() {
  ::rti1516_2025::fedpro::TransportationTypeHandle* _msg = _internal_mutable_transportationtype();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange.transportationType)
  return _msg;
}
inline void ConfirmAttributeTransportationTypeChange::set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  if (transportationtype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transportationtype));
    if (message_arena != submessage_arena) {
      transportationtype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transportationtype, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transportationtype_ = transportationtype;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange.transportationType)
}

// -------------------------------------------------------------------

// ReportAttributeTransportationType

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool ReportAttributeTransportationType::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool ReportAttributeTransportationType::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& ReportAttributeTransportationType::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& ReportAttributeTransportationType::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReportAttributeTransportationType.objectInstance)
  return _internal_objectinstance();
}
inline void ReportAttributeTransportationType::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReportAttributeTransportationType.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReportAttributeTransportationType::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReportAttributeTransportationType::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReportAttributeTransportationType.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReportAttributeTransportationType::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ReportAttributeTransportationType::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReportAttributeTransportationType.objectInstance)
  return _msg;
}
inline void ReportAttributeTransportationType::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReportAttributeTransportationType.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandle attribute = 2;
inline bool ReportAttributeTransportationType::_internal_has_attribute() const {
  return this != internal_default_instance() && _impl_.attribute_ != nullptr;
}
inline bool ReportAttributeTransportationType::has_attribute() const {
  return _internal_has_attribute();
}
inline const ::rti1516_2025::fedpro::AttributeHandle& ReportAttributeTransportationType::_internal_attribute() const {
  const ::rti1516_2025::fedpro::AttributeHandle* p = _impl_.attribute_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandle&>(
      ::rti1516_2025::fedpro::_AttributeHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandle& ReportAttributeTransportationType::attribute() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReportAttributeTransportationType.attribute)
  return _internal_attribute();
}
inline void ReportAttributeTransportationType::unsafe_arena_set_allocated_attribute(
    ::rti1516_2025::fedpro::AttributeHandle* attribute) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attribute_);
  }
  _impl_.attribute_ = attribute;
  if (attribute) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReportAttributeTransportationType.attribute)
}
inline ::rti1516_2025::fedpro::AttributeHandle* ReportAttributeTransportationType::release_attribute() {
  
  ::rti1516_2025::fedpro::AttributeHandle* temp = _impl_.attribute_;
  _impl_.attribute_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandle* ReportAttributeTransportationType::unsafe_arena_release_attribute() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReportAttributeTransportationType.attribute)
  
  ::rti1516_2025::fedpro::AttributeHandle* temp = _impl_.attribute_;
  _impl_.attribute_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandle* ReportAttributeTransportationType::_internal_mutable_attribute() {
  
  if (_impl_.attribute_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandle>(GetArenaForAllocation());
    _impl_.attribute_ = p;
  }
  return _impl_.attribute_;
}
inline ::rti1516_2025::fedpro::AttributeHandle* ReportAttributeTransportationType::mutable_attribute() {
  ::rti1516_2025::fedpro::AttributeHandle* _msg = _internal_mutable_attribute();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReportAttributeTransportationType.attribute)
  return _msg;
}
inline void ReportAttributeTransportationType::set_allocated_attribute(::rti1516_2025::fedpro::AttributeHandle* attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attribute_);
  }
  if (attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attribute));
    if (message_arena != submessage_arena) {
      attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attribute, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attribute_ = attribute;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReportAttributeTransportationType.attribute)
}

// .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 3;
inline bool ReportAttributeTransportationType::_internal_has_transportationtype() const {
  return this != internal_default_instance() && _impl_.transportationtype_ != nullptr;
}
inline bool ReportAttributeTransportationType::has_transportationtype() const {
  return _internal_has_transportationtype();
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ReportAttributeTransportationType::_internal_transportationtype() const {
  const ::rti1516_2025::fedpro::TransportationTypeHandle* p = _impl_.transportationtype_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::TransportationTypeHandle&>(
      ::rti1516_2025::fedpro::_TransportationTypeHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ReportAttributeTransportationType::transportationtype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReportAttributeTransportationType.transportationType)
  return _internal_transportationtype();
}
inline void ReportAttributeTransportationType::unsafe_arena_set_allocated_transportationtype(
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  _impl_.transportationtype_ = transportationtype;
  if (transportationtype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReportAttributeTransportationType.transportationType)
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReportAttributeTransportationType::release_transportationtype() {
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReportAttributeTransportationType::unsafe_arena_release_transportationtype() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReportAttributeTransportationType.transportationType)
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReportAttributeTransportationType::_internal_mutable_transportationtype() {
  
  if (_impl_.transportationtype_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::TransportationTypeHandle>(GetArenaForAllocation());
    _impl_.transportationtype_ = p;
  }
  return _impl_.transportationtype_;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReportAttributeTransportationType::mutable_transportationtype() {
  ::rti1516_2025::fedpro::TransportationTypeHandle* _msg = _internal_mutable_transportationtype();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReportAttributeTransportationType.transportationType)
  return _msg;
}
inline void ReportAttributeTransportationType::set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  if (transportationtype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transportationtype));
    if (message_arena != submessage_arena) {
      transportationtype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transportationtype, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transportationtype_ = transportationtype;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReportAttributeTransportationType.transportationType)
}

// -------------------------------------------------------------------

// ConfirmInteractionTransportationTypeChange

// .rti1516_2025.fedpro.InteractionClassHandle interactionClass = 1;
inline bool ConfirmInteractionTransportationTypeChange::_internal_has_interactionclass() const {
  return this != internal_default_instance() && _impl_.interactionclass_ != nullptr;
}
inline bool ConfirmInteractionTransportationTypeChange::has_interactionclass() const {
  return _internal_has_interactionclass();
}
inline const ::rti1516_2025::fedpro::InteractionClassHandle& ConfirmInteractionTransportationTypeChange::_internal_interactionclass() const {
  const ::rti1516_2025::fedpro::InteractionClassHandle* p = _impl_.interactionclass_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::InteractionClassHandle&>(
      ::rti1516_2025::fedpro::_InteractionClassHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::InteractionClassHandle& ConfirmInteractionTransportationTypeChange::interactionclass() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ConfirmInteractionTransportationTypeChange.interactionClass)
  return _internal_interactionclass();
}
inline void ConfirmInteractionTransportationTypeChange::unsafe_arena_set_allocated_interactionclass(
    ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactionclass_);
  }
  _impl_.interactionclass_ = interactionclass;
  if (interactionclass) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ConfirmInteractionTransportationTypeChange.interactionClass)
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ConfirmInteractionTransportationTypeChange::release_interactionclass() {
  
  ::rti1516_2025::fedpro::InteractionClassHandle* temp = _impl_.interactionclass_;
  _impl_.interactionclass_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ConfirmInteractionTransportationTypeChange::unsafe_arena_release_interactionclass() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ConfirmInteractionTransportationTypeChange.interactionClass)
  
  ::rti1516_2025::fedpro::InteractionClassHandle* temp = _impl_.interactionclass_;
  _impl_.interactionclass_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ConfirmInteractionTransportationTypeChange::_internal_mutable_interactionclass() {
  
  if (_impl_.interactionclass_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::InteractionClassHandle>(GetArenaForAllocation());
    _impl_.interactionclass_ = p;
  }
  return _impl_.interactionclass_;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ConfirmInteractionTransportationTypeChange::mutable_interactionclass() {
  ::rti1516_2025::fedpro::InteractionClassHandle* _msg = _internal_mutable_interactionclass();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ConfirmInteractionTransportationTypeChange.interactionClass)
  return _msg;
}
inline void ConfirmInteractionTransportationTypeChange::set_allocated_interactionclass(::rti1516_2025::fedpro::InteractionClassHandle* interactionclass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactionclass_);
  }
  if (interactionclass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interactionclass));
    if (message_arena != submessage_arena) {
      interactionclass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interactionclass, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interactionclass_ = interactionclass;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ConfirmInteractionTransportationTypeChange.interactionClass)
}

// .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 2;
inline bool ConfirmInteractionTransportationTypeChange::_internal_has_transportationtype() const {
  return this != internal_default_instance() && _impl_.transportationtype_ != nullptr;
}
inline bool ConfirmInteractionTransportationTypeChange::has_transportationtype() const {
  return _internal_has_transportationtype();
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ConfirmInteractionTransportationTypeChange::_internal_transportationtype() const {
  const ::rti1516_2025::fedpro::TransportationTypeHandle* p = _impl_.transportationtype_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::TransportationTypeHandle&>(
      ::rti1516_2025::fedpro::_TransportationTypeHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ConfirmInteractionTransportationTypeChange::transportationtype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ConfirmInteractionTransportationTypeChange.transportationType)
  return _internal_transportationtype();
}
inline void ConfirmInteractionTransportationTypeChange::unsafe_arena_set_allocated_transportationtype(
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  _impl_.transportationtype_ = transportationtype;
  if (transportationtype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ConfirmInteractionTransportationTypeChange.transportationType)
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ConfirmInteractionTransportationTypeChange::release_transportationtype() {
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ConfirmInteractionTransportationTypeChange::unsafe_arena_release_transportationtype() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ConfirmInteractionTransportationTypeChange.transportationType)
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ConfirmInteractionTransportationTypeChange::_internal_mutable_transportationtype() {
  
  if (_impl_.transportationtype_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::TransportationTypeHandle>(GetArenaForAllocation());
    _impl_.transportationtype_ = p;
  }
  return _impl_.transportationtype_;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ConfirmInteractionTransportationTypeChange::mutable_transportationtype() {
  ::rti1516_2025::fedpro::TransportationTypeHandle* _msg = _internal_mutable_transportationtype();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ConfirmInteractionTransportationTypeChange.transportationType)
  return _msg;
}
inline void ConfirmInteractionTransportationTypeChange::set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  if (transportationtype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transportationtype));
    if (message_arena != submessage_arena) {
      transportationtype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transportationtype, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transportationtype_ = transportationtype;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ConfirmInteractionTransportationTypeChange.transportationType)
}

// -------------------------------------------------------------------

// ReportInteractionTransportationType

// .rti1516_2025.fedpro.FederateHandle federate = 1;
inline bool ReportInteractionTransportationType::_internal_has_federate() const {
  return this != internal_default_instance() && _impl_.federate_ != nullptr;
}
inline bool ReportInteractionTransportationType::has_federate() const {
  return _internal_has_federate();
}
inline const ::rti1516_2025::fedpro::FederateHandle& ReportInteractionTransportationType::_internal_federate() const {
  const ::rti1516_2025::fedpro::FederateHandle* p = _impl_.federate_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandle&>(
      ::rti1516_2025::fedpro::_FederateHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandle& ReportInteractionTransportationType::federate() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReportInteractionTransportationType.federate)
  return _internal_federate();
}
inline void ReportInteractionTransportationType::unsafe_arena_set_allocated_federate(
    ::rti1516_2025::fedpro::FederateHandle* federate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.federate_);
  }
  _impl_.federate_ = federate;
  if (federate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReportInteractionTransportationType.federate)
}
inline ::rti1516_2025::fedpro::FederateHandle* ReportInteractionTransportationType::release_federate() {
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.federate_;
  _impl_.federate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReportInteractionTransportationType::unsafe_arena_release_federate() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReportInteractionTransportationType.federate)
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.federate_;
  _impl_.federate_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReportInteractionTransportationType::_internal_mutable_federate() {
  
  if (_impl_.federate_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(GetArenaForAllocation());
    _impl_.federate_ = p;
  }
  return _impl_.federate_;
}
inline ::rti1516_2025::fedpro::FederateHandle* ReportInteractionTransportationType::mutable_federate() {
  ::rti1516_2025::fedpro::FederateHandle* _msg = _internal_mutable_federate();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReportInteractionTransportationType.federate)
  return _msg;
}
inline void ReportInteractionTransportationType::set_allocated_federate(::rti1516_2025::fedpro::FederateHandle* federate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.federate_);
  }
  if (federate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(federate));
    if (message_arena != submessage_arena) {
      federate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, federate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.federate_ = federate;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReportInteractionTransportationType.federate)
}

// .rti1516_2025.fedpro.InteractionClassHandle interactionClass = 2;
inline bool ReportInteractionTransportationType::_internal_has_interactionclass() const {
  return this != internal_default_instance() && _impl_.interactionclass_ != nullptr;
}
inline bool ReportInteractionTransportationType::has_interactionclass() const {
  return _internal_has_interactionclass();
}
inline const ::rti1516_2025::fedpro::InteractionClassHandle& ReportInteractionTransportationType::_internal_interactionclass() const {
  const ::rti1516_2025::fedpro::InteractionClassHandle* p = _impl_.interactionclass_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::InteractionClassHandle&>(
      ::rti1516_2025::fedpro::_InteractionClassHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::InteractionClassHandle& ReportInteractionTransportationType::interactionclass() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReportInteractionTransportationType.interactionClass)
  return _internal_interactionclass();
}
inline void ReportInteractionTransportationType::unsafe_arena_set_allocated_interactionclass(
    ::rti1516_2025::fedpro::InteractionClassHandle* interactionclass) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactionclass_);
  }
  _impl_.interactionclass_ = interactionclass;
  if (interactionclass) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReportInteractionTransportationType.interactionClass)
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReportInteractionTransportationType::release_interactionclass() {
  
  ::rti1516_2025::fedpro::InteractionClassHandle* temp = _impl_.interactionclass_;
  _impl_.interactionclass_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReportInteractionTransportationType::unsafe_arena_release_interactionclass() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReportInteractionTransportationType.interactionClass)
  
  ::rti1516_2025::fedpro::InteractionClassHandle* temp = _impl_.interactionclass_;
  _impl_.interactionclass_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReportInteractionTransportationType::_internal_mutable_interactionclass() {
  
  if (_impl_.interactionclass_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::InteractionClassHandle>(GetArenaForAllocation());
    _impl_.interactionclass_ = p;
  }
  return _impl_.interactionclass_;
}
inline ::rti1516_2025::fedpro::InteractionClassHandle* ReportInteractionTransportationType::mutable_interactionclass() {
  ::rti1516_2025::fedpro::InteractionClassHandle* _msg = _internal_mutable_interactionclass();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReportInteractionTransportationType.interactionClass)
  return _msg;
}
inline void ReportInteractionTransportationType::set_allocated_interactionclass(::rti1516_2025::fedpro::InteractionClassHandle* interactionclass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.interactionclass_);
  }
  if (interactionclass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interactionclass));
    if (message_arena != submessage_arena) {
      interactionclass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interactionclass, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.interactionclass_ = interactionclass;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReportInteractionTransportationType.interactionClass)
}

// .rti1516_2025.fedpro.TransportationTypeHandle transportationType = 3;
inline bool ReportInteractionTransportationType::_internal_has_transportationtype() const {
  return this != internal_default_instance() && _impl_.transportationtype_ != nullptr;
}
inline bool ReportInteractionTransportationType::has_transportationtype() const {
  return _internal_has_transportationtype();
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ReportInteractionTransportationType::_internal_transportationtype() const {
  const ::rti1516_2025::fedpro::TransportationTypeHandle* p = _impl_.transportationtype_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::TransportationTypeHandle&>(
      ::rti1516_2025::fedpro::_TransportationTypeHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::TransportationTypeHandle& ReportInteractionTransportationType::transportationtype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ReportInteractionTransportationType.transportationType)
  return _internal_transportationtype();
}
inline void ReportInteractionTransportationType::unsafe_arena_set_allocated_transportationtype(
    ::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  _impl_.transportationtype_ = transportationtype;
  if (transportationtype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ReportInteractionTransportationType.transportationType)
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReportInteractionTransportationType::release_transportationtype() {
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReportInteractionTransportationType::unsafe_arena_release_transportationtype() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ReportInteractionTransportationType.transportationType)
  
  ::rti1516_2025::fedpro::TransportationTypeHandle* temp = _impl_.transportationtype_;
  _impl_.transportationtype_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReportInteractionTransportationType::_internal_mutable_transportationtype() {
  
  if (_impl_.transportationtype_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::TransportationTypeHandle>(GetArenaForAllocation());
    _impl_.transportationtype_ = p;
  }
  return _impl_.transportationtype_;
}
inline ::rti1516_2025::fedpro::TransportationTypeHandle* ReportInteractionTransportationType::mutable_transportationtype() {
  ::rti1516_2025::fedpro::TransportationTypeHandle* _msg = _internal_mutable_transportationtype();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ReportInteractionTransportationType.transportationType)
  return _msg;
}
inline void ReportInteractionTransportationType::set_allocated_transportationtype(::rti1516_2025::fedpro::TransportationTypeHandle* transportationtype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transportationtype_);
  }
  if (transportationtype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transportationtype));
    if (message_arena != submessage_arena) {
      transportationtype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transportationtype, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.transportationtype_ = transportationtype;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ReportInteractionTransportationType.transportationType)
}

// -------------------------------------------------------------------

// RequestAttributeOwnershipAssumption

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool RequestAttributeOwnershipAssumption::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool RequestAttributeOwnershipAssumption::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& RequestAttributeOwnershipAssumption::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& RequestAttributeOwnershipAssumption::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RequestAttributeOwnershipAssumption.objectInstance)
  return _internal_objectinstance();
}
inline void RequestAttributeOwnershipAssumption::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.RequestAttributeOwnershipAssumption.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RequestAttributeOwnershipAssumption::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RequestAttributeOwnershipAssumption::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RequestAttributeOwnershipAssumption.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RequestAttributeOwnershipAssumption::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RequestAttributeOwnershipAssumption::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RequestAttributeOwnershipAssumption.objectInstance)
  return _msg;
}
inline void RequestAttributeOwnershipAssumption::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RequestAttributeOwnershipAssumption.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandleSet offeredAttributes = 2;
inline bool RequestAttributeOwnershipAssumption::_internal_has_offeredattributes() const {
  return this != internal_default_instance() && _impl_.offeredattributes_ != nullptr;
}
inline bool RequestAttributeOwnershipAssumption::has_offeredattributes() const {
  return _internal_has_offeredattributes();
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& RequestAttributeOwnershipAssumption::_internal_offeredattributes() const {
  const ::rti1516_2025::fedpro::AttributeHandleSet* p = _impl_.offeredattributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleSet&>(
      ::rti1516_2025::fedpro::_AttributeHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& RequestAttributeOwnershipAssumption::offeredattributes() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RequestAttributeOwnershipAssumption.offeredAttributes)
  return _internal_offeredattributes();
}
inline void RequestAttributeOwnershipAssumption::unsafe_arena_set_allocated_offeredattributes(
    ::rti1516_2025::fedpro::AttributeHandleSet* offeredattributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offeredattributes_);
  }
  _impl_.offeredattributes_ = offeredattributes;
  if (offeredattributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.RequestAttributeOwnershipAssumption.offeredAttributes)
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* RequestAttributeOwnershipAssumption::release_offeredattributes() {
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.offeredattributes_;
  _impl_.offeredattributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* RequestAttributeOwnershipAssumption::unsafe_arena_release_offeredattributes() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RequestAttributeOwnershipAssumption.offeredAttributes)
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.offeredattributes_;
  _impl_.offeredattributes_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* RequestAttributeOwnershipAssumption::_internal_mutable_offeredattributes() {
  
  if (_impl_.offeredattributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleSet>(GetArenaForAllocation());
    _impl_.offeredattributes_ = p;
  }
  return _impl_.offeredattributes_;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* RequestAttributeOwnershipAssumption::mutable_offeredattributes() {
  ::rti1516_2025::fedpro::AttributeHandleSet* _msg = _internal_mutable_offeredattributes();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RequestAttributeOwnershipAssumption.offeredAttributes)
  return _msg;
}
inline void RequestAttributeOwnershipAssumption::set_allocated_offeredattributes(::rti1516_2025::fedpro::AttributeHandleSet* offeredattributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offeredattributes_);
  }
  if (offeredattributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offeredattributes));
    if (message_arena != submessage_arena) {
      offeredattributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offeredattributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.offeredattributes_ = offeredattributes;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RequestAttributeOwnershipAssumption.offeredAttributes)
}

// bytes userSuppliedTag = 3;
inline void RequestAttributeOwnershipAssumption::clear_usersuppliedtag() {
  _impl_.usersuppliedtag_.ClearToEmpty();
}
inline const std::string& RequestAttributeOwnershipAssumption::usersuppliedtag() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RequestAttributeOwnershipAssumption.userSuppliedTag)
  return _internal_usersuppliedtag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestAttributeOwnershipAssumption::set_usersuppliedtag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usersuppliedtag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.RequestAttributeOwnershipAssumption.userSuppliedTag)
}
inline std::string* RequestAttributeOwnershipAssumption::mutable_usersuppliedtag() {
  std::string* _s = _internal_mutable_usersuppliedtag();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RequestAttributeOwnershipAssumption.userSuppliedTag)
  return _s;
}
inline const std::string& RequestAttributeOwnershipAssumption::_internal_usersuppliedtag() const {
  return _impl_.usersuppliedtag_.Get();
}
inline void RequestAttributeOwnershipAssumption::_internal_set_usersuppliedtag(const std::string& value) {
  
  _impl_.usersuppliedtag_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestAttributeOwnershipAssumption::_internal_mutable_usersuppliedtag() {
  
  return _impl_.usersuppliedtag_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestAttributeOwnershipAssumption::release_usersuppliedtag() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RequestAttributeOwnershipAssumption.userSuppliedTag)
  return _impl_.usersuppliedtag_.Release();
}
inline void RequestAttributeOwnershipAssumption::set_allocated_usersuppliedtag(std::string* usersuppliedtag) {
  if (usersuppliedtag != nullptr) {
    
  } else {
    
  }
  _impl_.usersuppliedtag_.SetAllocated(usersuppliedtag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usersuppliedtag_.IsDefault()) {
    _impl_.usersuppliedtag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RequestAttributeOwnershipAssumption.userSuppliedTag)
}

// -------------------------------------------------------------------

// RequestDivestitureConfirmation

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool RequestDivestitureConfirmation::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool RequestDivestitureConfirmation::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& RequestDivestitureConfirmation::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& RequestDivestitureConfirmation::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RequestDivestitureConfirmation.objectInstance)
  return _internal_objectinstance();
}
inline void RequestDivestitureConfirmation::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.RequestDivestitureConfirmation.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RequestDivestitureConfirmation::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RequestDivestitureConfirmation::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RequestDivestitureConfirmation.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RequestDivestitureConfirmation::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RequestDivestitureConfirmation::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RequestDivestitureConfirmation.objectInstance)
  return _msg;
}
inline void RequestDivestitureConfirmation::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RequestDivestitureConfirmation.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandleSet releasedAttributes = 2;
inline bool RequestDivestitureConfirmation::_internal_has_releasedattributes() const {
  return this != internal_default_instance() && _impl_.releasedattributes_ != nullptr;
}
inline bool RequestDivestitureConfirmation::has_releasedattributes() const {
  return _internal_has_releasedattributes();
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& RequestDivestitureConfirmation::_internal_releasedattributes() const {
  const ::rti1516_2025::fedpro::AttributeHandleSet* p = _impl_.releasedattributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleSet&>(
      ::rti1516_2025::fedpro::_AttributeHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& RequestDivestitureConfirmation::releasedattributes() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RequestDivestitureConfirmation.releasedAttributes)
  return _internal_releasedattributes();
}
inline void RequestDivestitureConfirmation::unsafe_arena_set_allocated_releasedattributes(
    ::rti1516_2025::fedpro::AttributeHandleSet* releasedattributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.releasedattributes_);
  }
  _impl_.releasedattributes_ = releasedattributes;
  if (releasedattributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.RequestDivestitureConfirmation.releasedAttributes)
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* RequestDivestitureConfirmation::release_releasedattributes() {
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.releasedattributes_;
  _impl_.releasedattributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* RequestDivestitureConfirmation::unsafe_arena_release_releasedattributes() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RequestDivestitureConfirmation.releasedAttributes)
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.releasedattributes_;
  _impl_.releasedattributes_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* RequestDivestitureConfirmation::_internal_mutable_releasedattributes() {
  
  if (_impl_.releasedattributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleSet>(GetArenaForAllocation());
    _impl_.releasedattributes_ = p;
  }
  return _impl_.releasedattributes_;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* RequestDivestitureConfirmation::mutable_releasedattributes() {
  ::rti1516_2025::fedpro::AttributeHandleSet* _msg = _internal_mutable_releasedattributes();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RequestDivestitureConfirmation.releasedAttributes)
  return _msg;
}
inline void RequestDivestitureConfirmation::set_allocated_releasedattributes(::rti1516_2025::fedpro::AttributeHandleSet* releasedattributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.releasedattributes_);
  }
  if (releasedattributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(releasedattributes));
    if (message_arena != submessage_arena) {
      releasedattributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, releasedattributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.releasedattributes_ = releasedattributes;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RequestDivestitureConfirmation.releasedAttributes)
}

// bytes userSuppliedTag = 3;
inline void RequestDivestitureConfirmation::clear_usersuppliedtag() {
  _impl_.usersuppliedtag_.ClearToEmpty();
}
inline const std::string& RequestDivestitureConfirmation::usersuppliedtag() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RequestDivestitureConfirmation.userSuppliedTag)
  return _internal_usersuppliedtag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestDivestitureConfirmation::set_usersuppliedtag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usersuppliedtag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.RequestDivestitureConfirmation.userSuppliedTag)
}
inline std::string* RequestDivestitureConfirmation::mutable_usersuppliedtag() {
  std::string* _s = _internal_mutable_usersuppliedtag();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RequestDivestitureConfirmation.userSuppliedTag)
  return _s;
}
inline const std::string& RequestDivestitureConfirmation::_internal_usersuppliedtag() const {
  return _impl_.usersuppliedtag_.Get();
}
inline void RequestDivestitureConfirmation::_internal_set_usersuppliedtag(const std::string& value) {
  
  _impl_.usersuppliedtag_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestDivestitureConfirmation::_internal_mutable_usersuppliedtag() {
  
  return _impl_.usersuppliedtag_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestDivestitureConfirmation::release_usersuppliedtag() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RequestDivestitureConfirmation.userSuppliedTag)
  return _impl_.usersuppliedtag_.Release();
}
inline void RequestDivestitureConfirmation::set_allocated_usersuppliedtag(std::string* usersuppliedtag) {
  if (usersuppliedtag != nullptr) {
    
  } else {
    
  }
  _impl_.usersuppliedtag_.SetAllocated(usersuppliedtag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usersuppliedtag_.IsDefault()) {
    _impl_.usersuppliedtag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RequestDivestitureConfirmation.userSuppliedTag)
}

// -------------------------------------------------------------------

// AttributeOwnershipAcquisitionNotification

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool AttributeOwnershipAcquisitionNotification::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool AttributeOwnershipAcquisitionNotification::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& AttributeOwnershipAcquisitionNotification::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& AttributeOwnershipAcquisitionNotification::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification.objectInstance)
  return _internal_objectinstance();
}
inline void AttributeOwnershipAcquisitionNotification::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributeOwnershipAcquisitionNotification::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributeOwnershipAcquisitionNotification::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributeOwnershipAcquisitionNotification::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributeOwnershipAcquisitionNotification::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification.objectInstance)
  return _msg;
}
inline void AttributeOwnershipAcquisitionNotification::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandleSet securedAttributes = 2;
inline bool AttributeOwnershipAcquisitionNotification::_internal_has_securedattributes() const {
  return this != internal_default_instance() && _impl_.securedattributes_ != nullptr;
}
inline bool AttributeOwnershipAcquisitionNotification::has_securedattributes() const {
  return _internal_has_securedattributes();
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& AttributeOwnershipAcquisitionNotification::_internal_securedattributes() const {
  const ::rti1516_2025::fedpro::AttributeHandleSet* p = _impl_.securedattributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleSet&>(
      ::rti1516_2025::fedpro::_AttributeHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& AttributeOwnershipAcquisitionNotification::securedattributes() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification.securedAttributes)
  return _internal_securedattributes();
}
inline void AttributeOwnershipAcquisitionNotification::unsafe_arena_set_allocated_securedattributes(
    ::rti1516_2025::fedpro::AttributeHandleSet* securedattributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.securedattributes_);
  }
  _impl_.securedattributes_ = securedattributes;
  if (securedattributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification.securedAttributes)
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeOwnershipAcquisitionNotification::release_securedattributes() {
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.securedattributes_;
  _impl_.securedattributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeOwnershipAcquisitionNotification::unsafe_arena_release_securedattributes() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification.securedAttributes)
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.securedattributes_;
  _impl_.securedattributes_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeOwnershipAcquisitionNotification::_internal_mutable_securedattributes() {
  
  if (_impl_.securedattributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleSet>(GetArenaForAllocation());
    _impl_.securedattributes_ = p;
  }
  return _impl_.securedattributes_;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeOwnershipAcquisitionNotification::mutable_securedattributes() {
  ::rti1516_2025::fedpro::AttributeHandleSet* _msg = _internal_mutable_securedattributes();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification.securedAttributes)
  return _msg;
}
inline void AttributeOwnershipAcquisitionNotification::set_allocated_securedattributes(::rti1516_2025::fedpro::AttributeHandleSet* securedattributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.securedattributes_);
  }
  if (securedattributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(securedattributes));
    if (message_arena != submessage_arena) {
      securedattributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, securedattributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.securedattributes_ = securedattributes;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification.securedAttributes)
}

// bytes userSuppliedTag = 3;
inline void AttributeOwnershipAcquisitionNotification::clear_usersuppliedtag() {
  _impl_.usersuppliedtag_.ClearToEmpty();
}
inline const std::string& AttributeOwnershipAcquisitionNotification::usersuppliedtag() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification.userSuppliedTag)
  return _internal_usersuppliedtag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AttributeOwnershipAcquisitionNotification::set_usersuppliedtag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usersuppliedtag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification.userSuppliedTag)
}
inline std::string* AttributeOwnershipAcquisitionNotification::mutable_usersuppliedtag() {
  std::string* _s = _internal_mutable_usersuppliedtag();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification.userSuppliedTag)
  return _s;
}
inline const std::string& AttributeOwnershipAcquisitionNotification::_internal_usersuppliedtag() const {
  return _impl_.usersuppliedtag_.Get();
}
inline void AttributeOwnershipAcquisitionNotification::_internal_set_usersuppliedtag(const std::string& value) {
  
  _impl_.usersuppliedtag_.Set(value, GetArenaForAllocation());
}
inline std::string* AttributeOwnershipAcquisitionNotification::_internal_mutable_usersuppliedtag() {
  
  return _impl_.usersuppliedtag_.Mutable(GetArenaForAllocation());
}
inline std::string* AttributeOwnershipAcquisitionNotification::release_usersuppliedtag() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification.userSuppliedTag)
  return _impl_.usersuppliedtag_.Release();
}
inline void AttributeOwnershipAcquisitionNotification::set_allocated_usersuppliedtag(std::string* usersuppliedtag) {
  if (usersuppliedtag != nullptr) {
    
  } else {
    
  }
  _impl_.usersuppliedtag_.SetAllocated(usersuppliedtag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usersuppliedtag_.IsDefault()) {
    _impl_.usersuppliedtag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification.userSuppliedTag)
}

// -------------------------------------------------------------------

// AttributeOwnershipUnavailable

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool AttributeOwnershipUnavailable::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool AttributeOwnershipUnavailable::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& AttributeOwnershipUnavailable::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& AttributeOwnershipUnavailable::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributeOwnershipUnavailable.objectInstance)
  return _internal_objectinstance();
}
inline void AttributeOwnershipUnavailable::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.AttributeOwnershipUnavailable.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributeOwnershipUnavailable::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributeOwnershipUnavailable::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributeOwnershipUnavailable.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributeOwnershipUnavailable::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributeOwnershipUnavailable::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributeOwnershipUnavailable.objectInstance)
  return _msg;
}
inline void AttributeOwnershipUnavailable::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributeOwnershipUnavailable.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
inline bool AttributeOwnershipUnavailable::_internal_has_attributes() const {
  return this != internal_default_instance() && _impl_.attributes_ != nullptr;
}
inline bool AttributeOwnershipUnavailable::has_attributes() const {
  return _internal_has_attributes();
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& AttributeOwnershipUnavailable::_internal_attributes() const {
  const ::rti1516_2025::fedpro::AttributeHandleSet* p = _impl_.attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleSet&>(
      ::rti1516_2025::fedpro::_AttributeHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& AttributeOwnershipUnavailable::attributes() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributeOwnershipUnavailable.attributes)
  return _internal_attributes();
}
inline void AttributeOwnershipUnavailable::unsafe_arena_set_allocated_attributes(
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  _impl_.attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.AttributeOwnershipUnavailable.attributes)
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeOwnershipUnavailable::release_attributes() {
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeOwnershipUnavailable::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributeOwnershipUnavailable.attributes)
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeOwnershipUnavailable::_internal_mutable_attributes() {
  
  if (_impl_.attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleSet>(GetArenaForAllocation());
    _impl_.attributes_ = p;
  }
  return _impl_.attributes_;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeOwnershipUnavailable::mutable_attributes() {
  ::rti1516_2025::fedpro::AttributeHandleSet* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributeOwnershipUnavailable.attributes)
  return _msg;
}
inline void AttributeOwnershipUnavailable::set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes));
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributeOwnershipUnavailable.attributes)
}

// bytes userSuppliedTag = 3;
inline void AttributeOwnershipUnavailable::clear_usersuppliedtag() {
  _impl_.usersuppliedtag_.ClearToEmpty();
}
inline const std::string& AttributeOwnershipUnavailable::usersuppliedtag() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributeOwnershipUnavailable.userSuppliedTag)
  return _internal_usersuppliedtag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AttributeOwnershipUnavailable::set_usersuppliedtag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usersuppliedtag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.AttributeOwnershipUnavailable.userSuppliedTag)
}
inline std::string* AttributeOwnershipUnavailable::mutable_usersuppliedtag() {
  std::string* _s = _internal_mutable_usersuppliedtag();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributeOwnershipUnavailable.userSuppliedTag)
  return _s;
}
inline const std::string& AttributeOwnershipUnavailable::_internal_usersuppliedtag() const {
  return _impl_.usersuppliedtag_.Get();
}
inline void AttributeOwnershipUnavailable::_internal_set_usersuppliedtag(const std::string& value) {
  
  _impl_.usersuppliedtag_.Set(value, GetArenaForAllocation());
}
inline std::string* AttributeOwnershipUnavailable::_internal_mutable_usersuppliedtag() {
  
  return _impl_.usersuppliedtag_.Mutable(GetArenaForAllocation());
}
inline std::string* AttributeOwnershipUnavailable::release_usersuppliedtag() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributeOwnershipUnavailable.userSuppliedTag)
  return _impl_.usersuppliedtag_.Release();
}
inline void AttributeOwnershipUnavailable::set_allocated_usersuppliedtag(std::string* usersuppliedtag) {
  if (usersuppliedtag != nullptr) {
    
  } else {
    
  }
  _impl_.usersuppliedtag_.SetAllocated(usersuppliedtag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usersuppliedtag_.IsDefault()) {
    _impl_.usersuppliedtag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributeOwnershipUnavailable.userSuppliedTag)
}

// -------------------------------------------------------------------

// RequestAttributeOwnershipRelease

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool RequestAttributeOwnershipRelease::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool RequestAttributeOwnershipRelease::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& RequestAttributeOwnershipRelease::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& RequestAttributeOwnershipRelease::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RequestAttributeOwnershipRelease.objectInstance)
  return _internal_objectinstance();
}
inline void RequestAttributeOwnershipRelease::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.RequestAttributeOwnershipRelease.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RequestAttributeOwnershipRelease::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RequestAttributeOwnershipRelease::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RequestAttributeOwnershipRelease.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RequestAttributeOwnershipRelease::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* RequestAttributeOwnershipRelease::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RequestAttributeOwnershipRelease.objectInstance)
  return _msg;
}
inline void RequestAttributeOwnershipRelease::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RequestAttributeOwnershipRelease.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandleSet candidateAttributes = 2;
inline bool RequestAttributeOwnershipRelease::_internal_has_candidateattributes() const {
  return this != internal_default_instance() && _impl_.candidateattributes_ != nullptr;
}
inline bool RequestAttributeOwnershipRelease::has_candidateattributes() const {
  return _internal_has_candidateattributes();
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& RequestAttributeOwnershipRelease::_internal_candidateattributes() const {
  const ::rti1516_2025::fedpro::AttributeHandleSet* p = _impl_.candidateattributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleSet&>(
      ::rti1516_2025::fedpro::_AttributeHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& RequestAttributeOwnershipRelease::candidateattributes() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RequestAttributeOwnershipRelease.candidateAttributes)
  return _internal_candidateattributes();
}
inline void RequestAttributeOwnershipRelease::unsafe_arena_set_allocated_candidateattributes(
    ::rti1516_2025::fedpro::AttributeHandleSet* candidateattributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.candidateattributes_);
  }
  _impl_.candidateattributes_ = candidateattributes;
  if (candidateattributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.RequestAttributeOwnershipRelease.candidateAttributes)
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* RequestAttributeOwnershipRelease::release_candidateattributes() {
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.candidateattributes_;
  _impl_.candidateattributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* RequestAttributeOwnershipRelease::unsafe_arena_release_candidateattributes() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RequestAttributeOwnershipRelease.candidateAttributes)
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.candidateattributes_;
  _impl_.candidateattributes_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* RequestAttributeOwnershipRelease::_internal_mutable_candidateattributes() {
  
  if (_impl_.candidateattributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleSet>(GetArenaForAllocation());
    _impl_.candidateattributes_ = p;
  }
  return _impl_.candidateattributes_;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* RequestAttributeOwnershipRelease::mutable_candidateattributes() {
  ::rti1516_2025::fedpro::AttributeHandleSet* _msg = _internal_mutable_candidateattributes();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RequestAttributeOwnershipRelease.candidateAttributes)
  return _msg;
}
inline void RequestAttributeOwnershipRelease::set_allocated_candidateattributes(::rti1516_2025::fedpro::AttributeHandleSet* candidateattributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.candidateattributes_);
  }
  if (candidateattributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(candidateattributes));
    if (message_arena != submessage_arena) {
      candidateattributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidateattributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.candidateattributes_ = candidateattributes;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RequestAttributeOwnershipRelease.candidateAttributes)
}

// bytes userSuppliedTag = 3;
inline void RequestAttributeOwnershipRelease::clear_usersuppliedtag() {
  _impl_.usersuppliedtag_.ClearToEmpty();
}
inline const std::string& RequestAttributeOwnershipRelease::usersuppliedtag() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RequestAttributeOwnershipRelease.userSuppliedTag)
  return _internal_usersuppliedtag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestAttributeOwnershipRelease::set_usersuppliedtag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.usersuppliedtag_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:rti1516_2025.fedpro.RequestAttributeOwnershipRelease.userSuppliedTag)
}
inline std::string* RequestAttributeOwnershipRelease::mutable_usersuppliedtag() {
  std::string* _s = _internal_mutable_usersuppliedtag();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RequestAttributeOwnershipRelease.userSuppliedTag)
  return _s;
}
inline const std::string& RequestAttributeOwnershipRelease::_internal_usersuppliedtag() const {
  return _impl_.usersuppliedtag_.Get();
}
inline void RequestAttributeOwnershipRelease::_internal_set_usersuppliedtag(const std::string& value) {
  
  _impl_.usersuppliedtag_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestAttributeOwnershipRelease::_internal_mutable_usersuppliedtag() {
  
  return _impl_.usersuppliedtag_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestAttributeOwnershipRelease::release_usersuppliedtag() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RequestAttributeOwnershipRelease.userSuppliedTag)
  return _impl_.usersuppliedtag_.Release();
}
inline void RequestAttributeOwnershipRelease::set_allocated_usersuppliedtag(std::string* usersuppliedtag) {
  if (usersuppliedtag != nullptr) {
    
  } else {
    
  }
  _impl_.usersuppliedtag_.SetAllocated(usersuppliedtag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.usersuppliedtag_.IsDefault()) {
    _impl_.usersuppliedtag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RequestAttributeOwnershipRelease.userSuppliedTag)
}

// -------------------------------------------------------------------

// ConfirmAttributeOwnershipAcquisitionCancellation

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool ConfirmAttributeOwnershipAcquisitionCancellation::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool ConfirmAttributeOwnershipAcquisitionCancellation::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& ConfirmAttributeOwnershipAcquisitionCancellation::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& ConfirmAttributeOwnershipAcquisitionCancellation::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ConfirmAttributeOwnershipAcquisitionCancellation.objectInstance)
  return _internal_objectinstance();
}
inline void ConfirmAttributeOwnershipAcquisitionCancellation::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ConfirmAttributeOwnershipAcquisitionCancellation.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ConfirmAttributeOwnershipAcquisitionCancellation::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ConfirmAttributeOwnershipAcquisitionCancellation::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ConfirmAttributeOwnershipAcquisitionCancellation.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ConfirmAttributeOwnershipAcquisitionCancellation::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* ConfirmAttributeOwnershipAcquisitionCancellation::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ConfirmAttributeOwnershipAcquisitionCancellation.objectInstance)
  return _msg;
}
inline void ConfirmAttributeOwnershipAcquisitionCancellation::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ConfirmAttributeOwnershipAcquisitionCancellation.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
inline bool ConfirmAttributeOwnershipAcquisitionCancellation::_internal_has_attributes() const {
  return this != internal_default_instance() && _impl_.attributes_ != nullptr;
}
inline bool ConfirmAttributeOwnershipAcquisitionCancellation::has_attributes() const {
  return _internal_has_attributes();
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& ConfirmAttributeOwnershipAcquisitionCancellation::_internal_attributes() const {
  const ::rti1516_2025::fedpro::AttributeHandleSet* p = _impl_.attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleSet&>(
      ::rti1516_2025::fedpro::_AttributeHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& ConfirmAttributeOwnershipAcquisitionCancellation::attributes() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.ConfirmAttributeOwnershipAcquisitionCancellation.attributes)
  return _internal_attributes();
}
inline void ConfirmAttributeOwnershipAcquisitionCancellation::unsafe_arena_set_allocated_attributes(
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  _impl_.attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.ConfirmAttributeOwnershipAcquisitionCancellation.attributes)
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* ConfirmAttributeOwnershipAcquisitionCancellation::release_attributes() {
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* ConfirmAttributeOwnershipAcquisitionCancellation::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.ConfirmAttributeOwnershipAcquisitionCancellation.attributes)
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* ConfirmAttributeOwnershipAcquisitionCancellation::_internal_mutable_attributes() {
  
  if (_impl_.attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleSet>(GetArenaForAllocation());
    _impl_.attributes_ = p;
  }
  return _impl_.attributes_;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* ConfirmAttributeOwnershipAcquisitionCancellation::mutable_attributes() {
  ::rti1516_2025::fedpro::AttributeHandleSet* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.ConfirmAttributeOwnershipAcquisitionCancellation.attributes)
  return _msg;
}
inline void ConfirmAttributeOwnershipAcquisitionCancellation::set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes));
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.ConfirmAttributeOwnershipAcquisitionCancellation.attributes)
}

// -------------------------------------------------------------------

// InformAttributeOwnership

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool InformAttributeOwnership::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool InformAttributeOwnership::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& InformAttributeOwnership::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& InformAttributeOwnership::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.InformAttributeOwnership.objectInstance)
  return _internal_objectinstance();
}
inline void InformAttributeOwnership::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.InformAttributeOwnership.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* InformAttributeOwnership::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* InformAttributeOwnership::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.InformAttributeOwnership.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* InformAttributeOwnership::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* InformAttributeOwnership::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.InformAttributeOwnership.objectInstance)
  return _msg;
}
inline void InformAttributeOwnership::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.InformAttributeOwnership.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
inline bool InformAttributeOwnership::_internal_has_attributes() const {
  return this != internal_default_instance() && _impl_.attributes_ != nullptr;
}
inline bool InformAttributeOwnership::has_attributes() const {
  return _internal_has_attributes();
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& InformAttributeOwnership::_internal_attributes() const {
  const ::rti1516_2025::fedpro::AttributeHandleSet* p = _impl_.attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleSet&>(
      ::rti1516_2025::fedpro::_AttributeHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& InformAttributeOwnership::attributes() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.InformAttributeOwnership.attributes)
  return _internal_attributes();
}
inline void InformAttributeOwnership::unsafe_arena_set_allocated_attributes(
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  _impl_.attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.InformAttributeOwnership.attributes)
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* InformAttributeOwnership::release_attributes() {
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* InformAttributeOwnership::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.InformAttributeOwnership.attributes)
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* InformAttributeOwnership::_internal_mutable_attributes() {
  
  if (_impl_.attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleSet>(GetArenaForAllocation());
    _impl_.attributes_ = p;
  }
  return _impl_.attributes_;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* InformAttributeOwnership::mutable_attributes() {
  ::rti1516_2025::fedpro::AttributeHandleSet* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.InformAttributeOwnership.attributes)
  return _msg;
}
inline void InformAttributeOwnership::set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes));
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.InformAttributeOwnership.attributes)
}

// .rti1516_2025.fedpro.FederateHandle federate = 3;
inline bool InformAttributeOwnership::_internal_has_federate() const {
  return this != internal_default_instance() && _impl_.federate_ != nullptr;
}
inline bool InformAttributeOwnership::has_federate() const {
  return _internal_has_federate();
}
inline const ::rti1516_2025::fedpro::FederateHandle& InformAttributeOwnership::_internal_federate() const {
  const ::rti1516_2025::fedpro::FederateHandle* p = _impl_.federate_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::FederateHandle&>(
      ::rti1516_2025::fedpro::_FederateHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateHandle& InformAttributeOwnership::federate() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.InformAttributeOwnership.federate)
  return _internal_federate();
}
inline void InformAttributeOwnership::unsafe_arena_set_allocated_federate(
    ::rti1516_2025::fedpro::FederateHandle* federate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.federate_);
  }
  _impl_.federate_ = federate;
  if (federate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.InformAttributeOwnership.federate)
}
inline ::rti1516_2025::fedpro::FederateHandle* InformAttributeOwnership::release_federate() {
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.federate_;
  _impl_.federate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* InformAttributeOwnership::unsafe_arena_release_federate() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.InformAttributeOwnership.federate)
  
  ::rti1516_2025::fedpro::FederateHandle* temp = _impl_.federate_;
  _impl_.federate_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::FederateHandle* InformAttributeOwnership::_internal_mutable_federate() {
  
  if (_impl_.federate_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::FederateHandle>(GetArenaForAllocation());
    _impl_.federate_ = p;
  }
  return _impl_.federate_;
}
inline ::rti1516_2025::fedpro::FederateHandle* InformAttributeOwnership::mutable_federate() {
  ::rti1516_2025::fedpro::FederateHandle* _msg = _internal_mutable_federate();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.InformAttributeOwnership.federate)
  return _msg;
}
inline void InformAttributeOwnership::set_allocated_federate(::rti1516_2025::fedpro::FederateHandle* federate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.federate_);
  }
  if (federate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(federate));
    if (message_arena != submessage_arena) {
      federate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, federate, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.federate_ = federate;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.InformAttributeOwnership.federate)
}

// -------------------------------------------------------------------

// AttributeIsNotOwned

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool AttributeIsNotOwned::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool AttributeIsNotOwned::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& AttributeIsNotOwned::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& AttributeIsNotOwned::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributeIsNotOwned.objectInstance)
  return _internal_objectinstance();
}
inline void AttributeIsNotOwned::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.AttributeIsNotOwned.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributeIsNotOwned::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributeIsNotOwned::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributeIsNotOwned.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributeIsNotOwned::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributeIsNotOwned::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributeIsNotOwned.objectInstance)
  return _msg;
}
inline void AttributeIsNotOwned::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributeIsNotOwned.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
inline bool AttributeIsNotOwned::_internal_has_attributes() const {
  return this != internal_default_instance() && _impl_.attributes_ != nullptr;
}
inline bool AttributeIsNotOwned::has_attributes() const {
  return _internal_has_attributes();
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& AttributeIsNotOwned::_internal_attributes() const {
  const ::rti1516_2025::fedpro::AttributeHandleSet* p = _impl_.attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleSet&>(
      ::rti1516_2025::fedpro::_AttributeHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& AttributeIsNotOwned::attributes() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributeIsNotOwned.attributes)
  return _internal_attributes();
}
inline void AttributeIsNotOwned::unsafe_arena_set_allocated_attributes(
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  _impl_.attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.AttributeIsNotOwned.attributes)
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeIsNotOwned::release_attributes() {
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeIsNotOwned::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributeIsNotOwned.attributes)
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeIsNotOwned::_internal_mutable_attributes() {
  
  if (_impl_.attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleSet>(GetArenaForAllocation());
    _impl_.attributes_ = p;
  }
  return _impl_.attributes_;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeIsNotOwned::mutable_attributes() {
  ::rti1516_2025::fedpro::AttributeHandleSet* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributeIsNotOwned.attributes)
  return _msg;
}
inline void AttributeIsNotOwned::set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes));
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributeIsNotOwned.attributes)
}

// -------------------------------------------------------------------

// AttributeIsOwnedByRTI

// .rti1516_2025.fedpro.ObjectInstanceHandle objectInstance = 1;
inline bool AttributeIsOwnedByRTI::_internal_has_objectinstance() const {
  return this != internal_default_instance() && _impl_.objectinstance_ != nullptr;
}
inline bool AttributeIsOwnedByRTI::has_objectinstance() const {
  return _internal_has_objectinstance();
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& AttributeIsOwnedByRTI::_internal_objectinstance() const {
  const ::rti1516_2025::fedpro::ObjectInstanceHandle* p = _impl_.objectinstance_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::ObjectInstanceHandle&>(
      ::rti1516_2025::fedpro::_ObjectInstanceHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceHandle& AttributeIsOwnedByRTI::objectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributeIsOwnedByRTI.objectInstance)
  return _internal_objectinstance();
}
inline void AttributeIsOwnedByRTI::unsafe_arena_set_allocated_objectinstance(
    ::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  _impl_.objectinstance_ = objectinstance;
  if (objectinstance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.AttributeIsOwnedByRTI.objectInstance)
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributeIsOwnedByRTI::release_objectinstance() {
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributeIsOwnedByRTI::unsafe_arena_release_objectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributeIsOwnedByRTI.objectInstance)
  
  ::rti1516_2025::fedpro::ObjectInstanceHandle* temp = _impl_.objectinstance_;
  _impl_.objectinstance_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributeIsOwnedByRTI::_internal_mutable_objectinstance() {
  
  if (_impl_.objectinstance_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::ObjectInstanceHandle>(GetArenaForAllocation());
    _impl_.objectinstance_ = p;
  }
  return _impl_.objectinstance_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceHandle* AttributeIsOwnedByRTI::mutable_objectinstance() {
  ::rti1516_2025::fedpro::ObjectInstanceHandle* _msg = _internal_mutable_objectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributeIsOwnedByRTI.objectInstance)
  return _msg;
}
inline void AttributeIsOwnedByRTI::set_allocated_objectinstance(::rti1516_2025::fedpro::ObjectInstanceHandle* objectinstance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.objectinstance_);
  }
  if (objectinstance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(objectinstance));
    if (message_arena != submessage_arena) {
      objectinstance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objectinstance, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.objectinstance_ = objectinstance;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributeIsOwnedByRTI.objectInstance)
}

// .rti1516_2025.fedpro.AttributeHandleSet attributes = 2;
inline bool AttributeIsOwnedByRTI::_internal_has_attributes() const {
  return this != internal_default_instance() && _impl_.attributes_ != nullptr;
}
inline bool AttributeIsOwnedByRTI::has_attributes() const {
  return _internal_has_attributes();
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& AttributeIsOwnedByRTI::_internal_attributes() const {
  const ::rti1516_2025::fedpro::AttributeHandleSet* p = _impl_.attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::AttributeHandleSet&>(
      ::rti1516_2025::fedpro::_AttributeHandleSet_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeHandleSet& AttributeIsOwnedByRTI::attributes() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.AttributeIsOwnedByRTI.attributes)
  return _internal_attributes();
}
inline void AttributeIsOwnedByRTI::unsafe_arena_set_allocated_attributes(
    ::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  _impl_.attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.AttributeIsOwnedByRTI.attributes)
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeIsOwnedByRTI::release_attributes() {
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeIsOwnedByRTI::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.AttributeIsOwnedByRTI.attributes)
  
  ::rti1516_2025::fedpro::AttributeHandleSet* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeIsOwnedByRTI::_internal_mutable_attributes() {
  
  if (_impl_.attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::AttributeHandleSet>(GetArenaForAllocation());
    _impl_.attributes_ = p;
  }
  return _impl_.attributes_;
}
inline ::rti1516_2025::fedpro::AttributeHandleSet* AttributeIsOwnedByRTI::mutable_attributes() {
  ::rti1516_2025::fedpro::AttributeHandleSet* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.AttributeIsOwnedByRTI.attributes)
  return _msg;
}
inline void AttributeIsOwnedByRTI::set_allocated_attributes(::rti1516_2025::fedpro::AttributeHandleSet* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attributes_);
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes));
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.AttributeIsOwnedByRTI.attributes)
}

// -------------------------------------------------------------------

// TimeRegulationEnabled

// .rti1516_2025.fedpro.LogicalTime time = 1;
inline bool TimeRegulationEnabled::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool TimeRegulationEnabled::has_time() const {
  return _internal_has_time();
}
inline const ::rti1516_2025::fedpro::LogicalTime& TimeRegulationEnabled::_internal_time() const {
  const ::rti1516_2025::fedpro::LogicalTime* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::LogicalTime&>(
      ::rti1516_2025::fedpro::_LogicalTime_default_instance_);
}
inline const ::rti1516_2025::fedpro::LogicalTime& TimeRegulationEnabled::time() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.TimeRegulationEnabled.time)
  return _internal_time();
}
inline void TimeRegulationEnabled::unsafe_arena_set_allocated_time(
    ::rti1516_2025::fedpro::LogicalTime* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.TimeRegulationEnabled.time)
}
inline ::rti1516_2025::fedpro::LogicalTime* TimeRegulationEnabled::release_time() {
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* TimeRegulationEnabled::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.TimeRegulationEnabled.time)
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* TimeRegulationEnabled::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::LogicalTime>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::rti1516_2025::fedpro::LogicalTime* TimeRegulationEnabled::mutable_time() {
  ::rti1516_2025::fedpro::LogicalTime* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.TimeRegulationEnabled.time)
  return _msg;
}
inline void TimeRegulationEnabled::set_allocated_time(::rti1516_2025::fedpro::LogicalTime* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.TimeRegulationEnabled.time)
}

// -------------------------------------------------------------------

// TimeConstrainedEnabled

// .rti1516_2025.fedpro.LogicalTime time = 1;
inline bool TimeConstrainedEnabled::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool TimeConstrainedEnabled::has_time() const {
  return _internal_has_time();
}
inline const ::rti1516_2025::fedpro::LogicalTime& TimeConstrainedEnabled::_internal_time() const {
  const ::rti1516_2025::fedpro::LogicalTime* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::LogicalTime&>(
      ::rti1516_2025::fedpro::_LogicalTime_default_instance_);
}
inline const ::rti1516_2025::fedpro::LogicalTime& TimeConstrainedEnabled::time() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.TimeConstrainedEnabled.time)
  return _internal_time();
}
inline void TimeConstrainedEnabled::unsafe_arena_set_allocated_time(
    ::rti1516_2025::fedpro::LogicalTime* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.TimeConstrainedEnabled.time)
}
inline ::rti1516_2025::fedpro::LogicalTime* TimeConstrainedEnabled::release_time() {
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* TimeConstrainedEnabled::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.TimeConstrainedEnabled.time)
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* TimeConstrainedEnabled::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::LogicalTime>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::rti1516_2025::fedpro::LogicalTime* TimeConstrainedEnabled::mutable_time() {
  ::rti1516_2025::fedpro::LogicalTime* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.TimeConstrainedEnabled.time)
  return _msg;
}
inline void TimeConstrainedEnabled::set_allocated_time(::rti1516_2025::fedpro::LogicalTime* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.TimeConstrainedEnabled.time)
}

// -------------------------------------------------------------------

// FlushQueueGrant

// .rti1516_2025.fedpro.LogicalTime time = 1;
inline bool FlushQueueGrant::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool FlushQueueGrant::has_time() const {
  return _internal_has_time();
}
inline const ::rti1516_2025::fedpro::LogicalTime& FlushQueueGrant::_internal_time() const {
  const ::rti1516_2025::fedpro::LogicalTime* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::LogicalTime&>(
      ::rti1516_2025::fedpro::_LogicalTime_default_instance_);
}
inline const ::rti1516_2025::fedpro::LogicalTime& FlushQueueGrant::time() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FlushQueueGrant.time)
  return _internal_time();
}
inline void FlushQueueGrant::unsafe_arena_set_allocated_time(
    ::rti1516_2025::fedpro::LogicalTime* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.FlushQueueGrant.time)
}
inline ::rti1516_2025::fedpro::LogicalTime* FlushQueueGrant::release_time() {
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* FlushQueueGrant::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FlushQueueGrant.time)
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* FlushQueueGrant::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::LogicalTime>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::rti1516_2025::fedpro::LogicalTime* FlushQueueGrant::mutable_time() {
  ::rti1516_2025::fedpro::LogicalTime* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FlushQueueGrant.time)
  return _msg;
}
inline void FlushQueueGrant::set_allocated_time(::rti1516_2025::fedpro::LogicalTime* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FlushQueueGrant.time)
}

// .rti1516_2025.fedpro.LogicalTime optimisticTime = 2;
inline bool FlushQueueGrant::_internal_has_optimistictime() const {
  return this != internal_default_instance() && _impl_.optimistictime_ != nullptr;
}
inline bool FlushQueueGrant::has_optimistictime() const {
  return _internal_has_optimistictime();
}
inline const ::rti1516_2025::fedpro::LogicalTime& FlushQueueGrant::_internal_optimistictime() const {
  const ::rti1516_2025::fedpro::LogicalTime* p = _impl_.optimistictime_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::LogicalTime&>(
      ::rti1516_2025::fedpro::_LogicalTime_default_instance_);
}
inline const ::rti1516_2025::fedpro::LogicalTime& FlushQueueGrant::optimistictime() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.FlushQueueGrant.optimisticTime)
  return _internal_optimistictime();
}
inline void FlushQueueGrant::unsafe_arena_set_allocated_optimistictime(
    ::rti1516_2025::fedpro::LogicalTime* optimistictime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optimistictime_);
  }
  _impl_.optimistictime_ = optimistictime;
  if (optimistictime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.FlushQueueGrant.optimisticTime)
}
inline ::rti1516_2025::fedpro::LogicalTime* FlushQueueGrant::release_optimistictime() {
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.optimistictime_;
  _impl_.optimistictime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* FlushQueueGrant::unsafe_arena_release_optimistictime() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.FlushQueueGrant.optimisticTime)
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.optimistictime_;
  _impl_.optimistictime_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* FlushQueueGrant::_internal_mutable_optimistictime() {
  
  if (_impl_.optimistictime_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::LogicalTime>(GetArenaForAllocation());
    _impl_.optimistictime_ = p;
  }
  return _impl_.optimistictime_;
}
inline ::rti1516_2025::fedpro::LogicalTime* FlushQueueGrant::mutable_optimistictime() {
  ::rti1516_2025::fedpro::LogicalTime* _msg = _internal_mutable_optimistictime();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.FlushQueueGrant.optimisticTime)
  return _msg;
}
inline void FlushQueueGrant::set_allocated_optimistictime(::rti1516_2025::fedpro::LogicalTime* optimistictime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.optimistictime_);
  }
  if (optimistictime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optimistictime));
    if (message_arena != submessage_arena) {
      optimistictime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optimistictime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.optimistictime_ = optimistictime;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.FlushQueueGrant.optimisticTime)
}

// -------------------------------------------------------------------

// TimeAdvanceGrant

// .rti1516_2025.fedpro.LogicalTime time = 1;
inline bool TimeAdvanceGrant::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool TimeAdvanceGrant::has_time() const {
  return _internal_has_time();
}
inline const ::rti1516_2025::fedpro::LogicalTime& TimeAdvanceGrant::_internal_time() const {
  const ::rti1516_2025::fedpro::LogicalTime* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::LogicalTime&>(
      ::rti1516_2025::fedpro::_LogicalTime_default_instance_);
}
inline const ::rti1516_2025::fedpro::LogicalTime& TimeAdvanceGrant::time() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.TimeAdvanceGrant.time)
  return _internal_time();
}
inline void TimeAdvanceGrant::unsafe_arena_set_allocated_time(
    ::rti1516_2025::fedpro::LogicalTime* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.TimeAdvanceGrant.time)
}
inline ::rti1516_2025::fedpro::LogicalTime* TimeAdvanceGrant::release_time() {
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* TimeAdvanceGrant::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.TimeAdvanceGrant.time)
  
  ::rti1516_2025::fedpro::LogicalTime* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::LogicalTime* TimeAdvanceGrant::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::LogicalTime>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::rti1516_2025::fedpro::LogicalTime* TimeAdvanceGrant::mutable_time() {
  ::rti1516_2025::fedpro::LogicalTime* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.TimeAdvanceGrant.time)
  return _msg;
}
inline void TimeAdvanceGrant::set_allocated_time(::rti1516_2025::fedpro::LogicalTime* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.TimeAdvanceGrant.time)
}

// -------------------------------------------------------------------

// RequestRetraction

// .rti1516_2025.fedpro.MessageRetractionHandle retraction = 1;
inline bool RequestRetraction::_internal_has_retraction() const {
  return this != internal_default_instance() && _impl_.retraction_ != nullptr;
}
inline bool RequestRetraction::has_retraction() const {
  return _internal_has_retraction();
}
inline const ::rti1516_2025::fedpro::MessageRetractionHandle& RequestRetraction::_internal_retraction() const {
  const ::rti1516_2025::fedpro::MessageRetractionHandle* p = _impl_.retraction_;
  return p != nullptr ? *p : reinterpret_cast<const ::rti1516_2025::fedpro::MessageRetractionHandle&>(
      ::rti1516_2025::fedpro::_MessageRetractionHandle_default_instance_);
}
inline const ::rti1516_2025::fedpro::MessageRetractionHandle& RequestRetraction::retraction() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.RequestRetraction.retraction)
  return _internal_retraction();
}
inline void RequestRetraction::unsafe_arena_set_allocated_retraction(
    ::rti1516_2025::fedpro::MessageRetractionHandle* retraction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.retraction_);
  }
  _impl_.retraction_ = retraction;
  if (retraction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.RequestRetraction.retraction)
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* RequestRetraction::release_retraction() {
  
  ::rti1516_2025::fedpro::MessageRetractionHandle* temp = _impl_.retraction_;
  _impl_.retraction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* RequestRetraction::unsafe_arena_release_retraction() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.RequestRetraction.retraction)
  
  ::rti1516_2025::fedpro::MessageRetractionHandle* temp = _impl_.retraction_;
  _impl_.retraction_ = nullptr;
  return temp;
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* RequestRetraction::_internal_mutable_retraction() {
  
  if (_impl_.retraction_ == nullptr) {
    auto* p = CreateMaybeMessage<::rti1516_2025::fedpro::MessageRetractionHandle>(GetArenaForAllocation());
    _impl_.retraction_ = p;
  }
  return _impl_.retraction_;
}
inline ::rti1516_2025::fedpro::MessageRetractionHandle* RequestRetraction::mutable_retraction() {
  ::rti1516_2025::fedpro::MessageRetractionHandle* _msg = _internal_mutable_retraction();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.RequestRetraction.retraction)
  return _msg;
}
inline void RequestRetraction::set_allocated_retraction(::rti1516_2025::fedpro::MessageRetractionHandle* retraction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.retraction_);
  }
  if (retraction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(retraction));
    if (message_arena != submessage_arena) {
      retraction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, retraction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.retraction_ = retraction;
  // @@protoc_insertion_point(field_set_allocated:rti1516_2025.fedpro.RequestRetraction.retraction)
}

// -------------------------------------------------------------------

// CallbackSucceeded

// -------------------------------------------------------------------

// CallbackRequest

// .rti1516_2025.fedpro.ConnectionLost connectionLost = 1;
inline bool CallbackRequest::_internal_has_connectionlost() const {
  return callbackRequest_case() == kConnectionLost;
}
inline bool CallbackRequest::has_connectionlost() const {
  return _internal_has_connectionlost();
}
inline void CallbackRequest::set_has_connectionlost() {
  _impl_._oneof_case_[0] = kConnectionLost;
}
inline void CallbackRequest::clear_connectionlost() {
  if (_internal_has_connectionlost()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.connectionlost_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::ConnectionLost* CallbackRequest::release_connectionlost() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.connectionLost)
  if (_internal_has_connectionlost()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ConnectionLost* temp = _impl_.callbackRequest_.connectionlost_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.connectionlost_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ConnectionLost& CallbackRequest::_internal_connectionlost() const {
  return _internal_has_connectionlost()
      ? *_impl_.callbackRequest_.connectionlost_
      : reinterpret_cast< ::rti1516_2025::fedpro::ConnectionLost&>(::rti1516_2025::fedpro::_ConnectionLost_default_instance_);
}
inline const ::rti1516_2025::fedpro::ConnectionLost& CallbackRequest::connectionlost() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.connectionLost)
  return _internal_connectionlost();
}
inline ::rti1516_2025::fedpro::ConnectionLost* CallbackRequest::unsafe_arena_release_connectionlost() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.connectionLost)
  if (_internal_has_connectionlost()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ConnectionLost* temp = _impl_.callbackRequest_.connectionlost_;
    _impl_.callbackRequest_.connectionlost_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_connectionlost(::rti1516_2025::fedpro::ConnectionLost* connectionlost) {
  clear_callbackRequest();
  if (connectionlost) {
    set_has_connectionlost();
    _impl_.callbackRequest_.connectionlost_ = connectionlost;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.connectionLost)
}
inline ::rti1516_2025::fedpro::ConnectionLost* CallbackRequest::_internal_mutable_connectionlost() {
  if (!_internal_has_connectionlost()) {
    clear_callbackRequest();
    set_has_connectionlost();
    _impl_.callbackRequest_.connectionlost_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ConnectionLost >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.connectionlost_;
}
inline ::rti1516_2025::fedpro::ConnectionLost* CallbackRequest::mutable_connectionlost() {
  ::rti1516_2025::fedpro::ConnectionLost* _msg = _internal_mutable_connectionlost();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.connectionLost)
  return _msg;
}

// .rti1516_2025.fedpro.ReportFederationExecutions reportFederationExecutions = 2;
inline bool CallbackRequest::_internal_has_reportfederationexecutions() const {
  return callbackRequest_case() == kReportFederationExecutions;
}
inline bool CallbackRequest::has_reportfederationexecutions() const {
  return _internal_has_reportfederationexecutions();
}
inline void CallbackRequest::set_has_reportfederationexecutions() {
  _impl_._oneof_case_[0] = kReportFederationExecutions;
}
inline void CallbackRequest::clear_reportfederationexecutions() {
  if (_internal_has_reportfederationexecutions()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.reportfederationexecutions_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::ReportFederationExecutions* CallbackRequest::release_reportfederationexecutions() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.reportFederationExecutions)
  if (_internal_has_reportfederationexecutions()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReportFederationExecutions* temp = _impl_.callbackRequest_.reportfederationexecutions_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.reportfederationexecutions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ReportFederationExecutions& CallbackRequest::_internal_reportfederationexecutions() const {
  return _internal_has_reportfederationexecutions()
      ? *_impl_.callbackRequest_.reportfederationexecutions_
      : reinterpret_cast< ::rti1516_2025::fedpro::ReportFederationExecutions&>(::rti1516_2025::fedpro::_ReportFederationExecutions_default_instance_);
}
inline const ::rti1516_2025::fedpro::ReportFederationExecutions& CallbackRequest::reportfederationexecutions() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.reportFederationExecutions)
  return _internal_reportfederationexecutions();
}
inline ::rti1516_2025::fedpro::ReportFederationExecutions* CallbackRequest::unsafe_arena_release_reportfederationexecutions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.reportFederationExecutions)
  if (_internal_has_reportfederationexecutions()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReportFederationExecutions* temp = _impl_.callbackRequest_.reportfederationexecutions_;
    _impl_.callbackRequest_.reportfederationexecutions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_reportfederationexecutions(::rti1516_2025::fedpro::ReportFederationExecutions* reportfederationexecutions) {
  clear_callbackRequest();
  if (reportfederationexecutions) {
    set_has_reportfederationexecutions();
    _impl_.callbackRequest_.reportfederationexecutions_ = reportfederationexecutions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.reportFederationExecutions)
}
inline ::rti1516_2025::fedpro::ReportFederationExecutions* CallbackRequest::_internal_mutable_reportfederationexecutions() {
  if (!_internal_has_reportfederationexecutions()) {
    clear_callbackRequest();
    set_has_reportfederationexecutions();
    _impl_.callbackRequest_.reportfederationexecutions_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ReportFederationExecutions >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.reportfederationexecutions_;
}
inline ::rti1516_2025::fedpro::ReportFederationExecutions* CallbackRequest::mutable_reportfederationexecutions() {
  ::rti1516_2025::fedpro::ReportFederationExecutions* _msg = _internal_mutable_reportfederationexecutions();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.reportFederationExecutions)
  return _msg;
}

// .rti1516_2025.fedpro.ReportFederationExecutionMembers reportFederationExecutionMembers = 3;
inline bool CallbackRequest::_internal_has_reportfederationexecutionmembers() const {
  return callbackRequest_case() == kReportFederationExecutionMembers;
}
inline bool CallbackRequest::has_reportfederationexecutionmembers() const {
  return _internal_has_reportfederationexecutionmembers();
}
inline void CallbackRequest::set_has_reportfederationexecutionmembers() {
  _impl_._oneof_case_[0] = kReportFederationExecutionMembers;
}
inline void CallbackRequest::clear_reportfederationexecutionmembers() {
  if (_internal_has_reportfederationexecutionmembers()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.reportfederationexecutionmembers_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::ReportFederationExecutionMembers* CallbackRequest::release_reportfederationexecutionmembers() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.reportFederationExecutionMembers)
  if (_internal_has_reportfederationexecutionmembers()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReportFederationExecutionMembers* temp = _impl_.callbackRequest_.reportfederationexecutionmembers_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.reportfederationexecutionmembers_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ReportFederationExecutionMembers& CallbackRequest::_internal_reportfederationexecutionmembers() const {
  return _internal_has_reportfederationexecutionmembers()
      ? *_impl_.callbackRequest_.reportfederationexecutionmembers_
      : reinterpret_cast< ::rti1516_2025::fedpro::ReportFederationExecutionMembers&>(::rti1516_2025::fedpro::_ReportFederationExecutionMembers_default_instance_);
}
inline const ::rti1516_2025::fedpro::ReportFederationExecutionMembers& CallbackRequest::reportfederationexecutionmembers() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.reportFederationExecutionMembers)
  return _internal_reportfederationexecutionmembers();
}
inline ::rti1516_2025::fedpro::ReportFederationExecutionMembers* CallbackRequest::unsafe_arena_release_reportfederationexecutionmembers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.reportFederationExecutionMembers)
  if (_internal_has_reportfederationexecutionmembers()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReportFederationExecutionMembers* temp = _impl_.callbackRequest_.reportfederationexecutionmembers_;
    _impl_.callbackRequest_.reportfederationexecutionmembers_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_reportfederationexecutionmembers(::rti1516_2025::fedpro::ReportFederationExecutionMembers* reportfederationexecutionmembers) {
  clear_callbackRequest();
  if (reportfederationexecutionmembers) {
    set_has_reportfederationexecutionmembers();
    _impl_.callbackRequest_.reportfederationexecutionmembers_ = reportfederationexecutionmembers;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.reportFederationExecutionMembers)
}
inline ::rti1516_2025::fedpro::ReportFederationExecutionMembers* CallbackRequest::_internal_mutable_reportfederationexecutionmembers() {
  if (!_internal_has_reportfederationexecutionmembers()) {
    clear_callbackRequest();
    set_has_reportfederationexecutionmembers();
    _impl_.callbackRequest_.reportfederationexecutionmembers_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ReportFederationExecutionMembers >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.reportfederationexecutionmembers_;
}
inline ::rti1516_2025::fedpro::ReportFederationExecutionMembers* CallbackRequest::mutable_reportfederationexecutionmembers() {
  ::rti1516_2025::fedpro::ReportFederationExecutionMembers* _msg = _internal_mutable_reportfederationexecutionmembers();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.reportFederationExecutionMembers)
  return _msg;
}

// .rti1516_2025.fedpro.ReportFederationExecutionDoesNotExist reportFederationExecutionDoesNotExist = 4;
inline bool CallbackRequest::_internal_has_reportfederationexecutiondoesnotexist() const {
  return callbackRequest_case() == kReportFederationExecutionDoesNotExist;
}
inline bool CallbackRequest::has_reportfederationexecutiondoesnotexist() const {
  return _internal_has_reportfederationexecutiondoesnotexist();
}
inline void CallbackRequest::set_has_reportfederationexecutiondoesnotexist() {
  _impl_._oneof_case_[0] = kReportFederationExecutionDoesNotExist;
}
inline void CallbackRequest::clear_reportfederationexecutiondoesnotexist() {
  if (_internal_has_reportfederationexecutiondoesnotexist()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.reportfederationexecutiondoesnotexist_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist* CallbackRequest::release_reportfederationexecutiondoesnotexist() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.reportFederationExecutionDoesNotExist)
  if (_internal_has_reportfederationexecutiondoesnotexist()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist* temp = _impl_.callbackRequest_.reportfederationexecutiondoesnotexist_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.reportfederationexecutiondoesnotexist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist& CallbackRequest::_internal_reportfederationexecutiondoesnotexist() const {
  return _internal_has_reportfederationexecutiondoesnotexist()
      ? *_impl_.callbackRequest_.reportfederationexecutiondoesnotexist_
      : reinterpret_cast< ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist&>(::rti1516_2025::fedpro::_ReportFederationExecutionDoesNotExist_default_instance_);
}
inline const ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist& CallbackRequest::reportfederationexecutiondoesnotexist() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.reportFederationExecutionDoesNotExist)
  return _internal_reportfederationexecutiondoesnotexist();
}
inline ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist* CallbackRequest::unsafe_arena_release_reportfederationexecutiondoesnotexist() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.reportFederationExecutionDoesNotExist)
  if (_internal_has_reportfederationexecutiondoesnotexist()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist* temp = _impl_.callbackRequest_.reportfederationexecutiondoesnotexist_;
    _impl_.callbackRequest_.reportfederationexecutiondoesnotexist_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_reportfederationexecutiondoesnotexist(::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist* reportfederationexecutiondoesnotexist) {
  clear_callbackRequest();
  if (reportfederationexecutiondoesnotexist) {
    set_has_reportfederationexecutiondoesnotexist();
    _impl_.callbackRequest_.reportfederationexecutiondoesnotexist_ = reportfederationexecutiondoesnotexist;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.reportFederationExecutionDoesNotExist)
}
inline ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist* CallbackRequest::_internal_mutable_reportfederationexecutiondoesnotexist() {
  if (!_internal_has_reportfederationexecutiondoesnotexist()) {
    clear_callbackRequest();
    set_has_reportfederationexecutiondoesnotexist();
    _impl_.callbackRequest_.reportfederationexecutiondoesnotexist_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.reportfederationexecutiondoesnotexist_;
}
inline ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist* CallbackRequest::mutable_reportfederationexecutiondoesnotexist() {
  ::rti1516_2025::fedpro::ReportFederationExecutionDoesNotExist* _msg = _internal_mutable_reportfederationexecutiondoesnotexist();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.reportFederationExecutionDoesNotExist)
  return _msg;
}

// .rti1516_2025.fedpro.FederateResigned federateResigned = 5;
inline bool CallbackRequest::_internal_has_federateresigned() const {
  return callbackRequest_case() == kFederateResigned;
}
inline bool CallbackRequest::has_federateresigned() const {
  return _internal_has_federateresigned();
}
inline void CallbackRequest::set_has_federateresigned() {
  _impl_._oneof_case_[0] = kFederateResigned;
}
inline void CallbackRequest::clear_federateresigned() {
  if (_internal_has_federateresigned()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.federateresigned_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::FederateResigned* CallbackRequest::release_federateresigned() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.federateResigned)
  if (_internal_has_federateresigned()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FederateResigned* temp = _impl_.callbackRequest_.federateresigned_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.federateresigned_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::FederateResigned& CallbackRequest::_internal_federateresigned() const {
  return _internal_has_federateresigned()
      ? *_impl_.callbackRequest_.federateresigned_
      : reinterpret_cast< ::rti1516_2025::fedpro::FederateResigned&>(::rti1516_2025::fedpro::_FederateResigned_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederateResigned& CallbackRequest::federateresigned() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.federateResigned)
  return _internal_federateresigned();
}
inline ::rti1516_2025::fedpro::FederateResigned* CallbackRequest::unsafe_arena_release_federateresigned() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.federateResigned)
  if (_internal_has_federateresigned()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FederateResigned* temp = _impl_.callbackRequest_.federateresigned_;
    _impl_.callbackRequest_.federateresigned_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_federateresigned(::rti1516_2025::fedpro::FederateResigned* federateresigned) {
  clear_callbackRequest();
  if (federateresigned) {
    set_has_federateresigned();
    _impl_.callbackRequest_.federateresigned_ = federateresigned;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.federateResigned)
}
inline ::rti1516_2025::fedpro::FederateResigned* CallbackRequest::_internal_mutable_federateresigned() {
  if (!_internal_has_federateresigned()) {
    clear_callbackRequest();
    set_has_federateresigned();
    _impl_.callbackRequest_.federateresigned_ = CreateMaybeMessage< ::rti1516_2025::fedpro::FederateResigned >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.federateresigned_;
}
inline ::rti1516_2025::fedpro::FederateResigned* CallbackRequest::mutable_federateresigned() {
  ::rti1516_2025::fedpro::FederateResigned* _msg = _internal_mutable_federateresigned();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.federateResigned)
  return _msg;
}

// .rti1516_2025.fedpro.SynchronizationPointRegistrationSucceeded synchronizationPointRegistrationSucceeded = 6;
inline bool CallbackRequest::_internal_has_synchronizationpointregistrationsucceeded() const {
  return callbackRequest_case() == kSynchronizationPointRegistrationSucceeded;
}
inline bool CallbackRequest::has_synchronizationpointregistrationsucceeded() const {
  return _internal_has_synchronizationpointregistrationsucceeded();
}
inline void CallbackRequest::set_has_synchronizationpointregistrationsucceeded() {
  _impl_._oneof_case_[0] = kSynchronizationPointRegistrationSucceeded;
}
inline void CallbackRequest::clear_synchronizationpointregistrationsucceeded() {
  if (_internal_has_synchronizationpointregistrationsucceeded()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.synchronizationpointregistrationsucceeded_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded* CallbackRequest::release_synchronizationpointregistrationsucceeded() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.synchronizationPointRegistrationSucceeded)
  if (_internal_has_synchronizationpointregistrationsucceeded()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded* temp = _impl_.callbackRequest_.synchronizationpointregistrationsucceeded_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.synchronizationpointregistrationsucceeded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded& CallbackRequest::_internal_synchronizationpointregistrationsucceeded() const {
  return _internal_has_synchronizationpointregistrationsucceeded()
      ? *_impl_.callbackRequest_.synchronizationpointregistrationsucceeded_
      : reinterpret_cast< ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded&>(::rti1516_2025::fedpro::_SynchronizationPointRegistrationSucceeded_default_instance_);
}
inline const ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded& CallbackRequest::synchronizationpointregistrationsucceeded() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.synchronizationPointRegistrationSucceeded)
  return _internal_synchronizationpointregistrationsucceeded();
}
inline ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded* CallbackRequest::unsafe_arena_release_synchronizationpointregistrationsucceeded() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.synchronizationPointRegistrationSucceeded)
  if (_internal_has_synchronizationpointregistrationsucceeded()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded* temp = _impl_.callbackRequest_.synchronizationpointregistrationsucceeded_;
    _impl_.callbackRequest_.synchronizationpointregistrationsucceeded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_synchronizationpointregistrationsucceeded(::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded* synchronizationpointregistrationsucceeded) {
  clear_callbackRequest();
  if (synchronizationpointregistrationsucceeded) {
    set_has_synchronizationpointregistrationsucceeded();
    _impl_.callbackRequest_.synchronizationpointregistrationsucceeded_ = synchronizationpointregistrationsucceeded;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.synchronizationPointRegistrationSucceeded)
}
inline ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded* CallbackRequest::_internal_mutable_synchronizationpointregistrationsucceeded() {
  if (!_internal_has_synchronizationpointregistrationsucceeded()) {
    clear_callbackRequest();
    set_has_synchronizationpointregistrationsucceeded();
    _impl_.callbackRequest_.synchronizationpointregistrationsucceeded_ = CreateMaybeMessage< ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.synchronizationpointregistrationsucceeded_;
}
inline ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded* CallbackRequest::mutable_synchronizationpointregistrationsucceeded() {
  ::rti1516_2025::fedpro::SynchronizationPointRegistrationSucceeded* _msg = _internal_mutable_synchronizationpointregistrationsucceeded();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.synchronizationPointRegistrationSucceeded)
  return _msg;
}

// .rti1516_2025.fedpro.SynchronizationPointRegistrationFailed synchronizationPointRegistrationFailed = 7;
inline bool CallbackRequest::_internal_has_synchronizationpointregistrationfailed() const {
  return callbackRequest_case() == kSynchronizationPointRegistrationFailed;
}
inline bool CallbackRequest::has_synchronizationpointregistrationfailed() const {
  return _internal_has_synchronizationpointregistrationfailed();
}
inline void CallbackRequest::set_has_synchronizationpointregistrationfailed() {
  _impl_._oneof_case_[0] = kSynchronizationPointRegistrationFailed;
}
inline void CallbackRequest::clear_synchronizationpointregistrationfailed() {
  if (_internal_has_synchronizationpointregistrationfailed()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.synchronizationpointregistrationfailed_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed* CallbackRequest::release_synchronizationpointregistrationfailed() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.synchronizationPointRegistrationFailed)
  if (_internal_has_synchronizationpointregistrationfailed()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed* temp = _impl_.callbackRequest_.synchronizationpointregistrationfailed_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.synchronizationpointregistrationfailed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed& CallbackRequest::_internal_synchronizationpointregistrationfailed() const {
  return _internal_has_synchronizationpointregistrationfailed()
      ? *_impl_.callbackRequest_.synchronizationpointregistrationfailed_
      : reinterpret_cast< ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed&>(::rti1516_2025::fedpro::_SynchronizationPointRegistrationFailed_default_instance_);
}
inline const ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed& CallbackRequest::synchronizationpointregistrationfailed() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.synchronizationPointRegistrationFailed)
  return _internal_synchronizationpointregistrationfailed();
}
inline ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed* CallbackRequest::unsafe_arena_release_synchronizationpointregistrationfailed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.synchronizationPointRegistrationFailed)
  if (_internal_has_synchronizationpointregistrationfailed()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed* temp = _impl_.callbackRequest_.synchronizationpointregistrationfailed_;
    _impl_.callbackRequest_.synchronizationpointregistrationfailed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_synchronizationpointregistrationfailed(::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed* synchronizationpointregistrationfailed) {
  clear_callbackRequest();
  if (synchronizationpointregistrationfailed) {
    set_has_synchronizationpointregistrationfailed();
    _impl_.callbackRequest_.synchronizationpointregistrationfailed_ = synchronizationpointregistrationfailed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.synchronizationPointRegistrationFailed)
}
inline ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed* CallbackRequest::_internal_mutable_synchronizationpointregistrationfailed() {
  if (!_internal_has_synchronizationpointregistrationfailed()) {
    clear_callbackRequest();
    set_has_synchronizationpointregistrationfailed();
    _impl_.callbackRequest_.synchronizationpointregistrationfailed_ = CreateMaybeMessage< ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.synchronizationpointregistrationfailed_;
}
inline ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed* CallbackRequest::mutable_synchronizationpointregistrationfailed() {
  ::rti1516_2025::fedpro::SynchronizationPointRegistrationFailed* _msg = _internal_mutable_synchronizationpointregistrationfailed();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.synchronizationPointRegistrationFailed)
  return _msg;
}

// .rti1516_2025.fedpro.AnnounceSynchronizationPoint announceSynchronizationPoint = 8;
inline bool CallbackRequest::_internal_has_announcesynchronizationpoint() const {
  return callbackRequest_case() == kAnnounceSynchronizationPoint;
}
inline bool CallbackRequest::has_announcesynchronizationpoint() const {
  return _internal_has_announcesynchronizationpoint();
}
inline void CallbackRequest::set_has_announcesynchronizationpoint() {
  _impl_._oneof_case_[0] = kAnnounceSynchronizationPoint;
}
inline void CallbackRequest::clear_announcesynchronizationpoint() {
  if (_internal_has_announcesynchronizationpoint()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.announcesynchronizationpoint_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::AnnounceSynchronizationPoint* CallbackRequest::release_announcesynchronizationpoint() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.announceSynchronizationPoint)
  if (_internal_has_announcesynchronizationpoint()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::AnnounceSynchronizationPoint* temp = _impl_.callbackRequest_.announcesynchronizationpoint_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.announcesynchronizationpoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::AnnounceSynchronizationPoint& CallbackRequest::_internal_announcesynchronizationpoint() const {
  return _internal_has_announcesynchronizationpoint()
      ? *_impl_.callbackRequest_.announcesynchronizationpoint_
      : reinterpret_cast< ::rti1516_2025::fedpro::AnnounceSynchronizationPoint&>(::rti1516_2025::fedpro::_AnnounceSynchronizationPoint_default_instance_);
}
inline const ::rti1516_2025::fedpro::AnnounceSynchronizationPoint& CallbackRequest::announcesynchronizationpoint() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.announceSynchronizationPoint)
  return _internal_announcesynchronizationpoint();
}
inline ::rti1516_2025::fedpro::AnnounceSynchronizationPoint* CallbackRequest::unsafe_arena_release_announcesynchronizationpoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.announceSynchronizationPoint)
  if (_internal_has_announcesynchronizationpoint()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::AnnounceSynchronizationPoint* temp = _impl_.callbackRequest_.announcesynchronizationpoint_;
    _impl_.callbackRequest_.announcesynchronizationpoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_announcesynchronizationpoint(::rti1516_2025::fedpro::AnnounceSynchronizationPoint* announcesynchronizationpoint) {
  clear_callbackRequest();
  if (announcesynchronizationpoint) {
    set_has_announcesynchronizationpoint();
    _impl_.callbackRequest_.announcesynchronizationpoint_ = announcesynchronizationpoint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.announceSynchronizationPoint)
}
inline ::rti1516_2025::fedpro::AnnounceSynchronizationPoint* CallbackRequest::_internal_mutable_announcesynchronizationpoint() {
  if (!_internal_has_announcesynchronizationpoint()) {
    clear_callbackRequest();
    set_has_announcesynchronizationpoint();
    _impl_.callbackRequest_.announcesynchronizationpoint_ = CreateMaybeMessage< ::rti1516_2025::fedpro::AnnounceSynchronizationPoint >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.announcesynchronizationpoint_;
}
inline ::rti1516_2025::fedpro::AnnounceSynchronizationPoint* CallbackRequest::mutable_announcesynchronizationpoint() {
  ::rti1516_2025::fedpro::AnnounceSynchronizationPoint* _msg = _internal_mutable_announcesynchronizationpoint();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.announceSynchronizationPoint)
  return _msg;
}

// .rti1516_2025.fedpro.FederationSynchronized federationSynchronized = 9;
inline bool CallbackRequest::_internal_has_federationsynchronized() const {
  return callbackRequest_case() == kFederationSynchronized;
}
inline bool CallbackRequest::has_federationsynchronized() const {
  return _internal_has_federationsynchronized();
}
inline void CallbackRequest::set_has_federationsynchronized() {
  _impl_._oneof_case_[0] = kFederationSynchronized;
}
inline void CallbackRequest::clear_federationsynchronized() {
  if (_internal_has_federationsynchronized()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.federationsynchronized_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::FederationSynchronized* CallbackRequest::release_federationsynchronized() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.federationSynchronized)
  if (_internal_has_federationsynchronized()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FederationSynchronized* temp = _impl_.callbackRequest_.federationsynchronized_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.federationsynchronized_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::FederationSynchronized& CallbackRequest::_internal_federationsynchronized() const {
  return _internal_has_federationsynchronized()
      ? *_impl_.callbackRequest_.federationsynchronized_
      : reinterpret_cast< ::rti1516_2025::fedpro::FederationSynchronized&>(::rti1516_2025::fedpro::_FederationSynchronized_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederationSynchronized& CallbackRequest::federationsynchronized() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.federationSynchronized)
  return _internal_federationsynchronized();
}
inline ::rti1516_2025::fedpro::FederationSynchronized* CallbackRequest::unsafe_arena_release_federationsynchronized() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.federationSynchronized)
  if (_internal_has_federationsynchronized()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FederationSynchronized* temp = _impl_.callbackRequest_.federationsynchronized_;
    _impl_.callbackRequest_.federationsynchronized_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_federationsynchronized(::rti1516_2025::fedpro::FederationSynchronized* federationsynchronized) {
  clear_callbackRequest();
  if (federationsynchronized) {
    set_has_federationsynchronized();
    _impl_.callbackRequest_.federationsynchronized_ = federationsynchronized;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.federationSynchronized)
}
inline ::rti1516_2025::fedpro::FederationSynchronized* CallbackRequest::_internal_mutable_federationsynchronized() {
  if (!_internal_has_federationsynchronized()) {
    clear_callbackRequest();
    set_has_federationsynchronized();
    _impl_.callbackRequest_.federationsynchronized_ = CreateMaybeMessage< ::rti1516_2025::fedpro::FederationSynchronized >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.federationsynchronized_;
}
inline ::rti1516_2025::fedpro::FederationSynchronized* CallbackRequest::mutable_federationsynchronized() {
  ::rti1516_2025::fedpro::FederationSynchronized* _msg = _internal_mutable_federationsynchronized();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.federationSynchronized)
  return _msg;
}

// .rti1516_2025.fedpro.InitiateFederateSave initiateFederateSave = 10;
inline bool CallbackRequest::_internal_has_initiatefederatesave() const {
  return callbackRequest_case() == kInitiateFederateSave;
}
inline bool CallbackRequest::has_initiatefederatesave() const {
  return _internal_has_initiatefederatesave();
}
inline void CallbackRequest::set_has_initiatefederatesave() {
  _impl_._oneof_case_[0] = kInitiateFederateSave;
}
inline void CallbackRequest::clear_initiatefederatesave() {
  if (_internal_has_initiatefederatesave()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.initiatefederatesave_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::InitiateFederateSave* CallbackRequest::release_initiatefederatesave() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.initiateFederateSave)
  if (_internal_has_initiatefederatesave()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::InitiateFederateSave* temp = _impl_.callbackRequest_.initiatefederatesave_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.initiatefederatesave_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::InitiateFederateSave& CallbackRequest::_internal_initiatefederatesave() const {
  return _internal_has_initiatefederatesave()
      ? *_impl_.callbackRequest_.initiatefederatesave_
      : reinterpret_cast< ::rti1516_2025::fedpro::InitiateFederateSave&>(::rti1516_2025::fedpro::_InitiateFederateSave_default_instance_);
}
inline const ::rti1516_2025::fedpro::InitiateFederateSave& CallbackRequest::initiatefederatesave() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.initiateFederateSave)
  return _internal_initiatefederatesave();
}
inline ::rti1516_2025::fedpro::InitiateFederateSave* CallbackRequest::unsafe_arena_release_initiatefederatesave() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.initiateFederateSave)
  if (_internal_has_initiatefederatesave()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::InitiateFederateSave* temp = _impl_.callbackRequest_.initiatefederatesave_;
    _impl_.callbackRequest_.initiatefederatesave_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_initiatefederatesave(::rti1516_2025::fedpro::InitiateFederateSave* initiatefederatesave) {
  clear_callbackRequest();
  if (initiatefederatesave) {
    set_has_initiatefederatesave();
    _impl_.callbackRequest_.initiatefederatesave_ = initiatefederatesave;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.initiateFederateSave)
}
inline ::rti1516_2025::fedpro::InitiateFederateSave* CallbackRequest::_internal_mutable_initiatefederatesave() {
  if (!_internal_has_initiatefederatesave()) {
    clear_callbackRequest();
    set_has_initiatefederatesave();
    _impl_.callbackRequest_.initiatefederatesave_ = CreateMaybeMessage< ::rti1516_2025::fedpro::InitiateFederateSave >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.initiatefederatesave_;
}
inline ::rti1516_2025::fedpro::InitiateFederateSave* CallbackRequest::mutable_initiatefederatesave() {
  ::rti1516_2025::fedpro::InitiateFederateSave* _msg = _internal_mutable_initiatefederatesave();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.initiateFederateSave)
  return _msg;
}

// .rti1516_2025.fedpro.InitiateFederateSaveWithTime initiateFederateSaveWithTime = 11;
inline bool CallbackRequest::_internal_has_initiatefederatesavewithtime() const {
  return callbackRequest_case() == kInitiateFederateSaveWithTime;
}
inline bool CallbackRequest::has_initiatefederatesavewithtime() const {
  return _internal_has_initiatefederatesavewithtime();
}
inline void CallbackRequest::set_has_initiatefederatesavewithtime() {
  _impl_._oneof_case_[0] = kInitiateFederateSaveWithTime;
}
inline void CallbackRequest::clear_initiatefederatesavewithtime() {
  if (_internal_has_initiatefederatesavewithtime()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.initiatefederatesavewithtime_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::InitiateFederateSaveWithTime* CallbackRequest::release_initiatefederatesavewithtime() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.initiateFederateSaveWithTime)
  if (_internal_has_initiatefederatesavewithtime()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::InitiateFederateSaveWithTime* temp = _impl_.callbackRequest_.initiatefederatesavewithtime_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.initiatefederatesavewithtime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::InitiateFederateSaveWithTime& CallbackRequest::_internal_initiatefederatesavewithtime() const {
  return _internal_has_initiatefederatesavewithtime()
      ? *_impl_.callbackRequest_.initiatefederatesavewithtime_
      : reinterpret_cast< ::rti1516_2025::fedpro::InitiateFederateSaveWithTime&>(::rti1516_2025::fedpro::_InitiateFederateSaveWithTime_default_instance_);
}
inline const ::rti1516_2025::fedpro::InitiateFederateSaveWithTime& CallbackRequest::initiatefederatesavewithtime() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.initiateFederateSaveWithTime)
  return _internal_initiatefederatesavewithtime();
}
inline ::rti1516_2025::fedpro::InitiateFederateSaveWithTime* CallbackRequest::unsafe_arena_release_initiatefederatesavewithtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.initiateFederateSaveWithTime)
  if (_internal_has_initiatefederatesavewithtime()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::InitiateFederateSaveWithTime* temp = _impl_.callbackRequest_.initiatefederatesavewithtime_;
    _impl_.callbackRequest_.initiatefederatesavewithtime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_initiatefederatesavewithtime(::rti1516_2025::fedpro::InitiateFederateSaveWithTime* initiatefederatesavewithtime) {
  clear_callbackRequest();
  if (initiatefederatesavewithtime) {
    set_has_initiatefederatesavewithtime();
    _impl_.callbackRequest_.initiatefederatesavewithtime_ = initiatefederatesavewithtime;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.initiateFederateSaveWithTime)
}
inline ::rti1516_2025::fedpro::InitiateFederateSaveWithTime* CallbackRequest::_internal_mutable_initiatefederatesavewithtime() {
  if (!_internal_has_initiatefederatesavewithtime()) {
    clear_callbackRequest();
    set_has_initiatefederatesavewithtime();
    _impl_.callbackRequest_.initiatefederatesavewithtime_ = CreateMaybeMessage< ::rti1516_2025::fedpro::InitiateFederateSaveWithTime >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.initiatefederatesavewithtime_;
}
inline ::rti1516_2025::fedpro::InitiateFederateSaveWithTime* CallbackRequest::mutable_initiatefederatesavewithtime() {
  ::rti1516_2025::fedpro::InitiateFederateSaveWithTime* _msg = _internal_mutable_initiatefederatesavewithtime();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.initiateFederateSaveWithTime)
  return _msg;
}

// .rti1516_2025.fedpro.FederationSaved federationSaved = 12;
inline bool CallbackRequest::_internal_has_federationsaved() const {
  return callbackRequest_case() == kFederationSaved;
}
inline bool CallbackRequest::has_federationsaved() const {
  return _internal_has_federationsaved();
}
inline void CallbackRequest::set_has_federationsaved() {
  _impl_._oneof_case_[0] = kFederationSaved;
}
inline void CallbackRequest::clear_federationsaved() {
  if (_internal_has_federationsaved()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.federationsaved_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::FederationSaved* CallbackRequest::release_federationsaved() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.federationSaved)
  if (_internal_has_federationsaved()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FederationSaved* temp = _impl_.callbackRequest_.federationsaved_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.federationsaved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::FederationSaved& CallbackRequest::_internal_federationsaved() const {
  return _internal_has_federationsaved()
      ? *_impl_.callbackRequest_.federationsaved_
      : reinterpret_cast< ::rti1516_2025::fedpro::FederationSaved&>(::rti1516_2025::fedpro::_FederationSaved_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederationSaved& CallbackRequest::federationsaved() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.federationSaved)
  return _internal_federationsaved();
}
inline ::rti1516_2025::fedpro::FederationSaved* CallbackRequest::unsafe_arena_release_federationsaved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.federationSaved)
  if (_internal_has_federationsaved()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FederationSaved* temp = _impl_.callbackRequest_.federationsaved_;
    _impl_.callbackRequest_.federationsaved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_federationsaved(::rti1516_2025::fedpro::FederationSaved* federationsaved) {
  clear_callbackRequest();
  if (federationsaved) {
    set_has_federationsaved();
    _impl_.callbackRequest_.federationsaved_ = federationsaved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.federationSaved)
}
inline ::rti1516_2025::fedpro::FederationSaved* CallbackRequest::_internal_mutable_federationsaved() {
  if (!_internal_has_federationsaved()) {
    clear_callbackRequest();
    set_has_federationsaved();
    _impl_.callbackRequest_.federationsaved_ = CreateMaybeMessage< ::rti1516_2025::fedpro::FederationSaved >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.federationsaved_;
}
inline ::rti1516_2025::fedpro::FederationSaved* CallbackRequest::mutable_federationsaved() {
  ::rti1516_2025::fedpro::FederationSaved* _msg = _internal_mutable_federationsaved();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.federationSaved)
  return _msg;
}

// .rti1516_2025.fedpro.FederationNotSaved federationNotSaved = 13;
inline bool CallbackRequest::_internal_has_federationnotsaved() const {
  return callbackRequest_case() == kFederationNotSaved;
}
inline bool CallbackRequest::has_federationnotsaved() const {
  return _internal_has_federationnotsaved();
}
inline void CallbackRequest::set_has_federationnotsaved() {
  _impl_._oneof_case_[0] = kFederationNotSaved;
}
inline void CallbackRequest::clear_federationnotsaved() {
  if (_internal_has_federationnotsaved()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.federationnotsaved_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::FederationNotSaved* CallbackRequest::release_federationnotsaved() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.federationNotSaved)
  if (_internal_has_federationnotsaved()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FederationNotSaved* temp = _impl_.callbackRequest_.federationnotsaved_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.federationnotsaved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::FederationNotSaved& CallbackRequest::_internal_federationnotsaved() const {
  return _internal_has_federationnotsaved()
      ? *_impl_.callbackRequest_.federationnotsaved_
      : reinterpret_cast< ::rti1516_2025::fedpro::FederationNotSaved&>(::rti1516_2025::fedpro::_FederationNotSaved_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederationNotSaved& CallbackRequest::federationnotsaved() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.federationNotSaved)
  return _internal_federationnotsaved();
}
inline ::rti1516_2025::fedpro::FederationNotSaved* CallbackRequest::unsafe_arena_release_federationnotsaved() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.federationNotSaved)
  if (_internal_has_federationnotsaved()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FederationNotSaved* temp = _impl_.callbackRequest_.federationnotsaved_;
    _impl_.callbackRequest_.federationnotsaved_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_federationnotsaved(::rti1516_2025::fedpro::FederationNotSaved* federationnotsaved) {
  clear_callbackRequest();
  if (federationnotsaved) {
    set_has_federationnotsaved();
    _impl_.callbackRequest_.federationnotsaved_ = federationnotsaved;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.federationNotSaved)
}
inline ::rti1516_2025::fedpro::FederationNotSaved* CallbackRequest::_internal_mutable_federationnotsaved() {
  if (!_internal_has_federationnotsaved()) {
    clear_callbackRequest();
    set_has_federationnotsaved();
    _impl_.callbackRequest_.federationnotsaved_ = CreateMaybeMessage< ::rti1516_2025::fedpro::FederationNotSaved >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.federationnotsaved_;
}
inline ::rti1516_2025::fedpro::FederationNotSaved* CallbackRequest::mutable_federationnotsaved() {
  ::rti1516_2025::fedpro::FederationNotSaved* _msg = _internal_mutable_federationnotsaved();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.federationNotSaved)
  return _msg;
}

// .rti1516_2025.fedpro.FederationSaveStatusResponse federationSaveStatusResponse = 14;
inline bool CallbackRequest::_internal_has_federationsavestatusresponse() const {
  return callbackRequest_case() == kFederationSaveStatusResponse;
}
inline bool CallbackRequest::has_federationsavestatusresponse() const {
  return _internal_has_federationsavestatusresponse();
}
inline void CallbackRequest::set_has_federationsavestatusresponse() {
  _impl_._oneof_case_[0] = kFederationSaveStatusResponse;
}
inline void CallbackRequest::clear_federationsavestatusresponse() {
  if (_internal_has_federationsavestatusresponse()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.federationsavestatusresponse_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::FederationSaveStatusResponse* CallbackRequest::release_federationsavestatusresponse() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.federationSaveStatusResponse)
  if (_internal_has_federationsavestatusresponse()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FederationSaveStatusResponse* temp = _impl_.callbackRequest_.federationsavestatusresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.federationsavestatusresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::FederationSaveStatusResponse& CallbackRequest::_internal_federationsavestatusresponse() const {
  return _internal_has_federationsavestatusresponse()
      ? *_impl_.callbackRequest_.federationsavestatusresponse_
      : reinterpret_cast< ::rti1516_2025::fedpro::FederationSaveStatusResponse&>(::rti1516_2025::fedpro::_FederationSaveStatusResponse_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederationSaveStatusResponse& CallbackRequest::federationsavestatusresponse() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.federationSaveStatusResponse)
  return _internal_federationsavestatusresponse();
}
inline ::rti1516_2025::fedpro::FederationSaveStatusResponse* CallbackRequest::unsafe_arena_release_federationsavestatusresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.federationSaveStatusResponse)
  if (_internal_has_federationsavestatusresponse()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FederationSaveStatusResponse* temp = _impl_.callbackRequest_.federationsavestatusresponse_;
    _impl_.callbackRequest_.federationsavestatusresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_federationsavestatusresponse(::rti1516_2025::fedpro::FederationSaveStatusResponse* federationsavestatusresponse) {
  clear_callbackRequest();
  if (federationsavestatusresponse) {
    set_has_federationsavestatusresponse();
    _impl_.callbackRequest_.federationsavestatusresponse_ = federationsavestatusresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.federationSaveStatusResponse)
}
inline ::rti1516_2025::fedpro::FederationSaveStatusResponse* CallbackRequest::_internal_mutable_federationsavestatusresponse() {
  if (!_internal_has_federationsavestatusresponse()) {
    clear_callbackRequest();
    set_has_federationsavestatusresponse();
    _impl_.callbackRequest_.federationsavestatusresponse_ = CreateMaybeMessage< ::rti1516_2025::fedpro::FederationSaveStatusResponse >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.federationsavestatusresponse_;
}
inline ::rti1516_2025::fedpro::FederationSaveStatusResponse* CallbackRequest::mutable_federationsavestatusresponse() {
  ::rti1516_2025::fedpro::FederationSaveStatusResponse* _msg = _internal_mutable_federationsavestatusresponse();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.federationSaveStatusResponse)
  return _msg;
}

// .rti1516_2025.fedpro.RequestFederationRestoreSucceeded requestFederationRestoreSucceeded = 15;
inline bool CallbackRequest::_internal_has_requestfederationrestoresucceeded() const {
  return callbackRequest_case() == kRequestFederationRestoreSucceeded;
}
inline bool CallbackRequest::has_requestfederationrestoresucceeded() const {
  return _internal_has_requestfederationrestoresucceeded();
}
inline void CallbackRequest::set_has_requestfederationrestoresucceeded() {
  _impl_._oneof_case_[0] = kRequestFederationRestoreSucceeded;
}
inline void CallbackRequest::clear_requestfederationrestoresucceeded() {
  if (_internal_has_requestfederationrestoresucceeded()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.requestfederationrestoresucceeded_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded* CallbackRequest::release_requestfederationrestoresucceeded() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.requestFederationRestoreSucceeded)
  if (_internal_has_requestfederationrestoresucceeded()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded* temp = _impl_.callbackRequest_.requestfederationrestoresucceeded_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.requestfederationrestoresucceeded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded& CallbackRequest::_internal_requestfederationrestoresucceeded() const {
  return _internal_has_requestfederationrestoresucceeded()
      ? *_impl_.callbackRequest_.requestfederationrestoresucceeded_
      : reinterpret_cast< ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded&>(::rti1516_2025::fedpro::_RequestFederationRestoreSucceeded_default_instance_);
}
inline const ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded& CallbackRequest::requestfederationrestoresucceeded() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.requestFederationRestoreSucceeded)
  return _internal_requestfederationrestoresucceeded();
}
inline ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded* CallbackRequest::unsafe_arena_release_requestfederationrestoresucceeded() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.requestFederationRestoreSucceeded)
  if (_internal_has_requestfederationrestoresucceeded()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded* temp = _impl_.callbackRequest_.requestfederationrestoresucceeded_;
    _impl_.callbackRequest_.requestfederationrestoresucceeded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_requestfederationrestoresucceeded(::rti1516_2025::fedpro::RequestFederationRestoreSucceeded* requestfederationrestoresucceeded) {
  clear_callbackRequest();
  if (requestfederationrestoresucceeded) {
    set_has_requestfederationrestoresucceeded();
    _impl_.callbackRequest_.requestfederationrestoresucceeded_ = requestfederationrestoresucceeded;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.requestFederationRestoreSucceeded)
}
inline ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded* CallbackRequest::_internal_mutable_requestfederationrestoresucceeded() {
  if (!_internal_has_requestfederationrestoresucceeded()) {
    clear_callbackRequest();
    set_has_requestfederationrestoresucceeded();
    _impl_.callbackRequest_.requestfederationrestoresucceeded_ = CreateMaybeMessage< ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.requestfederationrestoresucceeded_;
}
inline ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded* CallbackRequest::mutable_requestfederationrestoresucceeded() {
  ::rti1516_2025::fedpro::RequestFederationRestoreSucceeded* _msg = _internal_mutable_requestfederationrestoresucceeded();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.requestFederationRestoreSucceeded)
  return _msg;
}

// .rti1516_2025.fedpro.RequestFederationRestoreFailed requestFederationRestoreFailed = 16;
inline bool CallbackRequest::_internal_has_requestfederationrestorefailed() const {
  return callbackRequest_case() == kRequestFederationRestoreFailed;
}
inline bool CallbackRequest::has_requestfederationrestorefailed() const {
  return _internal_has_requestfederationrestorefailed();
}
inline void CallbackRequest::set_has_requestfederationrestorefailed() {
  _impl_._oneof_case_[0] = kRequestFederationRestoreFailed;
}
inline void CallbackRequest::clear_requestfederationrestorefailed() {
  if (_internal_has_requestfederationrestorefailed()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.requestfederationrestorefailed_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::RequestFederationRestoreFailed* CallbackRequest::release_requestfederationrestorefailed() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.requestFederationRestoreFailed)
  if (_internal_has_requestfederationrestorefailed()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::RequestFederationRestoreFailed* temp = _impl_.callbackRequest_.requestfederationrestorefailed_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.requestfederationrestorefailed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::RequestFederationRestoreFailed& CallbackRequest::_internal_requestfederationrestorefailed() const {
  return _internal_has_requestfederationrestorefailed()
      ? *_impl_.callbackRequest_.requestfederationrestorefailed_
      : reinterpret_cast< ::rti1516_2025::fedpro::RequestFederationRestoreFailed&>(::rti1516_2025::fedpro::_RequestFederationRestoreFailed_default_instance_);
}
inline const ::rti1516_2025::fedpro::RequestFederationRestoreFailed& CallbackRequest::requestfederationrestorefailed() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.requestFederationRestoreFailed)
  return _internal_requestfederationrestorefailed();
}
inline ::rti1516_2025::fedpro::RequestFederationRestoreFailed* CallbackRequest::unsafe_arena_release_requestfederationrestorefailed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.requestFederationRestoreFailed)
  if (_internal_has_requestfederationrestorefailed()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::RequestFederationRestoreFailed* temp = _impl_.callbackRequest_.requestfederationrestorefailed_;
    _impl_.callbackRequest_.requestfederationrestorefailed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_requestfederationrestorefailed(::rti1516_2025::fedpro::RequestFederationRestoreFailed* requestfederationrestorefailed) {
  clear_callbackRequest();
  if (requestfederationrestorefailed) {
    set_has_requestfederationrestorefailed();
    _impl_.callbackRequest_.requestfederationrestorefailed_ = requestfederationrestorefailed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.requestFederationRestoreFailed)
}
inline ::rti1516_2025::fedpro::RequestFederationRestoreFailed* CallbackRequest::_internal_mutable_requestfederationrestorefailed() {
  if (!_internal_has_requestfederationrestorefailed()) {
    clear_callbackRequest();
    set_has_requestfederationrestorefailed();
    _impl_.callbackRequest_.requestfederationrestorefailed_ = CreateMaybeMessage< ::rti1516_2025::fedpro::RequestFederationRestoreFailed >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.requestfederationrestorefailed_;
}
inline ::rti1516_2025::fedpro::RequestFederationRestoreFailed* CallbackRequest::mutable_requestfederationrestorefailed() {
  ::rti1516_2025::fedpro::RequestFederationRestoreFailed* _msg = _internal_mutable_requestfederationrestorefailed();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.requestFederationRestoreFailed)
  return _msg;
}

// .rti1516_2025.fedpro.FederationRestoreBegun federationRestoreBegun = 17;
inline bool CallbackRequest::_internal_has_federationrestorebegun() const {
  return callbackRequest_case() == kFederationRestoreBegun;
}
inline bool CallbackRequest::has_federationrestorebegun() const {
  return _internal_has_federationrestorebegun();
}
inline void CallbackRequest::set_has_federationrestorebegun() {
  _impl_._oneof_case_[0] = kFederationRestoreBegun;
}
inline void CallbackRequest::clear_federationrestorebegun() {
  if (_internal_has_federationrestorebegun()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.federationrestorebegun_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::FederationRestoreBegun* CallbackRequest::release_federationrestorebegun() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.federationRestoreBegun)
  if (_internal_has_federationrestorebegun()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FederationRestoreBegun* temp = _impl_.callbackRequest_.federationrestorebegun_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.federationrestorebegun_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::FederationRestoreBegun& CallbackRequest::_internal_federationrestorebegun() const {
  return _internal_has_federationrestorebegun()
      ? *_impl_.callbackRequest_.federationrestorebegun_
      : reinterpret_cast< ::rti1516_2025::fedpro::FederationRestoreBegun&>(::rti1516_2025::fedpro::_FederationRestoreBegun_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederationRestoreBegun& CallbackRequest::federationrestorebegun() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.federationRestoreBegun)
  return _internal_federationrestorebegun();
}
inline ::rti1516_2025::fedpro::FederationRestoreBegun* CallbackRequest::unsafe_arena_release_federationrestorebegun() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.federationRestoreBegun)
  if (_internal_has_federationrestorebegun()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FederationRestoreBegun* temp = _impl_.callbackRequest_.federationrestorebegun_;
    _impl_.callbackRequest_.federationrestorebegun_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_federationrestorebegun(::rti1516_2025::fedpro::FederationRestoreBegun* federationrestorebegun) {
  clear_callbackRequest();
  if (federationrestorebegun) {
    set_has_federationrestorebegun();
    _impl_.callbackRequest_.federationrestorebegun_ = federationrestorebegun;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.federationRestoreBegun)
}
inline ::rti1516_2025::fedpro::FederationRestoreBegun* CallbackRequest::_internal_mutable_federationrestorebegun() {
  if (!_internal_has_federationrestorebegun()) {
    clear_callbackRequest();
    set_has_federationrestorebegun();
    _impl_.callbackRequest_.federationrestorebegun_ = CreateMaybeMessage< ::rti1516_2025::fedpro::FederationRestoreBegun >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.federationrestorebegun_;
}
inline ::rti1516_2025::fedpro::FederationRestoreBegun* CallbackRequest::mutable_federationrestorebegun() {
  ::rti1516_2025::fedpro::FederationRestoreBegun* _msg = _internal_mutable_federationrestorebegun();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.federationRestoreBegun)
  return _msg;
}

// .rti1516_2025.fedpro.InitiateFederateRestore initiateFederateRestore = 18;
inline bool CallbackRequest::_internal_has_initiatefederaterestore() const {
  return callbackRequest_case() == kInitiateFederateRestore;
}
inline bool CallbackRequest::has_initiatefederaterestore() const {
  return _internal_has_initiatefederaterestore();
}
inline void CallbackRequest::set_has_initiatefederaterestore() {
  _impl_._oneof_case_[0] = kInitiateFederateRestore;
}
inline void CallbackRequest::clear_initiatefederaterestore() {
  if (_internal_has_initiatefederaterestore()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.initiatefederaterestore_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::InitiateFederateRestore* CallbackRequest::release_initiatefederaterestore() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.initiateFederateRestore)
  if (_internal_has_initiatefederaterestore()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::InitiateFederateRestore* temp = _impl_.callbackRequest_.initiatefederaterestore_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.initiatefederaterestore_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::InitiateFederateRestore& CallbackRequest::_internal_initiatefederaterestore() const {
  return _internal_has_initiatefederaterestore()
      ? *_impl_.callbackRequest_.initiatefederaterestore_
      : reinterpret_cast< ::rti1516_2025::fedpro::InitiateFederateRestore&>(::rti1516_2025::fedpro::_InitiateFederateRestore_default_instance_);
}
inline const ::rti1516_2025::fedpro::InitiateFederateRestore& CallbackRequest::initiatefederaterestore() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.initiateFederateRestore)
  return _internal_initiatefederaterestore();
}
inline ::rti1516_2025::fedpro::InitiateFederateRestore* CallbackRequest::unsafe_arena_release_initiatefederaterestore() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.initiateFederateRestore)
  if (_internal_has_initiatefederaterestore()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::InitiateFederateRestore* temp = _impl_.callbackRequest_.initiatefederaterestore_;
    _impl_.callbackRequest_.initiatefederaterestore_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_initiatefederaterestore(::rti1516_2025::fedpro::InitiateFederateRestore* initiatefederaterestore) {
  clear_callbackRequest();
  if (initiatefederaterestore) {
    set_has_initiatefederaterestore();
    _impl_.callbackRequest_.initiatefederaterestore_ = initiatefederaterestore;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.initiateFederateRestore)
}
inline ::rti1516_2025::fedpro::InitiateFederateRestore* CallbackRequest::_internal_mutable_initiatefederaterestore() {
  if (!_internal_has_initiatefederaterestore()) {
    clear_callbackRequest();
    set_has_initiatefederaterestore();
    _impl_.callbackRequest_.initiatefederaterestore_ = CreateMaybeMessage< ::rti1516_2025::fedpro::InitiateFederateRestore >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.initiatefederaterestore_;
}
inline ::rti1516_2025::fedpro::InitiateFederateRestore* CallbackRequest::mutable_initiatefederaterestore() {
  ::rti1516_2025::fedpro::InitiateFederateRestore* _msg = _internal_mutable_initiatefederaterestore();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.initiateFederateRestore)
  return _msg;
}

// .rti1516_2025.fedpro.FederationRestored federationRestored = 19;
inline bool CallbackRequest::_internal_has_federationrestored() const {
  return callbackRequest_case() == kFederationRestored;
}
inline bool CallbackRequest::has_federationrestored() const {
  return _internal_has_federationrestored();
}
inline void CallbackRequest::set_has_federationrestored() {
  _impl_._oneof_case_[0] = kFederationRestored;
}
inline void CallbackRequest::clear_federationrestored() {
  if (_internal_has_federationrestored()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.federationrestored_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::FederationRestored* CallbackRequest::release_federationrestored() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.federationRestored)
  if (_internal_has_federationrestored()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FederationRestored* temp = _impl_.callbackRequest_.federationrestored_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.federationrestored_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::FederationRestored& CallbackRequest::_internal_federationrestored() const {
  return _internal_has_federationrestored()
      ? *_impl_.callbackRequest_.federationrestored_
      : reinterpret_cast< ::rti1516_2025::fedpro::FederationRestored&>(::rti1516_2025::fedpro::_FederationRestored_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederationRestored& CallbackRequest::federationrestored() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.federationRestored)
  return _internal_federationrestored();
}
inline ::rti1516_2025::fedpro::FederationRestored* CallbackRequest::unsafe_arena_release_federationrestored() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.federationRestored)
  if (_internal_has_federationrestored()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FederationRestored* temp = _impl_.callbackRequest_.federationrestored_;
    _impl_.callbackRequest_.federationrestored_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_federationrestored(::rti1516_2025::fedpro::FederationRestored* federationrestored) {
  clear_callbackRequest();
  if (federationrestored) {
    set_has_federationrestored();
    _impl_.callbackRequest_.federationrestored_ = federationrestored;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.federationRestored)
}
inline ::rti1516_2025::fedpro::FederationRestored* CallbackRequest::_internal_mutable_federationrestored() {
  if (!_internal_has_federationrestored()) {
    clear_callbackRequest();
    set_has_federationrestored();
    _impl_.callbackRequest_.federationrestored_ = CreateMaybeMessage< ::rti1516_2025::fedpro::FederationRestored >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.federationrestored_;
}
inline ::rti1516_2025::fedpro::FederationRestored* CallbackRequest::mutable_federationrestored() {
  ::rti1516_2025::fedpro::FederationRestored* _msg = _internal_mutable_federationrestored();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.federationRestored)
  return _msg;
}

// .rti1516_2025.fedpro.FederationNotRestored federationNotRestored = 20;
inline bool CallbackRequest::_internal_has_federationnotrestored() const {
  return callbackRequest_case() == kFederationNotRestored;
}
inline bool CallbackRequest::has_federationnotrestored() const {
  return _internal_has_federationnotrestored();
}
inline void CallbackRequest::set_has_federationnotrestored() {
  _impl_._oneof_case_[0] = kFederationNotRestored;
}
inline void CallbackRequest::clear_federationnotrestored() {
  if (_internal_has_federationnotrestored()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.federationnotrestored_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::FederationNotRestored* CallbackRequest::release_federationnotrestored() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.federationNotRestored)
  if (_internal_has_federationnotrestored()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FederationNotRestored* temp = _impl_.callbackRequest_.federationnotrestored_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.federationnotrestored_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::FederationNotRestored& CallbackRequest::_internal_federationnotrestored() const {
  return _internal_has_federationnotrestored()
      ? *_impl_.callbackRequest_.federationnotrestored_
      : reinterpret_cast< ::rti1516_2025::fedpro::FederationNotRestored&>(::rti1516_2025::fedpro::_FederationNotRestored_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederationNotRestored& CallbackRequest::federationnotrestored() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.federationNotRestored)
  return _internal_federationnotrestored();
}
inline ::rti1516_2025::fedpro::FederationNotRestored* CallbackRequest::unsafe_arena_release_federationnotrestored() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.federationNotRestored)
  if (_internal_has_federationnotrestored()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FederationNotRestored* temp = _impl_.callbackRequest_.federationnotrestored_;
    _impl_.callbackRequest_.federationnotrestored_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_federationnotrestored(::rti1516_2025::fedpro::FederationNotRestored* federationnotrestored) {
  clear_callbackRequest();
  if (federationnotrestored) {
    set_has_federationnotrestored();
    _impl_.callbackRequest_.federationnotrestored_ = federationnotrestored;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.federationNotRestored)
}
inline ::rti1516_2025::fedpro::FederationNotRestored* CallbackRequest::_internal_mutable_federationnotrestored() {
  if (!_internal_has_federationnotrestored()) {
    clear_callbackRequest();
    set_has_federationnotrestored();
    _impl_.callbackRequest_.federationnotrestored_ = CreateMaybeMessage< ::rti1516_2025::fedpro::FederationNotRestored >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.federationnotrestored_;
}
inline ::rti1516_2025::fedpro::FederationNotRestored* CallbackRequest::mutable_federationnotrestored() {
  ::rti1516_2025::fedpro::FederationNotRestored* _msg = _internal_mutable_federationnotrestored();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.federationNotRestored)
  return _msg;
}

// .rti1516_2025.fedpro.FederationRestoreStatusResponse federationRestoreStatusResponse = 21;
inline bool CallbackRequest::_internal_has_federationrestorestatusresponse() const {
  return callbackRequest_case() == kFederationRestoreStatusResponse;
}
inline bool CallbackRequest::has_federationrestorestatusresponse() const {
  return _internal_has_federationrestorestatusresponse();
}
inline void CallbackRequest::set_has_federationrestorestatusresponse() {
  _impl_._oneof_case_[0] = kFederationRestoreStatusResponse;
}
inline void CallbackRequest::clear_federationrestorestatusresponse() {
  if (_internal_has_federationrestorestatusresponse()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.federationrestorestatusresponse_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::FederationRestoreStatusResponse* CallbackRequest::release_federationrestorestatusresponse() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.federationRestoreStatusResponse)
  if (_internal_has_federationrestorestatusresponse()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FederationRestoreStatusResponse* temp = _impl_.callbackRequest_.federationrestorestatusresponse_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.federationrestorestatusresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::FederationRestoreStatusResponse& CallbackRequest::_internal_federationrestorestatusresponse() const {
  return _internal_has_federationrestorestatusresponse()
      ? *_impl_.callbackRequest_.federationrestorestatusresponse_
      : reinterpret_cast< ::rti1516_2025::fedpro::FederationRestoreStatusResponse&>(::rti1516_2025::fedpro::_FederationRestoreStatusResponse_default_instance_);
}
inline const ::rti1516_2025::fedpro::FederationRestoreStatusResponse& CallbackRequest::federationrestorestatusresponse() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.federationRestoreStatusResponse)
  return _internal_federationrestorestatusresponse();
}
inline ::rti1516_2025::fedpro::FederationRestoreStatusResponse* CallbackRequest::unsafe_arena_release_federationrestorestatusresponse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.federationRestoreStatusResponse)
  if (_internal_has_federationrestorestatusresponse()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FederationRestoreStatusResponse* temp = _impl_.callbackRequest_.federationrestorestatusresponse_;
    _impl_.callbackRequest_.federationrestorestatusresponse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_federationrestorestatusresponse(::rti1516_2025::fedpro::FederationRestoreStatusResponse* federationrestorestatusresponse) {
  clear_callbackRequest();
  if (federationrestorestatusresponse) {
    set_has_federationrestorestatusresponse();
    _impl_.callbackRequest_.federationrestorestatusresponse_ = federationrestorestatusresponse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.federationRestoreStatusResponse)
}
inline ::rti1516_2025::fedpro::FederationRestoreStatusResponse* CallbackRequest::_internal_mutable_federationrestorestatusresponse() {
  if (!_internal_has_federationrestorestatusresponse()) {
    clear_callbackRequest();
    set_has_federationrestorestatusresponse();
    _impl_.callbackRequest_.federationrestorestatusresponse_ = CreateMaybeMessage< ::rti1516_2025::fedpro::FederationRestoreStatusResponse >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.federationrestorestatusresponse_;
}
inline ::rti1516_2025::fedpro::FederationRestoreStatusResponse* CallbackRequest::mutable_federationrestorestatusresponse() {
  ::rti1516_2025::fedpro::FederationRestoreStatusResponse* _msg = _internal_mutable_federationrestorestatusresponse();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.federationRestoreStatusResponse)
  return _msg;
}

// .rti1516_2025.fedpro.StartRegistrationForObjectClass startRegistrationForObjectClass = 22;
inline bool CallbackRequest::_internal_has_startregistrationforobjectclass() const {
  return callbackRequest_case() == kStartRegistrationForObjectClass;
}
inline bool CallbackRequest::has_startregistrationforobjectclass() const {
  return _internal_has_startregistrationforobjectclass();
}
inline void CallbackRequest::set_has_startregistrationforobjectclass() {
  _impl_._oneof_case_[0] = kStartRegistrationForObjectClass;
}
inline void CallbackRequest::clear_startregistrationforobjectclass() {
  if (_internal_has_startregistrationforobjectclass()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.startregistrationforobjectclass_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::StartRegistrationForObjectClass* CallbackRequest::release_startregistrationforobjectclass() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.startRegistrationForObjectClass)
  if (_internal_has_startregistrationforobjectclass()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::StartRegistrationForObjectClass* temp = _impl_.callbackRequest_.startregistrationforobjectclass_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.startregistrationforobjectclass_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::StartRegistrationForObjectClass& CallbackRequest::_internal_startregistrationforobjectclass() const {
  return _internal_has_startregistrationforobjectclass()
      ? *_impl_.callbackRequest_.startregistrationforobjectclass_
      : reinterpret_cast< ::rti1516_2025::fedpro::StartRegistrationForObjectClass&>(::rti1516_2025::fedpro::_StartRegistrationForObjectClass_default_instance_);
}
inline const ::rti1516_2025::fedpro::StartRegistrationForObjectClass& CallbackRequest::startregistrationforobjectclass() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.startRegistrationForObjectClass)
  return _internal_startregistrationforobjectclass();
}
inline ::rti1516_2025::fedpro::StartRegistrationForObjectClass* CallbackRequest::unsafe_arena_release_startregistrationforobjectclass() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.startRegistrationForObjectClass)
  if (_internal_has_startregistrationforobjectclass()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::StartRegistrationForObjectClass* temp = _impl_.callbackRequest_.startregistrationforobjectclass_;
    _impl_.callbackRequest_.startregistrationforobjectclass_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_startregistrationforobjectclass(::rti1516_2025::fedpro::StartRegistrationForObjectClass* startregistrationforobjectclass) {
  clear_callbackRequest();
  if (startregistrationforobjectclass) {
    set_has_startregistrationforobjectclass();
    _impl_.callbackRequest_.startregistrationforobjectclass_ = startregistrationforobjectclass;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.startRegistrationForObjectClass)
}
inline ::rti1516_2025::fedpro::StartRegistrationForObjectClass* CallbackRequest::_internal_mutable_startregistrationforobjectclass() {
  if (!_internal_has_startregistrationforobjectclass()) {
    clear_callbackRequest();
    set_has_startregistrationforobjectclass();
    _impl_.callbackRequest_.startregistrationforobjectclass_ = CreateMaybeMessage< ::rti1516_2025::fedpro::StartRegistrationForObjectClass >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.startregistrationforobjectclass_;
}
inline ::rti1516_2025::fedpro::StartRegistrationForObjectClass* CallbackRequest::mutable_startregistrationforobjectclass() {
  ::rti1516_2025::fedpro::StartRegistrationForObjectClass* _msg = _internal_mutable_startregistrationforobjectclass();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.startRegistrationForObjectClass)
  return _msg;
}

// .rti1516_2025.fedpro.StopRegistrationForObjectClass stopRegistrationForObjectClass = 23;
inline bool CallbackRequest::_internal_has_stopregistrationforobjectclass() const {
  return callbackRequest_case() == kStopRegistrationForObjectClass;
}
inline bool CallbackRequest::has_stopregistrationforobjectclass() const {
  return _internal_has_stopregistrationforobjectclass();
}
inline void CallbackRequest::set_has_stopregistrationforobjectclass() {
  _impl_._oneof_case_[0] = kStopRegistrationForObjectClass;
}
inline void CallbackRequest::clear_stopregistrationforobjectclass() {
  if (_internal_has_stopregistrationforobjectclass()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.stopregistrationforobjectclass_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::StopRegistrationForObjectClass* CallbackRequest::release_stopregistrationforobjectclass() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.stopRegistrationForObjectClass)
  if (_internal_has_stopregistrationforobjectclass()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::StopRegistrationForObjectClass* temp = _impl_.callbackRequest_.stopregistrationforobjectclass_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.stopregistrationforobjectclass_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::StopRegistrationForObjectClass& CallbackRequest::_internal_stopregistrationforobjectclass() const {
  return _internal_has_stopregistrationforobjectclass()
      ? *_impl_.callbackRequest_.stopregistrationforobjectclass_
      : reinterpret_cast< ::rti1516_2025::fedpro::StopRegistrationForObjectClass&>(::rti1516_2025::fedpro::_StopRegistrationForObjectClass_default_instance_);
}
inline const ::rti1516_2025::fedpro::StopRegistrationForObjectClass& CallbackRequest::stopregistrationforobjectclass() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.stopRegistrationForObjectClass)
  return _internal_stopregistrationforobjectclass();
}
inline ::rti1516_2025::fedpro::StopRegistrationForObjectClass* CallbackRequest::unsafe_arena_release_stopregistrationforobjectclass() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.stopRegistrationForObjectClass)
  if (_internal_has_stopregistrationforobjectclass()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::StopRegistrationForObjectClass* temp = _impl_.callbackRequest_.stopregistrationforobjectclass_;
    _impl_.callbackRequest_.stopregistrationforobjectclass_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_stopregistrationforobjectclass(::rti1516_2025::fedpro::StopRegistrationForObjectClass* stopregistrationforobjectclass) {
  clear_callbackRequest();
  if (stopregistrationforobjectclass) {
    set_has_stopregistrationforobjectclass();
    _impl_.callbackRequest_.stopregistrationforobjectclass_ = stopregistrationforobjectclass;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.stopRegistrationForObjectClass)
}
inline ::rti1516_2025::fedpro::StopRegistrationForObjectClass* CallbackRequest::_internal_mutable_stopregistrationforobjectclass() {
  if (!_internal_has_stopregistrationforobjectclass()) {
    clear_callbackRequest();
    set_has_stopregistrationforobjectclass();
    _impl_.callbackRequest_.stopregistrationforobjectclass_ = CreateMaybeMessage< ::rti1516_2025::fedpro::StopRegistrationForObjectClass >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.stopregistrationforobjectclass_;
}
inline ::rti1516_2025::fedpro::StopRegistrationForObjectClass* CallbackRequest::mutable_stopregistrationforobjectclass() {
  ::rti1516_2025::fedpro::StopRegistrationForObjectClass* _msg = _internal_mutable_stopregistrationforobjectclass();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.stopRegistrationForObjectClass)
  return _msg;
}

// .rti1516_2025.fedpro.TurnInteractionsOn turnInteractionsOn = 24;
inline bool CallbackRequest::_internal_has_turninteractionson() const {
  return callbackRequest_case() == kTurnInteractionsOn;
}
inline bool CallbackRequest::has_turninteractionson() const {
  return _internal_has_turninteractionson();
}
inline void CallbackRequest::set_has_turninteractionson() {
  _impl_._oneof_case_[0] = kTurnInteractionsOn;
}
inline void CallbackRequest::clear_turninteractionson() {
  if (_internal_has_turninteractionson()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.turninteractionson_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::TurnInteractionsOn* CallbackRequest::release_turninteractionson() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.turnInteractionsOn)
  if (_internal_has_turninteractionson()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::TurnInteractionsOn* temp = _impl_.callbackRequest_.turninteractionson_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.turninteractionson_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::TurnInteractionsOn& CallbackRequest::_internal_turninteractionson() const {
  return _internal_has_turninteractionson()
      ? *_impl_.callbackRequest_.turninteractionson_
      : reinterpret_cast< ::rti1516_2025::fedpro::TurnInteractionsOn&>(::rti1516_2025::fedpro::_TurnInteractionsOn_default_instance_);
}
inline const ::rti1516_2025::fedpro::TurnInteractionsOn& CallbackRequest::turninteractionson() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.turnInteractionsOn)
  return _internal_turninteractionson();
}
inline ::rti1516_2025::fedpro::TurnInteractionsOn* CallbackRequest::unsafe_arena_release_turninteractionson() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.turnInteractionsOn)
  if (_internal_has_turninteractionson()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::TurnInteractionsOn* temp = _impl_.callbackRequest_.turninteractionson_;
    _impl_.callbackRequest_.turninteractionson_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_turninteractionson(::rti1516_2025::fedpro::TurnInteractionsOn* turninteractionson) {
  clear_callbackRequest();
  if (turninteractionson) {
    set_has_turninteractionson();
    _impl_.callbackRequest_.turninteractionson_ = turninteractionson;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.turnInteractionsOn)
}
inline ::rti1516_2025::fedpro::TurnInteractionsOn* CallbackRequest::_internal_mutable_turninteractionson() {
  if (!_internal_has_turninteractionson()) {
    clear_callbackRequest();
    set_has_turninteractionson();
    _impl_.callbackRequest_.turninteractionson_ = CreateMaybeMessage< ::rti1516_2025::fedpro::TurnInteractionsOn >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.turninteractionson_;
}
inline ::rti1516_2025::fedpro::TurnInteractionsOn* CallbackRequest::mutable_turninteractionson() {
  ::rti1516_2025::fedpro::TurnInteractionsOn* _msg = _internal_mutable_turninteractionson();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.turnInteractionsOn)
  return _msg;
}

// .rti1516_2025.fedpro.TurnInteractionsOff turnInteractionsOff = 25;
inline bool CallbackRequest::_internal_has_turninteractionsoff() const {
  return callbackRequest_case() == kTurnInteractionsOff;
}
inline bool CallbackRequest::has_turninteractionsoff() const {
  return _internal_has_turninteractionsoff();
}
inline void CallbackRequest::set_has_turninteractionsoff() {
  _impl_._oneof_case_[0] = kTurnInteractionsOff;
}
inline void CallbackRequest::clear_turninteractionsoff() {
  if (_internal_has_turninteractionsoff()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.turninteractionsoff_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::TurnInteractionsOff* CallbackRequest::release_turninteractionsoff() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.turnInteractionsOff)
  if (_internal_has_turninteractionsoff()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::TurnInteractionsOff* temp = _impl_.callbackRequest_.turninteractionsoff_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.turninteractionsoff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::TurnInteractionsOff& CallbackRequest::_internal_turninteractionsoff() const {
  return _internal_has_turninteractionsoff()
      ? *_impl_.callbackRequest_.turninteractionsoff_
      : reinterpret_cast< ::rti1516_2025::fedpro::TurnInteractionsOff&>(::rti1516_2025::fedpro::_TurnInteractionsOff_default_instance_);
}
inline const ::rti1516_2025::fedpro::TurnInteractionsOff& CallbackRequest::turninteractionsoff() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.turnInteractionsOff)
  return _internal_turninteractionsoff();
}
inline ::rti1516_2025::fedpro::TurnInteractionsOff* CallbackRequest::unsafe_arena_release_turninteractionsoff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.turnInteractionsOff)
  if (_internal_has_turninteractionsoff()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::TurnInteractionsOff* temp = _impl_.callbackRequest_.turninteractionsoff_;
    _impl_.callbackRequest_.turninteractionsoff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_turninteractionsoff(::rti1516_2025::fedpro::TurnInteractionsOff* turninteractionsoff) {
  clear_callbackRequest();
  if (turninteractionsoff) {
    set_has_turninteractionsoff();
    _impl_.callbackRequest_.turninteractionsoff_ = turninteractionsoff;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.turnInteractionsOff)
}
inline ::rti1516_2025::fedpro::TurnInteractionsOff* CallbackRequest::_internal_mutable_turninteractionsoff() {
  if (!_internal_has_turninteractionsoff()) {
    clear_callbackRequest();
    set_has_turninteractionsoff();
    _impl_.callbackRequest_.turninteractionsoff_ = CreateMaybeMessage< ::rti1516_2025::fedpro::TurnInteractionsOff >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.turninteractionsoff_;
}
inline ::rti1516_2025::fedpro::TurnInteractionsOff* CallbackRequest::mutable_turninteractionsoff() {
  ::rti1516_2025::fedpro::TurnInteractionsOff* _msg = _internal_mutable_turninteractionsoff();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.turnInteractionsOff)
  return _msg;
}

// .rti1516_2025.fedpro.ObjectInstanceNameReservationSucceeded objectInstanceNameReservationSucceeded = 26;
inline bool CallbackRequest::_internal_has_objectinstancenamereservationsucceeded() const {
  return callbackRequest_case() == kObjectInstanceNameReservationSucceeded;
}
inline bool CallbackRequest::has_objectinstancenamereservationsucceeded() const {
  return _internal_has_objectinstancenamereservationsucceeded();
}
inline void CallbackRequest::set_has_objectinstancenamereservationsucceeded() {
  _impl_._oneof_case_[0] = kObjectInstanceNameReservationSucceeded;
}
inline void CallbackRequest::clear_objectinstancenamereservationsucceeded() {
  if (_internal_has_objectinstancenamereservationsucceeded()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.objectinstancenamereservationsucceeded_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded* CallbackRequest::release_objectinstancenamereservationsucceeded() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.objectInstanceNameReservationSucceeded)
  if (_internal_has_objectinstancenamereservationsucceeded()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded* temp = _impl_.callbackRequest_.objectinstancenamereservationsucceeded_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.objectinstancenamereservationsucceeded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded& CallbackRequest::_internal_objectinstancenamereservationsucceeded() const {
  return _internal_has_objectinstancenamereservationsucceeded()
      ? *_impl_.callbackRequest_.objectinstancenamereservationsucceeded_
      : reinterpret_cast< ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded&>(::rti1516_2025::fedpro::_ObjectInstanceNameReservationSucceeded_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded& CallbackRequest::objectinstancenamereservationsucceeded() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.objectInstanceNameReservationSucceeded)
  return _internal_objectinstancenamereservationsucceeded();
}
inline ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded* CallbackRequest::unsafe_arena_release_objectinstancenamereservationsucceeded() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.objectInstanceNameReservationSucceeded)
  if (_internal_has_objectinstancenamereservationsucceeded()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded* temp = _impl_.callbackRequest_.objectinstancenamereservationsucceeded_;
    _impl_.callbackRequest_.objectinstancenamereservationsucceeded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_objectinstancenamereservationsucceeded(::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded* objectinstancenamereservationsucceeded) {
  clear_callbackRequest();
  if (objectinstancenamereservationsucceeded) {
    set_has_objectinstancenamereservationsucceeded();
    _impl_.callbackRequest_.objectinstancenamereservationsucceeded_ = objectinstancenamereservationsucceeded;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.objectInstanceNameReservationSucceeded)
}
inline ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded* CallbackRequest::_internal_mutable_objectinstancenamereservationsucceeded() {
  if (!_internal_has_objectinstancenamereservationsucceeded()) {
    clear_callbackRequest();
    set_has_objectinstancenamereservationsucceeded();
    _impl_.callbackRequest_.objectinstancenamereservationsucceeded_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.objectinstancenamereservationsucceeded_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded* CallbackRequest::mutable_objectinstancenamereservationsucceeded() {
  ::rti1516_2025::fedpro::ObjectInstanceNameReservationSucceeded* _msg = _internal_mutable_objectinstancenamereservationsucceeded();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.objectInstanceNameReservationSucceeded)
  return _msg;
}

// .rti1516_2025.fedpro.ObjectInstanceNameReservationFailed objectInstanceNameReservationFailed = 27;
inline bool CallbackRequest::_internal_has_objectinstancenamereservationfailed() const {
  return callbackRequest_case() == kObjectInstanceNameReservationFailed;
}
inline bool CallbackRequest::has_objectinstancenamereservationfailed() const {
  return _internal_has_objectinstancenamereservationfailed();
}
inline void CallbackRequest::set_has_objectinstancenamereservationfailed() {
  _impl_._oneof_case_[0] = kObjectInstanceNameReservationFailed;
}
inline void CallbackRequest::clear_objectinstancenamereservationfailed() {
  if (_internal_has_objectinstancenamereservationfailed()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.objectinstancenamereservationfailed_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed* CallbackRequest::release_objectinstancenamereservationfailed() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.objectInstanceNameReservationFailed)
  if (_internal_has_objectinstancenamereservationfailed()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed* temp = _impl_.callbackRequest_.objectinstancenamereservationfailed_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.objectinstancenamereservationfailed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed& CallbackRequest::_internal_objectinstancenamereservationfailed() const {
  return _internal_has_objectinstancenamereservationfailed()
      ? *_impl_.callbackRequest_.objectinstancenamereservationfailed_
      : reinterpret_cast< ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed&>(::rti1516_2025::fedpro::_ObjectInstanceNameReservationFailed_default_instance_);
}
inline const ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed& CallbackRequest::objectinstancenamereservationfailed() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.objectInstanceNameReservationFailed)
  return _internal_objectinstancenamereservationfailed();
}
inline ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed* CallbackRequest::unsafe_arena_release_objectinstancenamereservationfailed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.objectInstanceNameReservationFailed)
  if (_internal_has_objectinstancenamereservationfailed()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed* temp = _impl_.callbackRequest_.objectinstancenamereservationfailed_;
    _impl_.callbackRequest_.objectinstancenamereservationfailed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_objectinstancenamereservationfailed(::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed* objectinstancenamereservationfailed) {
  clear_callbackRequest();
  if (objectinstancenamereservationfailed) {
    set_has_objectinstancenamereservationfailed();
    _impl_.callbackRequest_.objectinstancenamereservationfailed_ = objectinstancenamereservationfailed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.objectInstanceNameReservationFailed)
}
inline ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed* CallbackRequest::_internal_mutable_objectinstancenamereservationfailed() {
  if (!_internal_has_objectinstancenamereservationfailed()) {
    clear_callbackRequest();
    set_has_objectinstancenamereservationfailed();
    _impl_.callbackRequest_.objectinstancenamereservationfailed_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.objectinstancenamereservationfailed_;
}
inline ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed* CallbackRequest::mutable_objectinstancenamereservationfailed() {
  ::rti1516_2025::fedpro::ObjectInstanceNameReservationFailed* _msg = _internal_mutable_objectinstancenamereservationfailed();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.objectInstanceNameReservationFailed)
  return _msg;
}

// .rti1516_2025.fedpro.MultipleObjectInstanceNameReservationSucceeded multipleObjectInstanceNameReservationSucceeded = 28;
inline bool CallbackRequest::_internal_has_multipleobjectinstancenamereservationsucceeded() const {
  return callbackRequest_case() == kMultipleObjectInstanceNameReservationSucceeded;
}
inline bool CallbackRequest::has_multipleobjectinstancenamereservationsucceeded() const {
  return _internal_has_multipleobjectinstancenamereservationsucceeded();
}
inline void CallbackRequest::set_has_multipleobjectinstancenamereservationsucceeded() {
  _impl_._oneof_case_[0] = kMultipleObjectInstanceNameReservationSucceeded;
}
inline void CallbackRequest::clear_multipleobjectinstancenamereservationsucceeded() {
  if (_internal_has_multipleobjectinstancenamereservationsucceeded()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.multipleobjectinstancenamereservationsucceeded_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded* CallbackRequest::release_multipleobjectinstancenamereservationsucceeded() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.multipleObjectInstanceNameReservationSucceeded)
  if (_internal_has_multipleobjectinstancenamereservationsucceeded()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded* temp = _impl_.callbackRequest_.multipleobjectinstancenamereservationsucceeded_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.multipleobjectinstancenamereservationsucceeded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded& CallbackRequest::_internal_multipleobjectinstancenamereservationsucceeded() const {
  return _internal_has_multipleobjectinstancenamereservationsucceeded()
      ? *_impl_.callbackRequest_.multipleobjectinstancenamereservationsucceeded_
      : reinterpret_cast< ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded&>(::rti1516_2025::fedpro::_MultipleObjectInstanceNameReservationSucceeded_default_instance_);
}
inline const ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded& CallbackRequest::multipleobjectinstancenamereservationsucceeded() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.multipleObjectInstanceNameReservationSucceeded)
  return _internal_multipleobjectinstancenamereservationsucceeded();
}
inline ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded* CallbackRequest::unsafe_arena_release_multipleobjectinstancenamereservationsucceeded() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.multipleObjectInstanceNameReservationSucceeded)
  if (_internal_has_multipleobjectinstancenamereservationsucceeded()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded* temp = _impl_.callbackRequest_.multipleobjectinstancenamereservationsucceeded_;
    _impl_.callbackRequest_.multipleobjectinstancenamereservationsucceeded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_multipleobjectinstancenamereservationsucceeded(::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded* multipleobjectinstancenamereservationsucceeded) {
  clear_callbackRequest();
  if (multipleobjectinstancenamereservationsucceeded) {
    set_has_multipleobjectinstancenamereservationsucceeded();
    _impl_.callbackRequest_.multipleobjectinstancenamereservationsucceeded_ = multipleobjectinstancenamereservationsucceeded;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.multipleObjectInstanceNameReservationSucceeded)
}
inline ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded* CallbackRequest::_internal_mutable_multipleobjectinstancenamereservationsucceeded() {
  if (!_internal_has_multipleobjectinstancenamereservationsucceeded()) {
    clear_callbackRequest();
    set_has_multipleobjectinstancenamereservationsucceeded();
    _impl_.callbackRequest_.multipleobjectinstancenamereservationsucceeded_ = CreateMaybeMessage< ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.multipleobjectinstancenamereservationsucceeded_;
}
inline ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded* CallbackRequest::mutable_multipleobjectinstancenamereservationsucceeded() {
  ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationSucceeded* _msg = _internal_mutable_multipleobjectinstancenamereservationsucceeded();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.multipleObjectInstanceNameReservationSucceeded)
  return _msg;
}

// .rti1516_2025.fedpro.MultipleObjectInstanceNameReservationFailed multipleObjectInstanceNameReservationFailed = 29;
inline bool CallbackRequest::_internal_has_multipleobjectinstancenamereservationfailed() const {
  return callbackRequest_case() == kMultipleObjectInstanceNameReservationFailed;
}
inline bool CallbackRequest::has_multipleobjectinstancenamereservationfailed() const {
  return _internal_has_multipleobjectinstancenamereservationfailed();
}
inline void CallbackRequest::set_has_multipleobjectinstancenamereservationfailed() {
  _impl_._oneof_case_[0] = kMultipleObjectInstanceNameReservationFailed;
}
inline void CallbackRequest::clear_multipleobjectinstancenamereservationfailed() {
  if (_internal_has_multipleobjectinstancenamereservationfailed()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.multipleobjectinstancenamereservationfailed_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed* CallbackRequest::release_multipleobjectinstancenamereservationfailed() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.multipleObjectInstanceNameReservationFailed)
  if (_internal_has_multipleobjectinstancenamereservationfailed()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed* temp = _impl_.callbackRequest_.multipleobjectinstancenamereservationfailed_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.multipleobjectinstancenamereservationfailed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed& CallbackRequest::_internal_multipleobjectinstancenamereservationfailed() const {
  return _internal_has_multipleobjectinstancenamereservationfailed()
      ? *_impl_.callbackRequest_.multipleobjectinstancenamereservationfailed_
      : reinterpret_cast< ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed&>(::rti1516_2025::fedpro::_MultipleObjectInstanceNameReservationFailed_default_instance_);
}
inline const ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed& CallbackRequest::multipleobjectinstancenamereservationfailed() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.multipleObjectInstanceNameReservationFailed)
  return _internal_multipleobjectinstancenamereservationfailed();
}
inline ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed* CallbackRequest::unsafe_arena_release_multipleobjectinstancenamereservationfailed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.multipleObjectInstanceNameReservationFailed)
  if (_internal_has_multipleobjectinstancenamereservationfailed()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed* temp = _impl_.callbackRequest_.multipleobjectinstancenamereservationfailed_;
    _impl_.callbackRequest_.multipleobjectinstancenamereservationfailed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_multipleobjectinstancenamereservationfailed(::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed* multipleobjectinstancenamereservationfailed) {
  clear_callbackRequest();
  if (multipleobjectinstancenamereservationfailed) {
    set_has_multipleobjectinstancenamereservationfailed();
    _impl_.callbackRequest_.multipleobjectinstancenamereservationfailed_ = multipleobjectinstancenamereservationfailed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.multipleObjectInstanceNameReservationFailed)
}
inline ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed* CallbackRequest::_internal_mutable_multipleobjectinstancenamereservationfailed() {
  if (!_internal_has_multipleobjectinstancenamereservationfailed()) {
    clear_callbackRequest();
    set_has_multipleobjectinstancenamereservationfailed();
    _impl_.callbackRequest_.multipleobjectinstancenamereservationfailed_ = CreateMaybeMessage< ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.multipleobjectinstancenamereservationfailed_;
}
inline ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed* CallbackRequest::mutable_multipleobjectinstancenamereservationfailed() {
  ::rti1516_2025::fedpro::MultipleObjectInstanceNameReservationFailed* _msg = _internal_mutable_multipleobjectinstancenamereservationfailed();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.multipleObjectInstanceNameReservationFailed)
  return _msg;
}

// .rti1516_2025.fedpro.DiscoverObjectInstance discoverObjectInstance = 30;
inline bool CallbackRequest::_internal_has_discoverobjectinstance() const {
  return callbackRequest_case() == kDiscoverObjectInstance;
}
inline bool CallbackRequest::has_discoverobjectinstance() const {
  return _internal_has_discoverobjectinstance();
}
inline void CallbackRequest::set_has_discoverobjectinstance() {
  _impl_._oneof_case_[0] = kDiscoverObjectInstance;
}
inline void CallbackRequest::clear_discoverobjectinstance() {
  if (_internal_has_discoverobjectinstance()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.discoverobjectinstance_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::DiscoverObjectInstance* CallbackRequest::release_discoverobjectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.discoverObjectInstance)
  if (_internal_has_discoverobjectinstance()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::DiscoverObjectInstance* temp = _impl_.callbackRequest_.discoverobjectinstance_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.discoverobjectinstance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::DiscoverObjectInstance& CallbackRequest::_internal_discoverobjectinstance() const {
  return _internal_has_discoverobjectinstance()
      ? *_impl_.callbackRequest_.discoverobjectinstance_
      : reinterpret_cast< ::rti1516_2025::fedpro::DiscoverObjectInstance&>(::rti1516_2025::fedpro::_DiscoverObjectInstance_default_instance_);
}
inline const ::rti1516_2025::fedpro::DiscoverObjectInstance& CallbackRequest::discoverobjectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.discoverObjectInstance)
  return _internal_discoverobjectinstance();
}
inline ::rti1516_2025::fedpro::DiscoverObjectInstance* CallbackRequest::unsafe_arena_release_discoverobjectinstance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.discoverObjectInstance)
  if (_internal_has_discoverobjectinstance()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::DiscoverObjectInstance* temp = _impl_.callbackRequest_.discoverobjectinstance_;
    _impl_.callbackRequest_.discoverobjectinstance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_discoverobjectinstance(::rti1516_2025::fedpro::DiscoverObjectInstance* discoverobjectinstance) {
  clear_callbackRequest();
  if (discoverobjectinstance) {
    set_has_discoverobjectinstance();
    _impl_.callbackRequest_.discoverobjectinstance_ = discoverobjectinstance;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.discoverObjectInstance)
}
inline ::rti1516_2025::fedpro::DiscoverObjectInstance* CallbackRequest::_internal_mutable_discoverobjectinstance() {
  if (!_internal_has_discoverobjectinstance()) {
    clear_callbackRequest();
    set_has_discoverobjectinstance();
    _impl_.callbackRequest_.discoverobjectinstance_ = CreateMaybeMessage< ::rti1516_2025::fedpro::DiscoverObjectInstance >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.discoverobjectinstance_;
}
inline ::rti1516_2025::fedpro::DiscoverObjectInstance* CallbackRequest::mutable_discoverobjectinstance() {
  ::rti1516_2025::fedpro::DiscoverObjectInstance* _msg = _internal_mutable_discoverobjectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.discoverObjectInstance)
  return _msg;
}

// .rti1516_2025.fedpro.ReflectAttributeValues reflectAttributeValues = 31;
inline bool CallbackRequest::_internal_has_reflectattributevalues() const {
  return callbackRequest_case() == kReflectAttributeValues;
}
inline bool CallbackRequest::has_reflectattributevalues() const {
  return _internal_has_reflectattributevalues();
}
inline void CallbackRequest::set_has_reflectattributevalues() {
  _impl_._oneof_case_[0] = kReflectAttributeValues;
}
inline void CallbackRequest::clear_reflectattributevalues() {
  if (_internal_has_reflectattributevalues()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.reflectattributevalues_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::ReflectAttributeValues* CallbackRequest::release_reflectattributevalues() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.reflectAttributeValues)
  if (_internal_has_reflectattributevalues()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReflectAttributeValues* temp = _impl_.callbackRequest_.reflectattributevalues_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.reflectattributevalues_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ReflectAttributeValues& CallbackRequest::_internal_reflectattributevalues() const {
  return _internal_has_reflectattributevalues()
      ? *_impl_.callbackRequest_.reflectattributevalues_
      : reinterpret_cast< ::rti1516_2025::fedpro::ReflectAttributeValues&>(::rti1516_2025::fedpro::_ReflectAttributeValues_default_instance_);
}
inline const ::rti1516_2025::fedpro::ReflectAttributeValues& CallbackRequest::reflectattributevalues() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.reflectAttributeValues)
  return _internal_reflectattributevalues();
}
inline ::rti1516_2025::fedpro::ReflectAttributeValues* CallbackRequest::unsafe_arena_release_reflectattributevalues() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.reflectAttributeValues)
  if (_internal_has_reflectattributevalues()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReflectAttributeValues* temp = _impl_.callbackRequest_.reflectattributevalues_;
    _impl_.callbackRequest_.reflectattributevalues_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_reflectattributevalues(::rti1516_2025::fedpro::ReflectAttributeValues* reflectattributevalues) {
  clear_callbackRequest();
  if (reflectattributevalues) {
    set_has_reflectattributevalues();
    _impl_.callbackRequest_.reflectattributevalues_ = reflectattributevalues;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.reflectAttributeValues)
}
inline ::rti1516_2025::fedpro::ReflectAttributeValues* CallbackRequest::_internal_mutable_reflectattributevalues() {
  if (!_internal_has_reflectattributevalues()) {
    clear_callbackRequest();
    set_has_reflectattributevalues();
    _impl_.callbackRequest_.reflectattributevalues_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ReflectAttributeValues >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.reflectattributevalues_;
}
inline ::rti1516_2025::fedpro::ReflectAttributeValues* CallbackRequest::mutable_reflectattributevalues() {
  ::rti1516_2025::fedpro::ReflectAttributeValues* _msg = _internal_mutable_reflectattributevalues();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.reflectAttributeValues)
  return _msg;
}

// .rti1516_2025.fedpro.ReflectAttributeValuesWithTime reflectAttributeValuesWithTime = 32;
inline bool CallbackRequest::_internal_has_reflectattributevalueswithtime() const {
  return callbackRequest_case() == kReflectAttributeValuesWithTime;
}
inline bool CallbackRequest::has_reflectattributevalueswithtime() const {
  return _internal_has_reflectattributevalueswithtime();
}
inline void CallbackRequest::set_has_reflectattributevalueswithtime() {
  _impl_._oneof_case_[0] = kReflectAttributeValuesWithTime;
}
inline void CallbackRequest::clear_reflectattributevalueswithtime() {
  if (_internal_has_reflectattributevalueswithtime()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.reflectattributevalueswithtime_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime* CallbackRequest::release_reflectattributevalueswithtime() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.reflectAttributeValuesWithTime)
  if (_internal_has_reflectattributevalueswithtime()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime* temp = _impl_.callbackRequest_.reflectattributevalueswithtime_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.reflectattributevalueswithtime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime& CallbackRequest::_internal_reflectattributevalueswithtime() const {
  return _internal_has_reflectattributevalueswithtime()
      ? *_impl_.callbackRequest_.reflectattributevalueswithtime_
      : reinterpret_cast< ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime&>(::rti1516_2025::fedpro::_ReflectAttributeValuesWithTime_default_instance_);
}
inline const ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime& CallbackRequest::reflectattributevalueswithtime() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.reflectAttributeValuesWithTime)
  return _internal_reflectattributevalueswithtime();
}
inline ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime* CallbackRequest::unsafe_arena_release_reflectattributevalueswithtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.reflectAttributeValuesWithTime)
  if (_internal_has_reflectattributevalueswithtime()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime* temp = _impl_.callbackRequest_.reflectattributevalueswithtime_;
    _impl_.callbackRequest_.reflectattributevalueswithtime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_reflectattributevalueswithtime(::rti1516_2025::fedpro::ReflectAttributeValuesWithTime* reflectattributevalueswithtime) {
  clear_callbackRequest();
  if (reflectattributevalueswithtime) {
    set_has_reflectattributevalueswithtime();
    _impl_.callbackRequest_.reflectattributevalueswithtime_ = reflectattributevalueswithtime;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.reflectAttributeValuesWithTime)
}
inline ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime* CallbackRequest::_internal_mutable_reflectattributevalueswithtime() {
  if (!_internal_has_reflectattributevalueswithtime()) {
    clear_callbackRequest();
    set_has_reflectattributevalueswithtime();
    _impl_.callbackRequest_.reflectattributevalueswithtime_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.reflectattributevalueswithtime_;
}
inline ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime* CallbackRequest::mutable_reflectattributevalueswithtime() {
  ::rti1516_2025::fedpro::ReflectAttributeValuesWithTime* _msg = _internal_mutable_reflectattributevalueswithtime();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.reflectAttributeValuesWithTime)
  return _msg;
}

// .rti1516_2025.fedpro.ReceiveInteraction receiveInteraction = 33;
inline bool CallbackRequest::_internal_has_receiveinteraction() const {
  return callbackRequest_case() == kReceiveInteraction;
}
inline bool CallbackRequest::has_receiveinteraction() const {
  return _internal_has_receiveinteraction();
}
inline void CallbackRequest::set_has_receiveinteraction() {
  _impl_._oneof_case_[0] = kReceiveInteraction;
}
inline void CallbackRequest::clear_receiveinteraction() {
  if (_internal_has_receiveinteraction()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.receiveinteraction_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::ReceiveInteraction* CallbackRequest::release_receiveinteraction() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.receiveInteraction)
  if (_internal_has_receiveinteraction()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReceiveInteraction* temp = _impl_.callbackRequest_.receiveinteraction_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.receiveinteraction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ReceiveInteraction& CallbackRequest::_internal_receiveinteraction() const {
  return _internal_has_receiveinteraction()
      ? *_impl_.callbackRequest_.receiveinteraction_
      : reinterpret_cast< ::rti1516_2025::fedpro::ReceiveInteraction&>(::rti1516_2025::fedpro::_ReceiveInteraction_default_instance_);
}
inline const ::rti1516_2025::fedpro::ReceiveInteraction& CallbackRequest::receiveinteraction() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.receiveInteraction)
  return _internal_receiveinteraction();
}
inline ::rti1516_2025::fedpro::ReceiveInteraction* CallbackRequest::unsafe_arena_release_receiveinteraction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.receiveInteraction)
  if (_internal_has_receiveinteraction()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReceiveInteraction* temp = _impl_.callbackRequest_.receiveinteraction_;
    _impl_.callbackRequest_.receiveinteraction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_receiveinteraction(::rti1516_2025::fedpro::ReceiveInteraction* receiveinteraction) {
  clear_callbackRequest();
  if (receiveinteraction) {
    set_has_receiveinteraction();
    _impl_.callbackRequest_.receiveinteraction_ = receiveinteraction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.receiveInteraction)
}
inline ::rti1516_2025::fedpro::ReceiveInteraction* CallbackRequest::_internal_mutable_receiveinteraction() {
  if (!_internal_has_receiveinteraction()) {
    clear_callbackRequest();
    set_has_receiveinteraction();
    _impl_.callbackRequest_.receiveinteraction_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ReceiveInteraction >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.receiveinteraction_;
}
inline ::rti1516_2025::fedpro::ReceiveInteraction* CallbackRequest::mutable_receiveinteraction() {
  ::rti1516_2025::fedpro::ReceiveInteraction* _msg = _internal_mutable_receiveinteraction();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.receiveInteraction)
  return _msg;
}

// .rti1516_2025.fedpro.ReceiveInteractionWithTime receiveInteractionWithTime = 34;
inline bool CallbackRequest::_internal_has_receiveinteractionwithtime() const {
  return callbackRequest_case() == kReceiveInteractionWithTime;
}
inline bool CallbackRequest::has_receiveinteractionwithtime() const {
  return _internal_has_receiveinteractionwithtime();
}
inline void CallbackRequest::set_has_receiveinteractionwithtime() {
  _impl_._oneof_case_[0] = kReceiveInteractionWithTime;
}
inline void CallbackRequest::clear_receiveinteractionwithtime() {
  if (_internal_has_receiveinteractionwithtime()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.receiveinteractionwithtime_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::ReceiveInteractionWithTime* CallbackRequest::release_receiveinteractionwithtime() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.receiveInteractionWithTime)
  if (_internal_has_receiveinteractionwithtime()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReceiveInteractionWithTime* temp = _impl_.callbackRequest_.receiveinteractionwithtime_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.receiveinteractionwithtime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ReceiveInteractionWithTime& CallbackRequest::_internal_receiveinteractionwithtime() const {
  return _internal_has_receiveinteractionwithtime()
      ? *_impl_.callbackRequest_.receiveinteractionwithtime_
      : reinterpret_cast< ::rti1516_2025::fedpro::ReceiveInteractionWithTime&>(::rti1516_2025::fedpro::_ReceiveInteractionWithTime_default_instance_);
}
inline const ::rti1516_2025::fedpro::ReceiveInteractionWithTime& CallbackRequest::receiveinteractionwithtime() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.receiveInteractionWithTime)
  return _internal_receiveinteractionwithtime();
}
inline ::rti1516_2025::fedpro::ReceiveInteractionWithTime* CallbackRequest::unsafe_arena_release_receiveinteractionwithtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.receiveInteractionWithTime)
  if (_internal_has_receiveinteractionwithtime()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReceiveInteractionWithTime* temp = _impl_.callbackRequest_.receiveinteractionwithtime_;
    _impl_.callbackRequest_.receiveinteractionwithtime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_receiveinteractionwithtime(::rti1516_2025::fedpro::ReceiveInteractionWithTime* receiveinteractionwithtime) {
  clear_callbackRequest();
  if (receiveinteractionwithtime) {
    set_has_receiveinteractionwithtime();
    _impl_.callbackRequest_.receiveinteractionwithtime_ = receiveinteractionwithtime;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.receiveInteractionWithTime)
}
inline ::rti1516_2025::fedpro::ReceiveInteractionWithTime* CallbackRequest::_internal_mutable_receiveinteractionwithtime() {
  if (!_internal_has_receiveinteractionwithtime()) {
    clear_callbackRequest();
    set_has_receiveinteractionwithtime();
    _impl_.callbackRequest_.receiveinteractionwithtime_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ReceiveInteractionWithTime >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.receiveinteractionwithtime_;
}
inline ::rti1516_2025::fedpro::ReceiveInteractionWithTime* CallbackRequest::mutable_receiveinteractionwithtime() {
  ::rti1516_2025::fedpro::ReceiveInteractionWithTime* _msg = _internal_mutable_receiveinteractionwithtime();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.receiveInteractionWithTime)
  return _msg;
}

// .rti1516_2025.fedpro.ReceiveDirectedInteraction receiveDirectedInteraction = 35;
inline bool CallbackRequest::_internal_has_receivedirectedinteraction() const {
  return callbackRequest_case() == kReceiveDirectedInteraction;
}
inline bool CallbackRequest::has_receivedirectedinteraction() const {
  return _internal_has_receivedirectedinteraction();
}
inline void CallbackRequest::set_has_receivedirectedinteraction() {
  _impl_._oneof_case_[0] = kReceiveDirectedInteraction;
}
inline void CallbackRequest::clear_receivedirectedinteraction() {
  if (_internal_has_receivedirectedinteraction()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.receivedirectedinteraction_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::ReceiveDirectedInteraction* CallbackRequest::release_receivedirectedinteraction() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.receiveDirectedInteraction)
  if (_internal_has_receivedirectedinteraction()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReceiveDirectedInteraction* temp = _impl_.callbackRequest_.receivedirectedinteraction_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.receivedirectedinteraction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ReceiveDirectedInteraction& CallbackRequest::_internal_receivedirectedinteraction() const {
  return _internal_has_receivedirectedinteraction()
      ? *_impl_.callbackRequest_.receivedirectedinteraction_
      : reinterpret_cast< ::rti1516_2025::fedpro::ReceiveDirectedInteraction&>(::rti1516_2025::fedpro::_ReceiveDirectedInteraction_default_instance_);
}
inline const ::rti1516_2025::fedpro::ReceiveDirectedInteraction& CallbackRequest::receivedirectedinteraction() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.receiveDirectedInteraction)
  return _internal_receivedirectedinteraction();
}
inline ::rti1516_2025::fedpro::ReceiveDirectedInteraction* CallbackRequest::unsafe_arena_release_receivedirectedinteraction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.receiveDirectedInteraction)
  if (_internal_has_receivedirectedinteraction()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReceiveDirectedInteraction* temp = _impl_.callbackRequest_.receivedirectedinteraction_;
    _impl_.callbackRequest_.receivedirectedinteraction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_receivedirectedinteraction(::rti1516_2025::fedpro::ReceiveDirectedInteraction* receivedirectedinteraction) {
  clear_callbackRequest();
  if (receivedirectedinteraction) {
    set_has_receivedirectedinteraction();
    _impl_.callbackRequest_.receivedirectedinteraction_ = receivedirectedinteraction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.receiveDirectedInteraction)
}
inline ::rti1516_2025::fedpro::ReceiveDirectedInteraction* CallbackRequest::_internal_mutable_receivedirectedinteraction() {
  if (!_internal_has_receivedirectedinteraction()) {
    clear_callbackRequest();
    set_has_receivedirectedinteraction();
    _impl_.callbackRequest_.receivedirectedinteraction_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ReceiveDirectedInteraction >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.receivedirectedinteraction_;
}
inline ::rti1516_2025::fedpro::ReceiveDirectedInteraction* CallbackRequest::mutable_receivedirectedinteraction() {
  ::rti1516_2025::fedpro::ReceiveDirectedInteraction* _msg = _internal_mutable_receivedirectedinteraction();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.receiveDirectedInteraction)
  return _msg;
}

// .rti1516_2025.fedpro.ReceiveDirectedInteractionWithTime receiveDirectedInteractionWithTime = 36;
inline bool CallbackRequest::_internal_has_receivedirectedinteractionwithtime() const {
  return callbackRequest_case() == kReceiveDirectedInteractionWithTime;
}
inline bool CallbackRequest::has_receivedirectedinteractionwithtime() const {
  return _internal_has_receivedirectedinteractionwithtime();
}
inline void CallbackRequest::set_has_receivedirectedinteractionwithtime() {
  _impl_._oneof_case_[0] = kReceiveDirectedInteractionWithTime;
}
inline void CallbackRequest::clear_receivedirectedinteractionwithtime() {
  if (_internal_has_receivedirectedinteractionwithtime()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.receivedirectedinteractionwithtime_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime* CallbackRequest::release_receivedirectedinteractionwithtime() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.receiveDirectedInteractionWithTime)
  if (_internal_has_receivedirectedinteractionwithtime()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime* temp = _impl_.callbackRequest_.receivedirectedinteractionwithtime_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.receivedirectedinteractionwithtime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime& CallbackRequest::_internal_receivedirectedinteractionwithtime() const {
  return _internal_has_receivedirectedinteractionwithtime()
      ? *_impl_.callbackRequest_.receivedirectedinteractionwithtime_
      : reinterpret_cast< ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime&>(::rti1516_2025::fedpro::_ReceiveDirectedInteractionWithTime_default_instance_);
}
inline const ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime& CallbackRequest::receivedirectedinteractionwithtime() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.receiveDirectedInteractionWithTime)
  return _internal_receivedirectedinteractionwithtime();
}
inline ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime* CallbackRequest::unsafe_arena_release_receivedirectedinteractionwithtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.receiveDirectedInteractionWithTime)
  if (_internal_has_receivedirectedinteractionwithtime()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime* temp = _impl_.callbackRequest_.receivedirectedinteractionwithtime_;
    _impl_.callbackRequest_.receivedirectedinteractionwithtime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_receivedirectedinteractionwithtime(::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime* receivedirectedinteractionwithtime) {
  clear_callbackRequest();
  if (receivedirectedinteractionwithtime) {
    set_has_receivedirectedinteractionwithtime();
    _impl_.callbackRequest_.receivedirectedinteractionwithtime_ = receivedirectedinteractionwithtime;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.receiveDirectedInteractionWithTime)
}
inline ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime* CallbackRequest::_internal_mutable_receivedirectedinteractionwithtime() {
  if (!_internal_has_receivedirectedinteractionwithtime()) {
    clear_callbackRequest();
    set_has_receivedirectedinteractionwithtime();
    _impl_.callbackRequest_.receivedirectedinteractionwithtime_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.receivedirectedinteractionwithtime_;
}
inline ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime* CallbackRequest::mutable_receivedirectedinteractionwithtime() {
  ::rti1516_2025::fedpro::ReceiveDirectedInteractionWithTime* _msg = _internal_mutable_receivedirectedinteractionwithtime();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.receiveDirectedInteractionWithTime)
  return _msg;
}

// .rti1516_2025.fedpro.RemoveObjectInstance removeObjectInstance = 37;
inline bool CallbackRequest::_internal_has_removeobjectinstance() const {
  return callbackRequest_case() == kRemoveObjectInstance;
}
inline bool CallbackRequest::has_removeobjectinstance() const {
  return _internal_has_removeobjectinstance();
}
inline void CallbackRequest::set_has_removeobjectinstance() {
  _impl_._oneof_case_[0] = kRemoveObjectInstance;
}
inline void CallbackRequest::clear_removeobjectinstance() {
  if (_internal_has_removeobjectinstance()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.removeobjectinstance_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::RemoveObjectInstance* CallbackRequest::release_removeobjectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.removeObjectInstance)
  if (_internal_has_removeobjectinstance()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::RemoveObjectInstance* temp = _impl_.callbackRequest_.removeobjectinstance_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.removeobjectinstance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::RemoveObjectInstance& CallbackRequest::_internal_removeobjectinstance() const {
  return _internal_has_removeobjectinstance()
      ? *_impl_.callbackRequest_.removeobjectinstance_
      : reinterpret_cast< ::rti1516_2025::fedpro::RemoveObjectInstance&>(::rti1516_2025::fedpro::_RemoveObjectInstance_default_instance_);
}
inline const ::rti1516_2025::fedpro::RemoveObjectInstance& CallbackRequest::removeobjectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.removeObjectInstance)
  return _internal_removeobjectinstance();
}
inline ::rti1516_2025::fedpro::RemoveObjectInstance* CallbackRequest::unsafe_arena_release_removeobjectinstance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.removeObjectInstance)
  if (_internal_has_removeobjectinstance()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::RemoveObjectInstance* temp = _impl_.callbackRequest_.removeobjectinstance_;
    _impl_.callbackRequest_.removeobjectinstance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_removeobjectinstance(::rti1516_2025::fedpro::RemoveObjectInstance* removeobjectinstance) {
  clear_callbackRequest();
  if (removeobjectinstance) {
    set_has_removeobjectinstance();
    _impl_.callbackRequest_.removeobjectinstance_ = removeobjectinstance;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.removeObjectInstance)
}
inline ::rti1516_2025::fedpro::RemoveObjectInstance* CallbackRequest::_internal_mutable_removeobjectinstance() {
  if (!_internal_has_removeobjectinstance()) {
    clear_callbackRequest();
    set_has_removeobjectinstance();
    _impl_.callbackRequest_.removeobjectinstance_ = CreateMaybeMessage< ::rti1516_2025::fedpro::RemoveObjectInstance >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.removeobjectinstance_;
}
inline ::rti1516_2025::fedpro::RemoveObjectInstance* CallbackRequest::mutable_removeobjectinstance() {
  ::rti1516_2025::fedpro::RemoveObjectInstance* _msg = _internal_mutable_removeobjectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.removeObjectInstance)
  return _msg;
}

// .rti1516_2025.fedpro.RemoveObjectInstanceWithTime removeObjectInstanceWithTime = 38;
inline bool CallbackRequest::_internal_has_removeobjectinstancewithtime() const {
  return callbackRequest_case() == kRemoveObjectInstanceWithTime;
}
inline bool CallbackRequest::has_removeobjectinstancewithtime() const {
  return _internal_has_removeobjectinstancewithtime();
}
inline void CallbackRequest::set_has_removeobjectinstancewithtime() {
  _impl_._oneof_case_[0] = kRemoveObjectInstanceWithTime;
}
inline void CallbackRequest::clear_removeobjectinstancewithtime() {
  if (_internal_has_removeobjectinstancewithtime()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.removeobjectinstancewithtime_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime* CallbackRequest::release_removeobjectinstancewithtime() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.removeObjectInstanceWithTime)
  if (_internal_has_removeobjectinstancewithtime()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime* temp = _impl_.callbackRequest_.removeobjectinstancewithtime_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.removeobjectinstancewithtime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime& CallbackRequest::_internal_removeobjectinstancewithtime() const {
  return _internal_has_removeobjectinstancewithtime()
      ? *_impl_.callbackRequest_.removeobjectinstancewithtime_
      : reinterpret_cast< ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime&>(::rti1516_2025::fedpro::_RemoveObjectInstanceWithTime_default_instance_);
}
inline const ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime& CallbackRequest::removeobjectinstancewithtime() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.removeObjectInstanceWithTime)
  return _internal_removeobjectinstancewithtime();
}
inline ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime* CallbackRequest::unsafe_arena_release_removeobjectinstancewithtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.removeObjectInstanceWithTime)
  if (_internal_has_removeobjectinstancewithtime()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime* temp = _impl_.callbackRequest_.removeobjectinstancewithtime_;
    _impl_.callbackRequest_.removeobjectinstancewithtime_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_removeobjectinstancewithtime(::rti1516_2025::fedpro::RemoveObjectInstanceWithTime* removeobjectinstancewithtime) {
  clear_callbackRequest();
  if (removeobjectinstancewithtime) {
    set_has_removeobjectinstancewithtime();
    _impl_.callbackRequest_.removeobjectinstancewithtime_ = removeobjectinstancewithtime;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.removeObjectInstanceWithTime)
}
inline ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime* CallbackRequest::_internal_mutable_removeobjectinstancewithtime() {
  if (!_internal_has_removeobjectinstancewithtime()) {
    clear_callbackRequest();
    set_has_removeobjectinstancewithtime();
    _impl_.callbackRequest_.removeobjectinstancewithtime_ = CreateMaybeMessage< ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.removeobjectinstancewithtime_;
}
inline ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime* CallbackRequest::mutable_removeobjectinstancewithtime() {
  ::rti1516_2025::fedpro::RemoveObjectInstanceWithTime* _msg = _internal_mutable_removeobjectinstancewithtime();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.removeObjectInstanceWithTime)
  return _msg;
}

// .rti1516_2025.fedpro.AttributesInScope attributesInScope = 39;
inline bool CallbackRequest::_internal_has_attributesinscope() const {
  return callbackRequest_case() == kAttributesInScope;
}
inline bool CallbackRequest::has_attributesinscope() const {
  return _internal_has_attributesinscope();
}
inline void CallbackRequest::set_has_attributesinscope() {
  _impl_._oneof_case_[0] = kAttributesInScope;
}
inline void CallbackRequest::clear_attributesinscope() {
  if (_internal_has_attributesinscope()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.attributesinscope_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::AttributesInScope* CallbackRequest::release_attributesinscope() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.attributesInScope)
  if (_internal_has_attributesinscope()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::AttributesInScope* temp = _impl_.callbackRequest_.attributesinscope_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.attributesinscope_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::AttributesInScope& CallbackRequest::_internal_attributesinscope() const {
  return _internal_has_attributesinscope()
      ? *_impl_.callbackRequest_.attributesinscope_
      : reinterpret_cast< ::rti1516_2025::fedpro::AttributesInScope&>(::rti1516_2025::fedpro::_AttributesInScope_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributesInScope& CallbackRequest::attributesinscope() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.attributesInScope)
  return _internal_attributesinscope();
}
inline ::rti1516_2025::fedpro::AttributesInScope* CallbackRequest::unsafe_arena_release_attributesinscope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.attributesInScope)
  if (_internal_has_attributesinscope()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::AttributesInScope* temp = _impl_.callbackRequest_.attributesinscope_;
    _impl_.callbackRequest_.attributesinscope_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_attributesinscope(::rti1516_2025::fedpro::AttributesInScope* attributesinscope) {
  clear_callbackRequest();
  if (attributesinscope) {
    set_has_attributesinscope();
    _impl_.callbackRequest_.attributesinscope_ = attributesinscope;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.attributesInScope)
}
inline ::rti1516_2025::fedpro::AttributesInScope* CallbackRequest::_internal_mutable_attributesinscope() {
  if (!_internal_has_attributesinscope()) {
    clear_callbackRequest();
    set_has_attributesinscope();
    _impl_.callbackRequest_.attributesinscope_ = CreateMaybeMessage< ::rti1516_2025::fedpro::AttributesInScope >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.attributesinscope_;
}
inline ::rti1516_2025::fedpro::AttributesInScope* CallbackRequest::mutable_attributesinscope() {
  ::rti1516_2025::fedpro::AttributesInScope* _msg = _internal_mutable_attributesinscope();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.attributesInScope)
  return _msg;
}

// .rti1516_2025.fedpro.AttributesOutOfScope attributesOutOfScope = 40;
inline bool CallbackRequest::_internal_has_attributesoutofscope() const {
  return callbackRequest_case() == kAttributesOutOfScope;
}
inline bool CallbackRequest::has_attributesoutofscope() const {
  return _internal_has_attributesoutofscope();
}
inline void CallbackRequest::set_has_attributesoutofscope() {
  _impl_._oneof_case_[0] = kAttributesOutOfScope;
}
inline void CallbackRequest::clear_attributesoutofscope() {
  if (_internal_has_attributesoutofscope()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.attributesoutofscope_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::AttributesOutOfScope* CallbackRequest::release_attributesoutofscope() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.attributesOutOfScope)
  if (_internal_has_attributesoutofscope()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::AttributesOutOfScope* temp = _impl_.callbackRequest_.attributesoutofscope_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.attributesoutofscope_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::AttributesOutOfScope& CallbackRequest::_internal_attributesoutofscope() const {
  return _internal_has_attributesoutofscope()
      ? *_impl_.callbackRequest_.attributesoutofscope_
      : reinterpret_cast< ::rti1516_2025::fedpro::AttributesOutOfScope&>(::rti1516_2025::fedpro::_AttributesOutOfScope_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributesOutOfScope& CallbackRequest::attributesoutofscope() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.attributesOutOfScope)
  return _internal_attributesoutofscope();
}
inline ::rti1516_2025::fedpro::AttributesOutOfScope* CallbackRequest::unsafe_arena_release_attributesoutofscope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.attributesOutOfScope)
  if (_internal_has_attributesoutofscope()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::AttributesOutOfScope* temp = _impl_.callbackRequest_.attributesoutofscope_;
    _impl_.callbackRequest_.attributesoutofscope_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_attributesoutofscope(::rti1516_2025::fedpro::AttributesOutOfScope* attributesoutofscope) {
  clear_callbackRequest();
  if (attributesoutofscope) {
    set_has_attributesoutofscope();
    _impl_.callbackRequest_.attributesoutofscope_ = attributesoutofscope;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.attributesOutOfScope)
}
inline ::rti1516_2025::fedpro::AttributesOutOfScope* CallbackRequest::_internal_mutable_attributesoutofscope() {
  if (!_internal_has_attributesoutofscope()) {
    clear_callbackRequest();
    set_has_attributesoutofscope();
    _impl_.callbackRequest_.attributesoutofscope_ = CreateMaybeMessage< ::rti1516_2025::fedpro::AttributesOutOfScope >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.attributesoutofscope_;
}
inline ::rti1516_2025::fedpro::AttributesOutOfScope* CallbackRequest::mutable_attributesoutofscope() {
  ::rti1516_2025::fedpro::AttributesOutOfScope* _msg = _internal_mutable_attributesoutofscope();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.attributesOutOfScope)
  return _msg;
}

// .rti1516_2025.fedpro.ProvideAttributeValueUpdate provideAttributeValueUpdate = 41;
inline bool CallbackRequest::_internal_has_provideattributevalueupdate() const {
  return callbackRequest_case() == kProvideAttributeValueUpdate;
}
inline bool CallbackRequest::has_provideattributevalueupdate() const {
  return _internal_has_provideattributevalueupdate();
}
inline void CallbackRequest::set_has_provideattributevalueupdate() {
  _impl_._oneof_case_[0] = kProvideAttributeValueUpdate;
}
inline void CallbackRequest::clear_provideattributevalueupdate() {
  if (_internal_has_provideattributevalueupdate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.provideattributevalueupdate_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::ProvideAttributeValueUpdate* CallbackRequest::release_provideattributevalueupdate() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.provideAttributeValueUpdate)
  if (_internal_has_provideattributevalueupdate()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ProvideAttributeValueUpdate* temp = _impl_.callbackRequest_.provideattributevalueupdate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.provideattributevalueupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ProvideAttributeValueUpdate& CallbackRequest::_internal_provideattributevalueupdate() const {
  return _internal_has_provideattributevalueupdate()
      ? *_impl_.callbackRequest_.provideattributevalueupdate_
      : reinterpret_cast< ::rti1516_2025::fedpro::ProvideAttributeValueUpdate&>(::rti1516_2025::fedpro::_ProvideAttributeValueUpdate_default_instance_);
}
inline const ::rti1516_2025::fedpro::ProvideAttributeValueUpdate& CallbackRequest::provideattributevalueupdate() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.provideAttributeValueUpdate)
  return _internal_provideattributevalueupdate();
}
inline ::rti1516_2025::fedpro::ProvideAttributeValueUpdate* CallbackRequest::unsafe_arena_release_provideattributevalueupdate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.provideAttributeValueUpdate)
  if (_internal_has_provideattributevalueupdate()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ProvideAttributeValueUpdate* temp = _impl_.callbackRequest_.provideattributevalueupdate_;
    _impl_.callbackRequest_.provideattributevalueupdate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_provideattributevalueupdate(::rti1516_2025::fedpro::ProvideAttributeValueUpdate* provideattributevalueupdate) {
  clear_callbackRequest();
  if (provideattributevalueupdate) {
    set_has_provideattributevalueupdate();
    _impl_.callbackRequest_.provideattributevalueupdate_ = provideattributevalueupdate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.provideAttributeValueUpdate)
}
inline ::rti1516_2025::fedpro::ProvideAttributeValueUpdate* CallbackRequest::_internal_mutable_provideattributevalueupdate() {
  if (!_internal_has_provideattributevalueupdate()) {
    clear_callbackRequest();
    set_has_provideattributevalueupdate();
    _impl_.callbackRequest_.provideattributevalueupdate_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ProvideAttributeValueUpdate >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.provideattributevalueupdate_;
}
inline ::rti1516_2025::fedpro::ProvideAttributeValueUpdate* CallbackRequest::mutable_provideattributevalueupdate() {
  ::rti1516_2025::fedpro::ProvideAttributeValueUpdate* _msg = _internal_mutable_provideattributevalueupdate();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.provideAttributeValueUpdate)
  return _msg;
}

// .rti1516_2025.fedpro.TurnUpdatesOnForObjectInstance turnUpdatesOnForObjectInstance = 42;
inline bool CallbackRequest::_internal_has_turnupdatesonforobjectinstance() const {
  return callbackRequest_case() == kTurnUpdatesOnForObjectInstance;
}
inline bool CallbackRequest::has_turnupdatesonforobjectinstance() const {
  return _internal_has_turnupdatesonforobjectinstance();
}
inline void CallbackRequest::set_has_turnupdatesonforobjectinstance() {
  _impl_._oneof_case_[0] = kTurnUpdatesOnForObjectInstance;
}
inline void CallbackRequest::clear_turnupdatesonforobjectinstance() {
  if (_internal_has_turnupdatesonforobjectinstance()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.turnupdatesonforobjectinstance_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance* CallbackRequest::release_turnupdatesonforobjectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.turnUpdatesOnForObjectInstance)
  if (_internal_has_turnupdatesonforobjectinstance()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance* temp = _impl_.callbackRequest_.turnupdatesonforobjectinstance_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.turnupdatesonforobjectinstance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance& CallbackRequest::_internal_turnupdatesonforobjectinstance() const {
  return _internal_has_turnupdatesonforobjectinstance()
      ? *_impl_.callbackRequest_.turnupdatesonforobjectinstance_
      : reinterpret_cast< ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance&>(::rti1516_2025::fedpro::_TurnUpdatesOnForObjectInstance_default_instance_);
}
inline const ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance& CallbackRequest::turnupdatesonforobjectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.turnUpdatesOnForObjectInstance)
  return _internal_turnupdatesonforobjectinstance();
}
inline ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance* CallbackRequest::unsafe_arena_release_turnupdatesonforobjectinstance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.turnUpdatesOnForObjectInstance)
  if (_internal_has_turnupdatesonforobjectinstance()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance* temp = _impl_.callbackRequest_.turnupdatesonforobjectinstance_;
    _impl_.callbackRequest_.turnupdatesonforobjectinstance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_turnupdatesonforobjectinstance(::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance* turnupdatesonforobjectinstance) {
  clear_callbackRequest();
  if (turnupdatesonforobjectinstance) {
    set_has_turnupdatesonforobjectinstance();
    _impl_.callbackRequest_.turnupdatesonforobjectinstance_ = turnupdatesonforobjectinstance;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.turnUpdatesOnForObjectInstance)
}
inline ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance* CallbackRequest::_internal_mutable_turnupdatesonforobjectinstance() {
  if (!_internal_has_turnupdatesonforobjectinstance()) {
    clear_callbackRequest();
    set_has_turnupdatesonforobjectinstance();
    _impl_.callbackRequest_.turnupdatesonforobjectinstance_ = CreateMaybeMessage< ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.turnupdatesonforobjectinstance_;
}
inline ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance* CallbackRequest::mutable_turnupdatesonforobjectinstance() {
  ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstance* _msg = _internal_mutable_turnupdatesonforobjectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.turnUpdatesOnForObjectInstance)
  return _msg;
}

// .rti1516_2025.fedpro.TurnUpdatesOnForObjectInstanceWithRate turnUpdatesOnForObjectInstanceWithRate = 43;
inline bool CallbackRequest::_internal_has_turnupdatesonforobjectinstancewithrate() const {
  return callbackRequest_case() == kTurnUpdatesOnForObjectInstanceWithRate;
}
inline bool CallbackRequest::has_turnupdatesonforobjectinstancewithrate() const {
  return _internal_has_turnupdatesonforobjectinstancewithrate();
}
inline void CallbackRequest::set_has_turnupdatesonforobjectinstancewithrate() {
  _impl_._oneof_case_[0] = kTurnUpdatesOnForObjectInstanceWithRate;
}
inline void CallbackRequest::clear_turnupdatesonforobjectinstancewithrate() {
  if (_internal_has_turnupdatesonforobjectinstancewithrate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.turnupdatesonforobjectinstancewithrate_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate* CallbackRequest::release_turnupdatesonforobjectinstancewithrate() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.turnUpdatesOnForObjectInstanceWithRate)
  if (_internal_has_turnupdatesonforobjectinstancewithrate()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate* temp = _impl_.callbackRequest_.turnupdatesonforobjectinstancewithrate_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.turnupdatesonforobjectinstancewithrate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate& CallbackRequest::_internal_turnupdatesonforobjectinstancewithrate() const {
  return _internal_has_turnupdatesonforobjectinstancewithrate()
      ? *_impl_.callbackRequest_.turnupdatesonforobjectinstancewithrate_
      : reinterpret_cast< ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate&>(::rti1516_2025::fedpro::_TurnUpdatesOnForObjectInstanceWithRate_default_instance_);
}
inline const ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate& CallbackRequest::turnupdatesonforobjectinstancewithrate() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.turnUpdatesOnForObjectInstanceWithRate)
  return _internal_turnupdatesonforobjectinstancewithrate();
}
inline ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate* CallbackRequest::unsafe_arena_release_turnupdatesonforobjectinstancewithrate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.turnUpdatesOnForObjectInstanceWithRate)
  if (_internal_has_turnupdatesonforobjectinstancewithrate()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate* temp = _impl_.callbackRequest_.turnupdatesonforobjectinstancewithrate_;
    _impl_.callbackRequest_.turnupdatesonforobjectinstancewithrate_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_turnupdatesonforobjectinstancewithrate(::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate* turnupdatesonforobjectinstancewithrate) {
  clear_callbackRequest();
  if (turnupdatesonforobjectinstancewithrate) {
    set_has_turnupdatesonforobjectinstancewithrate();
    _impl_.callbackRequest_.turnupdatesonforobjectinstancewithrate_ = turnupdatesonforobjectinstancewithrate;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.turnUpdatesOnForObjectInstanceWithRate)
}
inline ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate* CallbackRequest::_internal_mutable_turnupdatesonforobjectinstancewithrate() {
  if (!_internal_has_turnupdatesonforobjectinstancewithrate()) {
    clear_callbackRequest();
    set_has_turnupdatesonforobjectinstancewithrate();
    _impl_.callbackRequest_.turnupdatesonforobjectinstancewithrate_ = CreateMaybeMessage< ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.turnupdatesonforobjectinstancewithrate_;
}
inline ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate* CallbackRequest::mutable_turnupdatesonforobjectinstancewithrate() {
  ::rti1516_2025::fedpro::TurnUpdatesOnForObjectInstanceWithRate* _msg = _internal_mutable_turnupdatesonforobjectinstancewithrate();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.turnUpdatesOnForObjectInstanceWithRate)
  return _msg;
}

// .rti1516_2025.fedpro.TurnUpdatesOffForObjectInstance turnUpdatesOffForObjectInstance = 44;
inline bool CallbackRequest::_internal_has_turnupdatesoffforobjectinstance() const {
  return callbackRequest_case() == kTurnUpdatesOffForObjectInstance;
}
inline bool CallbackRequest::has_turnupdatesoffforobjectinstance() const {
  return _internal_has_turnupdatesoffforobjectinstance();
}
inline void CallbackRequest::set_has_turnupdatesoffforobjectinstance() {
  _impl_._oneof_case_[0] = kTurnUpdatesOffForObjectInstance;
}
inline void CallbackRequest::clear_turnupdatesoffforobjectinstance() {
  if (_internal_has_turnupdatesoffforobjectinstance()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.turnupdatesoffforobjectinstance_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance* CallbackRequest::release_turnupdatesoffforobjectinstance() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.turnUpdatesOffForObjectInstance)
  if (_internal_has_turnupdatesoffforobjectinstance()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance* temp = _impl_.callbackRequest_.turnupdatesoffforobjectinstance_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.turnupdatesoffforobjectinstance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance& CallbackRequest::_internal_turnupdatesoffforobjectinstance() const {
  return _internal_has_turnupdatesoffforobjectinstance()
      ? *_impl_.callbackRequest_.turnupdatesoffforobjectinstance_
      : reinterpret_cast< ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance&>(::rti1516_2025::fedpro::_TurnUpdatesOffForObjectInstance_default_instance_);
}
inline const ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance& CallbackRequest::turnupdatesoffforobjectinstance() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.turnUpdatesOffForObjectInstance)
  return _internal_turnupdatesoffforobjectinstance();
}
inline ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance* CallbackRequest::unsafe_arena_release_turnupdatesoffforobjectinstance() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.turnUpdatesOffForObjectInstance)
  if (_internal_has_turnupdatesoffforobjectinstance()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance* temp = _impl_.callbackRequest_.turnupdatesoffforobjectinstance_;
    _impl_.callbackRequest_.turnupdatesoffforobjectinstance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_turnupdatesoffforobjectinstance(::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance* turnupdatesoffforobjectinstance) {
  clear_callbackRequest();
  if (turnupdatesoffforobjectinstance) {
    set_has_turnupdatesoffforobjectinstance();
    _impl_.callbackRequest_.turnupdatesoffforobjectinstance_ = turnupdatesoffforobjectinstance;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.turnUpdatesOffForObjectInstance)
}
inline ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance* CallbackRequest::_internal_mutable_turnupdatesoffforobjectinstance() {
  if (!_internal_has_turnupdatesoffforobjectinstance()) {
    clear_callbackRequest();
    set_has_turnupdatesoffforobjectinstance();
    _impl_.callbackRequest_.turnupdatesoffforobjectinstance_ = CreateMaybeMessage< ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.turnupdatesoffforobjectinstance_;
}
inline ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance* CallbackRequest::mutable_turnupdatesoffforobjectinstance() {
  ::rti1516_2025::fedpro::TurnUpdatesOffForObjectInstance* _msg = _internal_mutable_turnupdatesoffforobjectinstance();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.turnUpdatesOffForObjectInstance)
  return _msg;
}

// .rti1516_2025.fedpro.ConfirmAttributeTransportationTypeChange confirmAttributeTransportationTypeChange = 45;
inline bool CallbackRequest::_internal_has_confirmattributetransportationtypechange() const {
  return callbackRequest_case() == kConfirmAttributeTransportationTypeChange;
}
inline bool CallbackRequest::has_confirmattributetransportationtypechange() const {
  return _internal_has_confirmattributetransportationtypechange();
}
inline void CallbackRequest::set_has_confirmattributetransportationtypechange() {
  _impl_._oneof_case_[0] = kConfirmAttributeTransportationTypeChange;
}
inline void CallbackRequest::clear_confirmattributetransportationtypechange() {
  if (_internal_has_confirmattributetransportationtypechange()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.confirmattributetransportationtypechange_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange* CallbackRequest::release_confirmattributetransportationtypechange() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.confirmAttributeTransportationTypeChange)
  if (_internal_has_confirmattributetransportationtypechange()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange* temp = _impl_.callbackRequest_.confirmattributetransportationtypechange_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.confirmattributetransportationtypechange_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange& CallbackRequest::_internal_confirmattributetransportationtypechange() const {
  return _internal_has_confirmattributetransportationtypechange()
      ? *_impl_.callbackRequest_.confirmattributetransportationtypechange_
      : reinterpret_cast< ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange&>(::rti1516_2025::fedpro::_ConfirmAttributeTransportationTypeChange_default_instance_);
}
inline const ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange& CallbackRequest::confirmattributetransportationtypechange() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.confirmAttributeTransportationTypeChange)
  return _internal_confirmattributetransportationtypechange();
}
inline ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange* CallbackRequest::unsafe_arena_release_confirmattributetransportationtypechange() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.confirmAttributeTransportationTypeChange)
  if (_internal_has_confirmattributetransportationtypechange()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange* temp = _impl_.callbackRequest_.confirmattributetransportationtypechange_;
    _impl_.callbackRequest_.confirmattributetransportationtypechange_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_confirmattributetransportationtypechange(::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange* confirmattributetransportationtypechange) {
  clear_callbackRequest();
  if (confirmattributetransportationtypechange) {
    set_has_confirmattributetransportationtypechange();
    _impl_.callbackRequest_.confirmattributetransportationtypechange_ = confirmattributetransportationtypechange;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.confirmAttributeTransportationTypeChange)
}
inline ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange* CallbackRequest::_internal_mutable_confirmattributetransportationtypechange() {
  if (!_internal_has_confirmattributetransportationtypechange()) {
    clear_callbackRequest();
    set_has_confirmattributetransportationtypechange();
    _impl_.callbackRequest_.confirmattributetransportationtypechange_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.confirmattributetransportationtypechange_;
}
inline ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange* CallbackRequest::mutable_confirmattributetransportationtypechange() {
  ::rti1516_2025::fedpro::ConfirmAttributeTransportationTypeChange* _msg = _internal_mutable_confirmattributetransportationtypechange();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.confirmAttributeTransportationTypeChange)
  return _msg;
}

// .rti1516_2025.fedpro.ReportAttributeTransportationType reportAttributeTransportationType = 46;
inline bool CallbackRequest::_internal_has_reportattributetransportationtype() const {
  return callbackRequest_case() == kReportAttributeTransportationType;
}
inline bool CallbackRequest::has_reportattributetransportationtype() const {
  return _internal_has_reportattributetransportationtype();
}
inline void CallbackRequest::set_has_reportattributetransportationtype() {
  _impl_._oneof_case_[0] = kReportAttributeTransportationType;
}
inline void CallbackRequest::clear_reportattributetransportationtype() {
  if (_internal_has_reportattributetransportationtype()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.reportattributetransportationtype_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::ReportAttributeTransportationType* CallbackRequest::release_reportattributetransportationtype() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.reportAttributeTransportationType)
  if (_internal_has_reportattributetransportationtype()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReportAttributeTransportationType* temp = _impl_.callbackRequest_.reportattributetransportationtype_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.reportattributetransportationtype_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ReportAttributeTransportationType& CallbackRequest::_internal_reportattributetransportationtype() const {
  return _internal_has_reportattributetransportationtype()
      ? *_impl_.callbackRequest_.reportattributetransportationtype_
      : reinterpret_cast< ::rti1516_2025::fedpro::ReportAttributeTransportationType&>(::rti1516_2025::fedpro::_ReportAttributeTransportationType_default_instance_);
}
inline const ::rti1516_2025::fedpro::ReportAttributeTransportationType& CallbackRequest::reportattributetransportationtype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.reportAttributeTransportationType)
  return _internal_reportattributetransportationtype();
}
inline ::rti1516_2025::fedpro::ReportAttributeTransportationType* CallbackRequest::unsafe_arena_release_reportattributetransportationtype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.reportAttributeTransportationType)
  if (_internal_has_reportattributetransportationtype()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReportAttributeTransportationType* temp = _impl_.callbackRequest_.reportattributetransportationtype_;
    _impl_.callbackRequest_.reportattributetransportationtype_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_reportattributetransportationtype(::rti1516_2025::fedpro::ReportAttributeTransportationType* reportattributetransportationtype) {
  clear_callbackRequest();
  if (reportattributetransportationtype) {
    set_has_reportattributetransportationtype();
    _impl_.callbackRequest_.reportattributetransportationtype_ = reportattributetransportationtype;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.reportAttributeTransportationType)
}
inline ::rti1516_2025::fedpro::ReportAttributeTransportationType* CallbackRequest::_internal_mutable_reportattributetransportationtype() {
  if (!_internal_has_reportattributetransportationtype()) {
    clear_callbackRequest();
    set_has_reportattributetransportationtype();
    _impl_.callbackRequest_.reportattributetransportationtype_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ReportAttributeTransportationType >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.reportattributetransportationtype_;
}
inline ::rti1516_2025::fedpro::ReportAttributeTransportationType* CallbackRequest::mutable_reportattributetransportationtype() {
  ::rti1516_2025::fedpro::ReportAttributeTransportationType* _msg = _internal_mutable_reportattributetransportationtype();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.reportAttributeTransportationType)
  return _msg;
}

// .rti1516_2025.fedpro.ConfirmInteractionTransportationTypeChange confirmInteractionTransportationTypeChange = 47;
inline bool CallbackRequest::_internal_has_confirminteractiontransportationtypechange() const {
  return callbackRequest_case() == kConfirmInteractionTransportationTypeChange;
}
inline bool CallbackRequest::has_confirminteractiontransportationtypechange() const {
  return _internal_has_confirminteractiontransportationtypechange();
}
inline void CallbackRequest::set_has_confirminteractiontransportationtypechange() {
  _impl_._oneof_case_[0] = kConfirmInteractionTransportationTypeChange;
}
inline void CallbackRequest::clear_confirminteractiontransportationtypechange() {
  if (_internal_has_confirminteractiontransportationtypechange()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.confirminteractiontransportationtypechange_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange* CallbackRequest::release_confirminteractiontransportationtypechange() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.confirmInteractionTransportationTypeChange)
  if (_internal_has_confirminteractiontransportationtypechange()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange* temp = _impl_.callbackRequest_.confirminteractiontransportationtypechange_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.confirminteractiontransportationtypechange_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange& CallbackRequest::_internal_confirminteractiontransportationtypechange() const {
  return _internal_has_confirminteractiontransportationtypechange()
      ? *_impl_.callbackRequest_.confirminteractiontransportationtypechange_
      : reinterpret_cast< ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange&>(::rti1516_2025::fedpro::_ConfirmInteractionTransportationTypeChange_default_instance_);
}
inline const ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange& CallbackRequest::confirminteractiontransportationtypechange() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.confirmInteractionTransportationTypeChange)
  return _internal_confirminteractiontransportationtypechange();
}
inline ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange* CallbackRequest::unsafe_arena_release_confirminteractiontransportationtypechange() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.confirmInteractionTransportationTypeChange)
  if (_internal_has_confirminteractiontransportationtypechange()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange* temp = _impl_.callbackRequest_.confirminteractiontransportationtypechange_;
    _impl_.callbackRequest_.confirminteractiontransportationtypechange_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_confirminteractiontransportationtypechange(::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange* confirminteractiontransportationtypechange) {
  clear_callbackRequest();
  if (confirminteractiontransportationtypechange) {
    set_has_confirminteractiontransportationtypechange();
    _impl_.callbackRequest_.confirminteractiontransportationtypechange_ = confirminteractiontransportationtypechange;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.confirmInteractionTransportationTypeChange)
}
inline ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange* CallbackRequest::_internal_mutable_confirminteractiontransportationtypechange() {
  if (!_internal_has_confirminteractiontransportationtypechange()) {
    clear_callbackRequest();
    set_has_confirminteractiontransportationtypechange();
    _impl_.callbackRequest_.confirminteractiontransportationtypechange_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.confirminteractiontransportationtypechange_;
}
inline ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange* CallbackRequest::mutable_confirminteractiontransportationtypechange() {
  ::rti1516_2025::fedpro::ConfirmInteractionTransportationTypeChange* _msg = _internal_mutable_confirminteractiontransportationtypechange();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.confirmInteractionTransportationTypeChange)
  return _msg;
}

// .rti1516_2025.fedpro.ReportInteractionTransportationType reportInteractionTransportationType = 48;
inline bool CallbackRequest::_internal_has_reportinteractiontransportationtype() const {
  return callbackRequest_case() == kReportInteractionTransportationType;
}
inline bool CallbackRequest::has_reportinteractiontransportationtype() const {
  return _internal_has_reportinteractiontransportationtype();
}
inline void CallbackRequest::set_has_reportinteractiontransportationtype() {
  _impl_._oneof_case_[0] = kReportInteractionTransportationType;
}
inline void CallbackRequest::clear_reportinteractiontransportationtype() {
  if (_internal_has_reportinteractiontransportationtype()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.reportinteractiontransportationtype_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::ReportInteractionTransportationType* CallbackRequest::release_reportinteractiontransportationtype() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.reportInteractionTransportationType)
  if (_internal_has_reportinteractiontransportationtype()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReportInteractionTransportationType* temp = _impl_.callbackRequest_.reportinteractiontransportationtype_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.reportinteractiontransportationtype_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ReportInteractionTransportationType& CallbackRequest::_internal_reportinteractiontransportationtype() const {
  return _internal_has_reportinteractiontransportationtype()
      ? *_impl_.callbackRequest_.reportinteractiontransportationtype_
      : reinterpret_cast< ::rti1516_2025::fedpro::ReportInteractionTransportationType&>(::rti1516_2025::fedpro::_ReportInteractionTransportationType_default_instance_);
}
inline const ::rti1516_2025::fedpro::ReportInteractionTransportationType& CallbackRequest::reportinteractiontransportationtype() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.reportInteractionTransportationType)
  return _internal_reportinteractiontransportationtype();
}
inline ::rti1516_2025::fedpro::ReportInteractionTransportationType* CallbackRequest::unsafe_arena_release_reportinteractiontransportationtype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.reportInteractionTransportationType)
  if (_internal_has_reportinteractiontransportationtype()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ReportInteractionTransportationType* temp = _impl_.callbackRequest_.reportinteractiontransportationtype_;
    _impl_.callbackRequest_.reportinteractiontransportationtype_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_reportinteractiontransportationtype(::rti1516_2025::fedpro::ReportInteractionTransportationType* reportinteractiontransportationtype) {
  clear_callbackRequest();
  if (reportinteractiontransportationtype) {
    set_has_reportinteractiontransportationtype();
    _impl_.callbackRequest_.reportinteractiontransportationtype_ = reportinteractiontransportationtype;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.reportInteractionTransportationType)
}
inline ::rti1516_2025::fedpro::ReportInteractionTransportationType* CallbackRequest::_internal_mutable_reportinteractiontransportationtype() {
  if (!_internal_has_reportinteractiontransportationtype()) {
    clear_callbackRequest();
    set_has_reportinteractiontransportationtype();
    _impl_.callbackRequest_.reportinteractiontransportationtype_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ReportInteractionTransportationType >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.reportinteractiontransportationtype_;
}
inline ::rti1516_2025::fedpro::ReportInteractionTransportationType* CallbackRequest::mutable_reportinteractiontransportationtype() {
  ::rti1516_2025::fedpro::ReportInteractionTransportationType* _msg = _internal_mutable_reportinteractiontransportationtype();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.reportInteractionTransportationType)
  return _msg;
}

// .rti1516_2025.fedpro.RequestAttributeOwnershipAssumption requestAttributeOwnershipAssumption = 49;
inline bool CallbackRequest::_internal_has_requestattributeownershipassumption() const {
  return callbackRequest_case() == kRequestAttributeOwnershipAssumption;
}
inline bool CallbackRequest::has_requestattributeownershipassumption() const {
  return _internal_has_requestattributeownershipassumption();
}
inline void CallbackRequest::set_has_requestattributeownershipassumption() {
  _impl_._oneof_case_[0] = kRequestAttributeOwnershipAssumption;
}
inline void CallbackRequest::clear_requestattributeownershipassumption() {
  if (_internal_has_requestattributeownershipassumption()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.requestattributeownershipassumption_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption* CallbackRequest::release_requestattributeownershipassumption() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.requestAttributeOwnershipAssumption)
  if (_internal_has_requestattributeownershipassumption()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption* temp = _impl_.callbackRequest_.requestattributeownershipassumption_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.requestattributeownershipassumption_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption& CallbackRequest::_internal_requestattributeownershipassumption() const {
  return _internal_has_requestattributeownershipassumption()
      ? *_impl_.callbackRequest_.requestattributeownershipassumption_
      : reinterpret_cast< ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption&>(::rti1516_2025::fedpro::_RequestAttributeOwnershipAssumption_default_instance_);
}
inline const ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption& CallbackRequest::requestattributeownershipassumption() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.requestAttributeOwnershipAssumption)
  return _internal_requestattributeownershipassumption();
}
inline ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption* CallbackRequest::unsafe_arena_release_requestattributeownershipassumption() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.requestAttributeOwnershipAssumption)
  if (_internal_has_requestattributeownershipassumption()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption* temp = _impl_.callbackRequest_.requestattributeownershipassumption_;
    _impl_.callbackRequest_.requestattributeownershipassumption_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_requestattributeownershipassumption(::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption* requestattributeownershipassumption) {
  clear_callbackRequest();
  if (requestattributeownershipassumption) {
    set_has_requestattributeownershipassumption();
    _impl_.callbackRequest_.requestattributeownershipassumption_ = requestattributeownershipassumption;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.requestAttributeOwnershipAssumption)
}
inline ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption* CallbackRequest::_internal_mutable_requestattributeownershipassumption() {
  if (!_internal_has_requestattributeownershipassumption()) {
    clear_callbackRequest();
    set_has_requestattributeownershipassumption();
    _impl_.callbackRequest_.requestattributeownershipassumption_ = CreateMaybeMessage< ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.requestattributeownershipassumption_;
}
inline ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption* CallbackRequest::mutable_requestattributeownershipassumption() {
  ::rti1516_2025::fedpro::RequestAttributeOwnershipAssumption* _msg = _internal_mutable_requestattributeownershipassumption();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.requestAttributeOwnershipAssumption)
  return _msg;
}

// .rti1516_2025.fedpro.RequestDivestitureConfirmation requestDivestitureConfirmation = 50;
inline bool CallbackRequest::_internal_has_requestdivestitureconfirmation() const {
  return callbackRequest_case() == kRequestDivestitureConfirmation;
}
inline bool CallbackRequest::has_requestdivestitureconfirmation() const {
  return _internal_has_requestdivestitureconfirmation();
}
inline void CallbackRequest::set_has_requestdivestitureconfirmation() {
  _impl_._oneof_case_[0] = kRequestDivestitureConfirmation;
}
inline void CallbackRequest::clear_requestdivestitureconfirmation() {
  if (_internal_has_requestdivestitureconfirmation()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.requestdivestitureconfirmation_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::RequestDivestitureConfirmation* CallbackRequest::release_requestdivestitureconfirmation() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.requestDivestitureConfirmation)
  if (_internal_has_requestdivestitureconfirmation()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::RequestDivestitureConfirmation* temp = _impl_.callbackRequest_.requestdivestitureconfirmation_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.requestdivestitureconfirmation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::RequestDivestitureConfirmation& CallbackRequest::_internal_requestdivestitureconfirmation() const {
  return _internal_has_requestdivestitureconfirmation()
      ? *_impl_.callbackRequest_.requestdivestitureconfirmation_
      : reinterpret_cast< ::rti1516_2025::fedpro::RequestDivestitureConfirmation&>(::rti1516_2025::fedpro::_RequestDivestitureConfirmation_default_instance_);
}
inline const ::rti1516_2025::fedpro::RequestDivestitureConfirmation& CallbackRequest::requestdivestitureconfirmation() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.requestDivestitureConfirmation)
  return _internal_requestdivestitureconfirmation();
}
inline ::rti1516_2025::fedpro::RequestDivestitureConfirmation* CallbackRequest::unsafe_arena_release_requestdivestitureconfirmation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.requestDivestitureConfirmation)
  if (_internal_has_requestdivestitureconfirmation()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::RequestDivestitureConfirmation* temp = _impl_.callbackRequest_.requestdivestitureconfirmation_;
    _impl_.callbackRequest_.requestdivestitureconfirmation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_requestdivestitureconfirmation(::rti1516_2025::fedpro::RequestDivestitureConfirmation* requestdivestitureconfirmation) {
  clear_callbackRequest();
  if (requestdivestitureconfirmation) {
    set_has_requestdivestitureconfirmation();
    _impl_.callbackRequest_.requestdivestitureconfirmation_ = requestdivestitureconfirmation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.requestDivestitureConfirmation)
}
inline ::rti1516_2025::fedpro::RequestDivestitureConfirmation* CallbackRequest::_internal_mutable_requestdivestitureconfirmation() {
  if (!_internal_has_requestdivestitureconfirmation()) {
    clear_callbackRequest();
    set_has_requestdivestitureconfirmation();
    _impl_.callbackRequest_.requestdivestitureconfirmation_ = CreateMaybeMessage< ::rti1516_2025::fedpro::RequestDivestitureConfirmation >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.requestdivestitureconfirmation_;
}
inline ::rti1516_2025::fedpro::RequestDivestitureConfirmation* CallbackRequest::mutable_requestdivestitureconfirmation() {
  ::rti1516_2025::fedpro::RequestDivestitureConfirmation* _msg = _internal_mutable_requestdivestitureconfirmation();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.requestDivestitureConfirmation)
  return _msg;
}

// .rti1516_2025.fedpro.AttributeOwnershipAcquisitionNotification attributeOwnershipAcquisitionNotification = 51;
inline bool CallbackRequest::_internal_has_attributeownershipacquisitionnotification() const {
  return callbackRequest_case() == kAttributeOwnershipAcquisitionNotification;
}
inline bool CallbackRequest::has_attributeownershipacquisitionnotification() const {
  return _internal_has_attributeownershipacquisitionnotification();
}
inline void CallbackRequest::set_has_attributeownershipacquisitionnotification() {
  _impl_._oneof_case_[0] = kAttributeOwnershipAcquisitionNotification;
}
inline void CallbackRequest::clear_attributeownershipacquisitionnotification() {
  if (_internal_has_attributeownershipacquisitionnotification()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.attributeownershipacquisitionnotification_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification* CallbackRequest::release_attributeownershipacquisitionnotification() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.attributeOwnershipAcquisitionNotification)
  if (_internal_has_attributeownershipacquisitionnotification()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification* temp = _impl_.callbackRequest_.attributeownershipacquisitionnotification_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.attributeownershipacquisitionnotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification& CallbackRequest::_internal_attributeownershipacquisitionnotification() const {
  return _internal_has_attributeownershipacquisitionnotification()
      ? *_impl_.callbackRequest_.attributeownershipacquisitionnotification_
      : reinterpret_cast< ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification&>(::rti1516_2025::fedpro::_AttributeOwnershipAcquisitionNotification_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification& CallbackRequest::attributeownershipacquisitionnotification() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.attributeOwnershipAcquisitionNotification)
  return _internal_attributeownershipacquisitionnotification();
}
inline ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification* CallbackRequest::unsafe_arena_release_attributeownershipacquisitionnotification() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.attributeOwnershipAcquisitionNotification)
  if (_internal_has_attributeownershipacquisitionnotification()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification* temp = _impl_.callbackRequest_.attributeownershipacquisitionnotification_;
    _impl_.callbackRequest_.attributeownershipacquisitionnotification_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_attributeownershipacquisitionnotification(::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification* attributeownershipacquisitionnotification) {
  clear_callbackRequest();
  if (attributeownershipacquisitionnotification) {
    set_has_attributeownershipacquisitionnotification();
    _impl_.callbackRequest_.attributeownershipacquisitionnotification_ = attributeownershipacquisitionnotification;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.attributeOwnershipAcquisitionNotification)
}
inline ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification* CallbackRequest::_internal_mutable_attributeownershipacquisitionnotification() {
  if (!_internal_has_attributeownershipacquisitionnotification()) {
    clear_callbackRequest();
    set_has_attributeownershipacquisitionnotification();
    _impl_.callbackRequest_.attributeownershipacquisitionnotification_ = CreateMaybeMessage< ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.attributeownershipacquisitionnotification_;
}
inline ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification* CallbackRequest::mutable_attributeownershipacquisitionnotification() {
  ::rti1516_2025::fedpro::AttributeOwnershipAcquisitionNotification* _msg = _internal_mutable_attributeownershipacquisitionnotification();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.attributeOwnershipAcquisitionNotification)
  return _msg;
}

// .rti1516_2025.fedpro.AttributeOwnershipUnavailable attributeOwnershipUnavailable = 52;
inline bool CallbackRequest::_internal_has_attributeownershipunavailable() const {
  return callbackRequest_case() == kAttributeOwnershipUnavailable;
}
inline bool CallbackRequest::has_attributeownershipunavailable() const {
  return _internal_has_attributeownershipunavailable();
}
inline void CallbackRequest::set_has_attributeownershipunavailable() {
  _impl_._oneof_case_[0] = kAttributeOwnershipUnavailable;
}
inline void CallbackRequest::clear_attributeownershipunavailable() {
  if (_internal_has_attributeownershipunavailable()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.attributeownershipunavailable_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::AttributeOwnershipUnavailable* CallbackRequest::release_attributeownershipunavailable() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.attributeOwnershipUnavailable)
  if (_internal_has_attributeownershipunavailable()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::AttributeOwnershipUnavailable* temp = _impl_.callbackRequest_.attributeownershipunavailable_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.attributeownershipunavailable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::AttributeOwnershipUnavailable& CallbackRequest::_internal_attributeownershipunavailable() const {
  return _internal_has_attributeownershipunavailable()
      ? *_impl_.callbackRequest_.attributeownershipunavailable_
      : reinterpret_cast< ::rti1516_2025::fedpro::AttributeOwnershipUnavailable&>(::rti1516_2025::fedpro::_AttributeOwnershipUnavailable_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeOwnershipUnavailable& CallbackRequest::attributeownershipunavailable() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.attributeOwnershipUnavailable)
  return _internal_attributeownershipunavailable();
}
inline ::rti1516_2025::fedpro::AttributeOwnershipUnavailable* CallbackRequest::unsafe_arena_release_attributeownershipunavailable() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.attributeOwnershipUnavailable)
  if (_internal_has_attributeownershipunavailable()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::AttributeOwnershipUnavailable* temp = _impl_.callbackRequest_.attributeownershipunavailable_;
    _impl_.callbackRequest_.attributeownershipunavailable_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_attributeownershipunavailable(::rti1516_2025::fedpro::AttributeOwnershipUnavailable* attributeownershipunavailable) {
  clear_callbackRequest();
  if (attributeownershipunavailable) {
    set_has_attributeownershipunavailable();
    _impl_.callbackRequest_.attributeownershipunavailable_ = attributeownershipunavailable;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.attributeOwnershipUnavailable)
}
inline ::rti1516_2025::fedpro::AttributeOwnershipUnavailable* CallbackRequest::_internal_mutable_attributeownershipunavailable() {
  if (!_internal_has_attributeownershipunavailable()) {
    clear_callbackRequest();
    set_has_attributeownershipunavailable();
    _impl_.callbackRequest_.attributeownershipunavailable_ = CreateMaybeMessage< ::rti1516_2025::fedpro::AttributeOwnershipUnavailable >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.attributeownershipunavailable_;
}
inline ::rti1516_2025::fedpro::AttributeOwnershipUnavailable* CallbackRequest::mutable_attributeownershipunavailable() {
  ::rti1516_2025::fedpro::AttributeOwnershipUnavailable* _msg = _internal_mutable_attributeownershipunavailable();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.attributeOwnershipUnavailable)
  return _msg;
}

// .rti1516_2025.fedpro.RequestAttributeOwnershipRelease requestAttributeOwnershipRelease = 53;
inline bool CallbackRequest::_internal_has_requestattributeownershiprelease() const {
  return callbackRequest_case() == kRequestAttributeOwnershipRelease;
}
inline bool CallbackRequest::has_requestattributeownershiprelease() const {
  return _internal_has_requestattributeownershiprelease();
}
inline void CallbackRequest::set_has_requestattributeownershiprelease() {
  _impl_._oneof_case_[0] = kRequestAttributeOwnershipRelease;
}
inline void CallbackRequest::clear_requestattributeownershiprelease() {
  if (_internal_has_requestattributeownershiprelease()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.requestattributeownershiprelease_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease* CallbackRequest::release_requestattributeownershiprelease() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.requestAttributeOwnershipRelease)
  if (_internal_has_requestattributeownershiprelease()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease* temp = _impl_.callbackRequest_.requestattributeownershiprelease_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.requestattributeownershiprelease_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease& CallbackRequest::_internal_requestattributeownershiprelease() const {
  return _internal_has_requestattributeownershiprelease()
      ? *_impl_.callbackRequest_.requestattributeownershiprelease_
      : reinterpret_cast< ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease&>(::rti1516_2025::fedpro::_RequestAttributeOwnershipRelease_default_instance_);
}
inline const ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease& CallbackRequest::requestattributeownershiprelease() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.requestAttributeOwnershipRelease)
  return _internal_requestattributeownershiprelease();
}
inline ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease* CallbackRequest::unsafe_arena_release_requestattributeownershiprelease() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.requestAttributeOwnershipRelease)
  if (_internal_has_requestattributeownershiprelease()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease* temp = _impl_.callbackRequest_.requestattributeownershiprelease_;
    _impl_.callbackRequest_.requestattributeownershiprelease_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_requestattributeownershiprelease(::rti1516_2025::fedpro::RequestAttributeOwnershipRelease* requestattributeownershiprelease) {
  clear_callbackRequest();
  if (requestattributeownershiprelease) {
    set_has_requestattributeownershiprelease();
    _impl_.callbackRequest_.requestattributeownershiprelease_ = requestattributeownershiprelease;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.requestAttributeOwnershipRelease)
}
inline ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease* CallbackRequest::_internal_mutable_requestattributeownershiprelease() {
  if (!_internal_has_requestattributeownershiprelease()) {
    clear_callbackRequest();
    set_has_requestattributeownershiprelease();
    _impl_.callbackRequest_.requestattributeownershiprelease_ = CreateMaybeMessage< ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.requestattributeownershiprelease_;
}
inline ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease* CallbackRequest::mutable_requestattributeownershiprelease() {
  ::rti1516_2025::fedpro::RequestAttributeOwnershipRelease* _msg = _internal_mutable_requestattributeownershiprelease();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.requestAttributeOwnershipRelease)
  return _msg;
}

// .rti1516_2025.fedpro.ConfirmAttributeOwnershipAcquisitionCancellation confirmAttributeOwnershipAcquisitionCancellation = 54;
inline bool CallbackRequest::_internal_has_confirmattributeownershipacquisitioncancellation() const {
  return callbackRequest_case() == kConfirmAttributeOwnershipAcquisitionCancellation;
}
inline bool CallbackRequest::has_confirmattributeownershipacquisitioncancellation() const {
  return _internal_has_confirmattributeownershipacquisitioncancellation();
}
inline void CallbackRequest::set_has_confirmattributeownershipacquisitioncancellation() {
  _impl_._oneof_case_[0] = kConfirmAttributeOwnershipAcquisitionCancellation;
}
inline void CallbackRequest::clear_confirmattributeownershipacquisitioncancellation() {
  if (_internal_has_confirmattributeownershipacquisitioncancellation()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.confirmattributeownershipacquisitioncancellation_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation* CallbackRequest::release_confirmattributeownershipacquisitioncancellation() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.confirmAttributeOwnershipAcquisitionCancellation)
  if (_internal_has_confirmattributeownershipacquisitioncancellation()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation* temp = _impl_.callbackRequest_.confirmattributeownershipacquisitioncancellation_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.confirmattributeownershipacquisitioncancellation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation& CallbackRequest::_internal_confirmattributeownershipacquisitioncancellation() const {
  return _internal_has_confirmattributeownershipacquisitioncancellation()
      ? *_impl_.callbackRequest_.confirmattributeownershipacquisitioncancellation_
      : reinterpret_cast< ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation&>(::rti1516_2025::fedpro::_ConfirmAttributeOwnershipAcquisitionCancellation_default_instance_);
}
inline const ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation& CallbackRequest::confirmattributeownershipacquisitioncancellation() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.confirmAttributeOwnershipAcquisitionCancellation)
  return _internal_confirmattributeownershipacquisitioncancellation();
}
inline ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation* CallbackRequest::unsafe_arena_release_confirmattributeownershipacquisitioncancellation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.confirmAttributeOwnershipAcquisitionCancellation)
  if (_internal_has_confirmattributeownershipacquisitioncancellation()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation* temp = _impl_.callbackRequest_.confirmattributeownershipacquisitioncancellation_;
    _impl_.callbackRequest_.confirmattributeownershipacquisitioncancellation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_confirmattributeownershipacquisitioncancellation(::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation* confirmattributeownershipacquisitioncancellation) {
  clear_callbackRequest();
  if (confirmattributeownershipacquisitioncancellation) {
    set_has_confirmattributeownershipacquisitioncancellation();
    _impl_.callbackRequest_.confirmattributeownershipacquisitioncancellation_ = confirmattributeownershipacquisitioncancellation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.confirmAttributeOwnershipAcquisitionCancellation)
}
inline ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation* CallbackRequest::_internal_mutable_confirmattributeownershipacquisitioncancellation() {
  if (!_internal_has_confirmattributeownershipacquisitioncancellation()) {
    clear_callbackRequest();
    set_has_confirmattributeownershipacquisitioncancellation();
    _impl_.callbackRequest_.confirmattributeownershipacquisitioncancellation_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.confirmattributeownershipacquisitioncancellation_;
}
inline ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation* CallbackRequest::mutable_confirmattributeownershipacquisitioncancellation() {
  ::rti1516_2025::fedpro::ConfirmAttributeOwnershipAcquisitionCancellation* _msg = _internal_mutable_confirmattributeownershipacquisitioncancellation();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.confirmAttributeOwnershipAcquisitionCancellation)
  return _msg;
}

// .rti1516_2025.fedpro.InformAttributeOwnership informAttributeOwnership = 55;
inline bool CallbackRequest::_internal_has_informattributeownership() const {
  return callbackRequest_case() == kInformAttributeOwnership;
}
inline bool CallbackRequest::has_informattributeownership() const {
  return _internal_has_informattributeownership();
}
inline void CallbackRequest::set_has_informattributeownership() {
  _impl_._oneof_case_[0] = kInformAttributeOwnership;
}
inline void CallbackRequest::clear_informattributeownership() {
  if (_internal_has_informattributeownership()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.informattributeownership_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::InformAttributeOwnership* CallbackRequest::release_informattributeownership() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.informAttributeOwnership)
  if (_internal_has_informattributeownership()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::InformAttributeOwnership* temp = _impl_.callbackRequest_.informattributeownership_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.informattributeownership_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::InformAttributeOwnership& CallbackRequest::_internal_informattributeownership() const {
  return _internal_has_informattributeownership()
      ? *_impl_.callbackRequest_.informattributeownership_
      : reinterpret_cast< ::rti1516_2025::fedpro::InformAttributeOwnership&>(::rti1516_2025::fedpro::_InformAttributeOwnership_default_instance_);
}
inline const ::rti1516_2025::fedpro::InformAttributeOwnership& CallbackRequest::informattributeownership() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.informAttributeOwnership)
  return _internal_informattributeownership();
}
inline ::rti1516_2025::fedpro::InformAttributeOwnership* CallbackRequest::unsafe_arena_release_informattributeownership() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.informAttributeOwnership)
  if (_internal_has_informattributeownership()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::InformAttributeOwnership* temp = _impl_.callbackRequest_.informattributeownership_;
    _impl_.callbackRequest_.informattributeownership_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_informattributeownership(::rti1516_2025::fedpro::InformAttributeOwnership* informattributeownership) {
  clear_callbackRequest();
  if (informattributeownership) {
    set_has_informattributeownership();
    _impl_.callbackRequest_.informattributeownership_ = informattributeownership;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.informAttributeOwnership)
}
inline ::rti1516_2025::fedpro::InformAttributeOwnership* CallbackRequest::_internal_mutable_informattributeownership() {
  if (!_internal_has_informattributeownership()) {
    clear_callbackRequest();
    set_has_informattributeownership();
    _impl_.callbackRequest_.informattributeownership_ = CreateMaybeMessage< ::rti1516_2025::fedpro::InformAttributeOwnership >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.informattributeownership_;
}
inline ::rti1516_2025::fedpro::InformAttributeOwnership* CallbackRequest::mutable_informattributeownership() {
  ::rti1516_2025::fedpro::InformAttributeOwnership* _msg = _internal_mutable_informattributeownership();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.informAttributeOwnership)
  return _msg;
}

// .rti1516_2025.fedpro.AttributeIsNotOwned attributeIsNotOwned = 56;
inline bool CallbackRequest::_internal_has_attributeisnotowned() const {
  return callbackRequest_case() == kAttributeIsNotOwned;
}
inline bool CallbackRequest::has_attributeisnotowned() const {
  return _internal_has_attributeisnotowned();
}
inline void CallbackRequest::set_has_attributeisnotowned() {
  _impl_._oneof_case_[0] = kAttributeIsNotOwned;
}
inline void CallbackRequest::clear_attributeisnotowned() {
  if (_internal_has_attributeisnotowned()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.attributeisnotowned_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::AttributeIsNotOwned* CallbackRequest::release_attributeisnotowned() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.attributeIsNotOwned)
  if (_internal_has_attributeisnotowned()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::AttributeIsNotOwned* temp = _impl_.callbackRequest_.attributeisnotowned_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.attributeisnotowned_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::AttributeIsNotOwned& CallbackRequest::_internal_attributeisnotowned() const {
  return _internal_has_attributeisnotowned()
      ? *_impl_.callbackRequest_.attributeisnotowned_
      : reinterpret_cast< ::rti1516_2025::fedpro::AttributeIsNotOwned&>(::rti1516_2025::fedpro::_AttributeIsNotOwned_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeIsNotOwned& CallbackRequest::attributeisnotowned() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.attributeIsNotOwned)
  return _internal_attributeisnotowned();
}
inline ::rti1516_2025::fedpro::AttributeIsNotOwned* CallbackRequest::unsafe_arena_release_attributeisnotowned() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.attributeIsNotOwned)
  if (_internal_has_attributeisnotowned()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::AttributeIsNotOwned* temp = _impl_.callbackRequest_.attributeisnotowned_;
    _impl_.callbackRequest_.attributeisnotowned_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_attributeisnotowned(::rti1516_2025::fedpro::AttributeIsNotOwned* attributeisnotowned) {
  clear_callbackRequest();
  if (attributeisnotowned) {
    set_has_attributeisnotowned();
    _impl_.callbackRequest_.attributeisnotowned_ = attributeisnotowned;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.attributeIsNotOwned)
}
inline ::rti1516_2025::fedpro::AttributeIsNotOwned* CallbackRequest::_internal_mutable_attributeisnotowned() {
  if (!_internal_has_attributeisnotowned()) {
    clear_callbackRequest();
    set_has_attributeisnotowned();
    _impl_.callbackRequest_.attributeisnotowned_ = CreateMaybeMessage< ::rti1516_2025::fedpro::AttributeIsNotOwned >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.attributeisnotowned_;
}
inline ::rti1516_2025::fedpro::AttributeIsNotOwned* CallbackRequest::mutable_attributeisnotowned() {
  ::rti1516_2025::fedpro::AttributeIsNotOwned* _msg = _internal_mutable_attributeisnotowned();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.attributeIsNotOwned)
  return _msg;
}

// .rti1516_2025.fedpro.AttributeIsOwnedByRTI attributeIsOwnedByRTI = 57;
inline bool CallbackRequest::_internal_has_attributeisownedbyrti() const {
  return callbackRequest_case() == kAttributeIsOwnedByRTI;
}
inline bool CallbackRequest::has_attributeisownedbyrti() const {
  return _internal_has_attributeisownedbyrti();
}
inline void CallbackRequest::set_has_attributeisownedbyrti() {
  _impl_._oneof_case_[0] = kAttributeIsOwnedByRTI;
}
inline void CallbackRequest::clear_attributeisownedbyrti() {
  if (_internal_has_attributeisownedbyrti()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.attributeisownedbyrti_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::AttributeIsOwnedByRTI* CallbackRequest::release_attributeisownedbyrti() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.attributeIsOwnedByRTI)
  if (_internal_has_attributeisownedbyrti()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::AttributeIsOwnedByRTI* temp = _impl_.callbackRequest_.attributeisownedbyrti_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.attributeisownedbyrti_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::AttributeIsOwnedByRTI& CallbackRequest::_internal_attributeisownedbyrti() const {
  return _internal_has_attributeisownedbyrti()
      ? *_impl_.callbackRequest_.attributeisownedbyrti_
      : reinterpret_cast< ::rti1516_2025::fedpro::AttributeIsOwnedByRTI&>(::rti1516_2025::fedpro::_AttributeIsOwnedByRTI_default_instance_);
}
inline const ::rti1516_2025::fedpro::AttributeIsOwnedByRTI& CallbackRequest::attributeisownedbyrti() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.attributeIsOwnedByRTI)
  return _internal_attributeisownedbyrti();
}
inline ::rti1516_2025::fedpro::AttributeIsOwnedByRTI* CallbackRequest::unsafe_arena_release_attributeisownedbyrti() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.attributeIsOwnedByRTI)
  if (_internal_has_attributeisownedbyrti()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::AttributeIsOwnedByRTI* temp = _impl_.callbackRequest_.attributeisownedbyrti_;
    _impl_.callbackRequest_.attributeisownedbyrti_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_attributeisownedbyrti(::rti1516_2025::fedpro::AttributeIsOwnedByRTI* attributeisownedbyrti) {
  clear_callbackRequest();
  if (attributeisownedbyrti) {
    set_has_attributeisownedbyrti();
    _impl_.callbackRequest_.attributeisownedbyrti_ = attributeisownedbyrti;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.attributeIsOwnedByRTI)
}
inline ::rti1516_2025::fedpro::AttributeIsOwnedByRTI* CallbackRequest::_internal_mutable_attributeisownedbyrti() {
  if (!_internal_has_attributeisownedbyrti()) {
    clear_callbackRequest();
    set_has_attributeisownedbyrti();
    _impl_.callbackRequest_.attributeisownedbyrti_ = CreateMaybeMessage< ::rti1516_2025::fedpro::AttributeIsOwnedByRTI >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.attributeisownedbyrti_;
}
inline ::rti1516_2025::fedpro::AttributeIsOwnedByRTI* CallbackRequest::mutable_attributeisownedbyrti() {
  ::rti1516_2025::fedpro::AttributeIsOwnedByRTI* _msg = _internal_mutable_attributeisownedbyrti();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.attributeIsOwnedByRTI)
  return _msg;
}

// .rti1516_2025.fedpro.TimeRegulationEnabled timeRegulationEnabled = 58;
inline bool CallbackRequest::_internal_has_timeregulationenabled() const {
  return callbackRequest_case() == kTimeRegulationEnabled;
}
inline bool CallbackRequest::has_timeregulationenabled() const {
  return _internal_has_timeregulationenabled();
}
inline void CallbackRequest::set_has_timeregulationenabled() {
  _impl_._oneof_case_[0] = kTimeRegulationEnabled;
}
inline void CallbackRequest::clear_timeregulationenabled() {
  if (_internal_has_timeregulationenabled()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.timeregulationenabled_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::TimeRegulationEnabled* CallbackRequest::release_timeregulationenabled() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.timeRegulationEnabled)
  if (_internal_has_timeregulationenabled()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::TimeRegulationEnabled* temp = _impl_.callbackRequest_.timeregulationenabled_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.timeregulationenabled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::TimeRegulationEnabled& CallbackRequest::_internal_timeregulationenabled() const {
  return _internal_has_timeregulationenabled()
      ? *_impl_.callbackRequest_.timeregulationenabled_
      : reinterpret_cast< ::rti1516_2025::fedpro::TimeRegulationEnabled&>(::rti1516_2025::fedpro::_TimeRegulationEnabled_default_instance_);
}
inline const ::rti1516_2025::fedpro::TimeRegulationEnabled& CallbackRequest::timeregulationenabled() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.timeRegulationEnabled)
  return _internal_timeregulationenabled();
}
inline ::rti1516_2025::fedpro::TimeRegulationEnabled* CallbackRequest::unsafe_arena_release_timeregulationenabled() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.timeRegulationEnabled)
  if (_internal_has_timeregulationenabled()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::TimeRegulationEnabled* temp = _impl_.callbackRequest_.timeregulationenabled_;
    _impl_.callbackRequest_.timeregulationenabled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_timeregulationenabled(::rti1516_2025::fedpro::TimeRegulationEnabled* timeregulationenabled) {
  clear_callbackRequest();
  if (timeregulationenabled) {
    set_has_timeregulationenabled();
    _impl_.callbackRequest_.timeregulationenabled_ = timeregulationenabled;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.timeRegulationEnabled)
}
inline ::rti1516_2025::fedpro::TimeRegulationEnabled* CallbackRequest::_internal_mutable_timeregulationenabled() {
  if (!_internal_has_timeregulationenabled()) {
    clear_callbackRequest();
    set_has_timeregulationenabled();
    _impl_.callbackRequest_.timeregulationenabled_ = CreateMaybeMessage< ::rti1516_2025::fedpro::TimeRegulationEnabled >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.timeregulationenabled_;
}
inline ::rti1516_2025::fedpro::TimeRegulationEnabled* CallbackRequest::mutable_timeregulationenabled() {
  ::rti1516_2025::fedpro::TimeRegulationEnabled* _msg = _internal_mutable_timeregulationenabled();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.timeRegulationEnabled)
  return _msg;
}

// .rti1516_2025.fedpro.TimeConstrainedEnabled timeConstrainedEnabled = 59;
inline bool CallbackRequest::_internal_has_timeconstrainedenabled() const {
  return callbackRequest_case() == kTimeConstrainedEnabled;
}
inline bool CallbackRequest::has_timeconstrainedenabled() const {
  return _internal_has_timeconstrainedenabled();
}
inline void CallbackRequest::set_has_timeconstrainedenabled() {
  _impl_._oneof_case_[0] = kTimeConstrainedEnabled;
}
inline void CallbackRequest::clear_timeconstrainedenabled() {
  if (_internal_has_timeconstrainedenabled()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.timeconstrainedenabled_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::TimeConstrainedEnabled* CallbackRequest::release_timeconstrainedenabled() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.timeConstrainedEnabled)
  if (_internal_has_timeconstrainedenabled()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::TimeConstrainedEnabled* temp = _impl_.callbackRequest_.timeconstrainedenabled_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.timeconstrainedenabled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::TimeConstrainedEnabled& CallbackRequest::_internal_timeconstrainedenabled() const {
  return _internal_has_timeconstrainedenabled()
      ? *_impl_.callbackRequest_.timeconstrainedenabled_
      : reinterpret_cast< ::rti1516_2025::fedpro::TimeConstrainedEnabled&>(::rti1516_2025::fedpro::_TimeConstrainedEnabled_default_instance_);
}
inline const ::rti1516_2025::fedpro::TimeConstrainedEnabled& CallbackRequest::timeconstrainedenabled() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.timeConstrainedEnabled)
  return _internal_timeconstrainedenabled();
}
inline ::rti1516_2025::fedpro::TimeConstrainedEnabled* CallbackRequest::unsafe_arena_release_timeconstrainedenabled() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.timeConstrainedEnabled)
  if (_internal_has_timeconstrainedenabled()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::TimeConstrainedEnabled* temp = _impl_.callbackRequest_.timeconstrainedenabled_;
    _impl_.callbackRequest_.timeconstrainedenabled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_timeconstrainedenabled(::rti1516_2025::fedpro::TimeConstrainedEnabled* timeconstrainedenabled) {
  clear_callbackRequest();
  if (timeconstrainedenabled) {
    set_has_timeconstrainedenabled();
    _impl_.callbackRequest_.timeconstrainedenabled_ = timeconstrainedenabled;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.timeConstrainedEnabled)
}
inline ::rti1516_2025::fedpro::TimeConstrainedEnabled* CallbackRequest::_internal_mutable_timeconstrainedenabled() {
  if (!_internal_has_timeconstrainedenabled()) {
    clear_callbackRequest();
    set_has_timeconstrainedenabled();
    _impl_.callbackRequest_.timeconstrainedenabled_ = CreateMaybeMessage< ::rti1516_2025::fedpro::TimeConstrainedEnabled >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.timeconstrainedenabled_;
}
inline ::rti1516_2025::fedpro::TimeConstrainedEnabled* CallbackRequest::mutable_timeconstrainedenabled() {
  ::rti1516_2025::fedpro::TimeConstrainedEnabled* _msg = _internal_mutable_timeconstrainedenabled();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.timeConstrainedEnabled)
  return _msg;
}

// .rti1516_2025.fedpro.FlushQueueGrant flushQueueGrant = 60;
inline bool CallbackRequest::_internal_has_flushqueuegrant() const {
  return callbackRequest_case() == kFlushQueueGrant;
}
inline bool CallbackRequest::has_flushqueuegrant() const {
  return _internal_has_flushqueuegrant();
}
inline void CallbackRequest::set_has_flushqueuegrant() {
  _impl_._oneof_case_[0] = kFlushQueueGrant;
}
inline void CallbackRequest::clear_flushqueuegrant() {
  if (_internal_has_flushqueuegrant()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.flushqueuegrant_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::FlushQueueGrant* CallbackRequest::release_flushqueuegrant() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.flushQueueGrant)
  if (_internal_has_flushqueuegrant()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FlushQueueGrant* temp = _impl_.callbackRequest_.flushqueuegrant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.flushqueuegrant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::FlushQueueGrant& CallbackRequest::_internal_flushqueuegrant() const {
  return _internal_has_flushqueuegrant()
      ? *_impl_.callbackRequest_.flushqueuegrant_
      : reinterpret_cast< ::rti1516_2025::fedpro::FlushQueueGrant&>(::rti1516_2025::fedpro::_FlushQueueGrant_default_instance_);
}
inline const ::rti1516_2025::fedpro::FlushQueueGrant& CallbackRequest::flushqueuegrant() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.flushQueueGrant)
  return _internal_flushqueuegrant();
}
inline ::rti1516_2025::fedpro::FlushQueueGrant* CallbackRequest::unsafe_arena_release_flushqueuegrant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.flushQueueGrant)
  if (_internal_has_flushqueuegrant()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::FlushQueueGrant* temp = _impl_.callbackRequest_.flushqueuegrant_;
    _impl_.callbackRequest_.flushqueuegrant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_flushqueuegrant(::rti1516_2025::fedpro::FlushQueueGrant* flushqueuegrant) {
  clear_callbackRequest();
  if (flushqueuegrant) {
    set_has_flushqueuegrant();
    _impl_.callbackRequest_.flushqueuegrant_ = flushqueuegrant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.flushQueueGrant)
}
inline ::rti1516_2025::fedpro::FlushQueueGrant* CallbackRequest::_internal_mutable_flushqueuegrant() {
  if (!_internal_has_flushqueuegrant()) {
    clear_callbackRequest();
    set_has_flushqueuegrant();
    _impl_.callbackRequest_.flushqueuegrant_ = CreateMaybeMessage< ::rti1516_2025::fedpro::FlushQueueGrant >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.flushqueuegrant_;
}
inline ::rti1516_2025::fedpro::FlushQueueGrant* CallbackRequest::mutable_flushqueuegrant() {
  ::rti1516_2025::fedpro::FlushQueueGrant* _msg = _internal_mutable_flushqueuegrant();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.flushQueueGrant)
  return _msg;
}

// .rti1516_2025.fedpro.TimeAdvanceGrant timeAdvanceGrant = 61;
inline bool CallbackRequest::_internal_has_timeadvancegrant() const {
  return callbackRequest_case() == kTimeAdvanceGrant;
}
inline bool CallbackRequest::has_timeadvancegrant() const {
  return _internal_has_timeadvancegrant();
}
inline void CallbackRequest::set_has_timeadvancegrant() {
  _impl_._oneof_case_[0] = kTimeAdvanceGrant;
}
inline void CallbackRequest::clear_timeadvancegrant() {
  if (_internal_has_timeadvancegrant()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.timeadvancegrant_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::TimeAdvanceGrant* CallbackRequest::release_timeadvancegrant() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.timeAdvanceGrant)
  if (_internal_has_timeadvancegrant()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::TimeAdvanceGrant* temp = _impl_.callbackRequest_.timeadvancegrant_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.timeadvancegrant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::TimeAdvanceGrant& CallbackRequest::_internal_timeadvancegrant() const {
  return _internal_has_timeadvancegrant()
      ? *_impl_.callbackRequest_.timeadvancegrant_
      : reinterpret_cast< ::rti1516_2025::fedpro::TimeAdvanceGrant&>(::rti1516_2025::fedpro::_TimeAdvanceGrant_default_instance_);
}
inline const ::rti1516_2025::fedpro::TimeAdvanceGrant& CallbackRequest::timeadvancegrant() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.timeAdvanceGrant)
  return _internal_timeadvancegrant();
}
inline ::rti1516_2025::fedpro::TimeAdvanceGrant* CallbackRequest::unsafe_arena_release_timeadvancegrant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.timeAdvanceGrant)
  if (_internal_has_timeadvancegrant()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::TimeAdvanceGrant* temp = _impl_.callbackRequest_.timeadvancegrant_;
    _impl_.callbackRequest_.timeadvancegrant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_timeadvancegrant(::rti1516_2025::fedpro::TimeAdvanceGrant* timeadvancegrant) {
  clear_callbackRequest();
  if (timeadvancegrant) {
    set_has_timeadvancegrant();
    _impl_.callbackRequest_.timeadvancegrant_ = timeadvancegrant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.timeAdvanceGrant)
}
inline ::rti1516_2025::fedpro::TimeAdvanceGrant* CallbackRequest::_internal_mutable_timeadvancegrant() {
  if (!_internal_has_timeadvancegrant()) {
    clear_callbackRequest();
    set_has_timeadvancegrant();
    _impl_.callbackRequest_.timeadvancegrant_ = CreateMaybeMessage< ::rti1516_2025::fedpro::TimeAdvanceGrant >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.timeadvancegrant_;
}
inline ::rti1516_2025::fedpro::TimeAdvanceGrant* CallbackRequest::mutable_timeadvancegrant() {
  ::rti1516_2025::fedpro::TimeAdvanceGrant* _msg = _internal_mutable_timeadvancegrant();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.timeAdvanceGrant)
  return _msg;
}

// .rti1516_2025.fedpro.RequestRetraction requestRetraction = 62;
inline bool CallbackRequest::_internal_has_requestretraction() const {
  return callbackRequest_case() == kRequestRetraction;
}
inline bool CallbackRequest::has_requestretraction() const {
  return _internal_has_requestretraction();
}
inline void CallbackRequest::set_has_requestretraction() {
  _impl_._oneof_case_[0] = kRequestRetraction;
}
inline void CallbackRequest::clear_requestretraction() {
  if (_internal_has_requestretraction()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackRequest_.requestretraction_;
    }
    clear_has_callbackRequest();
  }
}
inline ::rti1516_2025::fedpro::RequestRetraction* CallbackRequest::release_requestretraction() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackRequest.requestRetraction)
  if (_internal_has_requestretraction()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::RequestRetraction* temp = _impl_.callbackRequest_.requestretraction_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackRequest_.requestretraction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::RequestRetraction& CallbackRequest::_internal_requestretraction() const {
  return _internal_has_requestretraction()
      ? *_impl_.callbackRequest_.requestretraction_
      : reinterpret_cast< ::rti1516_2025::fedpro::RequestRetraction&>(::rti1516_2025::fedpro::_RequestRetraction_default_instance_);
}
inline const ::rti1516_2025::fedpro::RequestRetraction& CallbackRequest::requestretraction() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackRequest.requestRetraction)
  return _internal_requestretraction();
}
inline ::rti1516_2025::fedpro::RequestRetraction* CallbackRequest::unsafe_arena_release_requestretraction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackRequest.requestRetraction)
  if (_internal_has_requestretraction()) {
    clear_has_callbackRequest();
    ::rti1516_2025::fedpro::RequestRetraction* temp = _impl_.callbackRequest_.requestretraction_;
    _impl_.callbackRequest_.requestretraction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackRequest::unsafe_arena_set_allocated_requestretraction(::rti1516_2025::fedpro::RequestRetraction* requestretraction) {
  clear_callbackRequest();
  if (requestretraction) {
    set_has_requestretraction();
    _impl_.callbackRequest_.requestretraction_ = requestretraction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackRequest.requestRetraction)
}
inline ::rti1516_2025::fedpro::RequestRetraction* CallbackRequest::_internal_mutable_requestretraction() {
  if (!_internal_has_requestretraction()) {
    clear_callbackRequest();
    set_has_requestretraction();
    _impl_.callbackRequest_.requestretraction_ = CreateMaybeMessage< ::rti1516_2025::fedpro::RequestRetraction >(GetArenaForAllocation());
  }
  return _impl_.callbackRequest_.requestretraction_;
}
inline ::rti1516_2025::fedpro::RequestRetraction* CallbackRequest::mutable_requestretraction() {
  ::rti1516_2025::fedpro::RequestRetraction* _msg = _internal_mutable_requestretraction();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackRequest.requestRetraction)
  return _msg;
}

inline bool CallbackRequest::has_callbackRequest() const {
  return callbackRequest_case() != CALLBACKREQUEST_NOT_SET;
}
inline void CallbackRequest::clear_has_callbackRequest() {
  _impl_._oneof_case_[0] = CALLBACKREQUEST_NOT_SET;
}
inline CallbackRequest::CallbackRequestCase CallbackRequest::callbackRequest_case() const {
  return CallbackRequest::CallbackRequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CallbackResponse

// .rti1516_2025.fedpro.CallbackSucceeded callbackSucceeded = 1;
inline bool CallbackResponse::_internal_has_callbacksucceeded() const {
  return callbackResponse_case() == kCallbackSucceeded;
}
inline bool CallbackResponse::has_callbacksucceeded() const {
  return _internal_has_callbacksucceeded();
}
inline void CallbackResponse::set_has_callbacksucceeded() {
  _impl_._oneof_case_[0] = kCallbackSucceeded;
}
inline void CallbackResponse::clear_callbacksucceeded() {
  if (_internal_has_callbacksucceeded()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.callbackResponse_.callbacksucceeded_;
    }
    clear_has_callbackResponse();
  }
}
inline ::rti1516_2025::fedpro::CallbackSucceeded* CallbackResponse::release_callbacksucceeded() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackResponse.callbackSucceeded)
  if (_internal_has_callbacksucceeded()) {
    clear_has_callbackResponse();
    ::rti1516_2025::fedpro::CallbackSucceeded* temp = _impl_.callbackResponse_.callbacksucceeded_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackResponse_.callbacksucceeded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::CallbackSucceeded& CallbackResponse::_internal_callbacksucceeded() const {
  return _internal_has_callbacksucceeded()
      ? *_impl_.callbackResponse_.callbacksucceeded_
      : reinterpret_cast< ::rti1516_2025::fedpro::CallbackSucceeded&>(::rti1516_2025::fedpro::_CallbackSucceeded_default_instance_);
}
inline const ::rti1516_2025::fedpro::CallbackSucceeded& CallbackResponse::callbacksucceeded() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackResponse.callbackSucceeded)
  return _internal_callbacksucceeded();
}
inline ::rti1516_2025::fedpro::CallbackSucceeded* CallbackResponse::unsafe_arena_release_callbacksucceeded() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackResponse.callbackSucceeded)
  if (_internal_has_callbacksucceeded()) {
    clear_has_callbackResponse();
    ::rti1516_2025::fedpro::CallbackSucceeded* temp = _impl_.callbackResponse_.callbacksucceeded_;
    _impl_.callbackResponse_.callbacksucceeded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackResponse::unsafe_arena_set_allocated_callbacksucceeded(::rti1516_2025::fedpro::CallbackSucceeded* callbacksucceeded) {
  clear_callbackResponse();
  if (callbacksucceeded) {
    set_has_callbacksucceeded();
    _impl_.callbackResponse_.callbacksucceeded_ = callbacksucceeded;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackResponse.callbackSucceeded)
}
inline ::rti1516_2025::fedpro::CallbackSucceeded* CallbackResponse::_internal_mutable_callbacksucceeded() {
  if (!_internal_has_callbacksucceeded()) {
    clear_callbackResponse();
    set_has_callbacksucceeded();
    _impl_.callbackResponse_.callbacksucceeded_ = CreateMaybeMessage< ::rti1516_2025::fedpro::CallbackSucceeded >(GetArenaForAllocation());
  }
  return _impl_.callbackResponse_.callbacksucceeded_;
}
inline ::rti1516_2025::fedpro::CallbackSucceeded* CallbackResponse::mutable_callbacksucceeded() {
  ::rti1516_2025::fedpro::CallbackSucceeded* _msg = _internal_mutable_callbacksucceeded();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackResponse.callbackSucceeded)
  return _msg;
}

// .rti1516_2025.fedpro.ExceptionData callbackFailed = 2;
inline bool CallbackResponse::_internal_has_callbackfailed() const {
  return callbackResponse_case() == kCallbackFailed;
}
inline bool CallbackResponse::has_callbackfailed() const {
  return _internal_has_callbackfailed();
}
inline void CallbackResponse::set_has_callbackfailed() {
  _impl_._oneof_case_[0] = kCallbackFailed;
}
inline ::rti1516_2025::fedpro::ExceptionData* CallbackResponse::release_callbackfailed() {
  // @@protoc_insertion_point(field_release:rti1516_2025.fedpro.CallbackResponse.callbackFailed)
  if (_internal_has_callbackfailed()) {
    clear_has_callbackResponse();
    ::rti1516_2025::fedpro::ExceptionData* temp = _impl_.callbackResponse_.callbackfailed_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.callbackResponse_.callbackfailed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::rti1516_2025::fedpro::ExceptionData& CallbackResponse::_internal_callbackfailed() const {
  return _internal_has_callbackfailed()
      ? *_impl_.callbackResponse_.callbackfailed_
      : reinterpret_cast< ::rti1516_2025::fedpro::ExceptionData&>(::rti1516_2025::fedpro::_ExceptionData_default_instance_);
}
inline const ::rti1516_2025::fedpro::ExceptionData& CallbackResponse::callbackfailed() const {
  // @@protoc_insertion_point(field_get:rti1516_2025.fedpro.CallbackResponse.callbackFailed)
  return _internal_callbackfailed();
}
inline ::rti1516_2025::fedpro::ExceptionData* CallbackResponse::unsafe_arena_release_callbackfailed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rti1516_2025.fedpro.CallbackResponse.callbackFailed)
  if (_internal_has_callbackfailed()) {
    clear_has_callbackResponse();
    ::rti1516_2025::fedpro::ExceptionData* temp = _impl_.callbackResponse_.callbackfailed_;
    _impl_.callbackResponse_.callbackfailed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CallbackResponse::unsafe_arena_set_allocated_callbackfailed(::rti1516_2025::fedpro::ExceptionData* callbackfailed) {
  clear_callbackResponse();
  if (callbackfailed) {
    set_has_callbackfailed();
    _impl_.callbackResponse_.callbackfailed_ = callbackfailed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rti1516_2025.fedpro.CallbackResponse.callbackFailed)
}
inline ::rti1516_2025::fedpro::ExceptionData* CallbackResponse::_internal_mutable_callbackfailed() {
  if (!_internal_has_callbackfailed()) {
    clear_callbackResponse();
    set_has_callbackfailed();
    _impl_.callbackResponse_.callbackfailed_ = CreateMaybeMessage< ::rti1516_2025::fedpro::ExceptionData >(GetArenaForAllocation());
  }
  return _impl_.callbackResponse_.callbackfailed_;
}
inline ::rti1516_2025::fedpro::ExceptionData* CallbackResponse::mutable_callbackfailed() {
  ::rti1516_2025::fedpro::ExceptionData* _msg = _internal_mutable_callbackfailed();
  // @@protoc_insertion_point(field_mutable:rti1516_2025.fedpro.CallbackResponse.callbackFailed)
  return _msg;
}

inline bool CallbackResponse::has_callbackResponse() const {
  return callbackResponse_case() != CALLBACKRESPONSE_NOT_SET;
}
inline void CallbackResponse::clear_has_callbackResponse() {
  _impl_._oneof_case_[0] = CALLBACKRESPONSE_NOT_SET;
}
inline CallbackResponse::CallbackResponseCase CallbackResponse::callbackResponse_case() const {
  return CallbackResponse::CallbackResponseCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fedpro
}  // namespace rti1516_2025

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FederateAmbassador_2eproto
